
h750_osilio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08011264  08011264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011824  08011824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801182c  0801182c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011830  08011830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08011834  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00075d98  2400006c  080118a0  0001306c  2**2
                  ALLOC
  8 ._user_heap_stack 00003c04  24075e04  080118a0  00013e04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000204bb  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003fad  00000000  00000000  00033555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a48  00000000  00000000  00037508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001462  00000000  00000000  00038f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c878  00000000  00000000  0003a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025e3b  00000000  00000000  00076c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171e27  00000000  00000000  0009ca65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020e88c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076e0  00000000  00000000  0020e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  00215fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801124c 	.word	0x0801124c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0801124c 	.word	0x0801124c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <__io_putchar+0x20>)
 80006be:	f00a f9f5 	bl	800aaac <HAL_UART_Transmit>
	return ch;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	24000254 	.word	0x24000254

080006d0 <LoadSDFileInfo>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int LoadSDFileInfo() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
	FRESULT f_res = f_open(&SDFile, "play.bin", FA_READ);
 80006d6:	2201      	movs	r2, #1
 80006d8:	494d      	ldr	r1, [pc, #308]	@ (8000810 <LoadSDFileInfo+0x140>)
 80006da:	484e      	ldr	r0, [pc, #312]	@ (8000814 <LoadSDFileInfo+0x144>)
 80006dc:	f00f f806 	bl	800f6ec <f_open>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
	if (f_res != FR_OK) {
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <LoadSDFileInfo+0x1e>
  	return 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e081      	b.n	80007f2 <LoadSDFileInfo+0x122>
	}

	uint8_t buffer[6];
	uint32_t br;
	f_res = f_read(&SDFile, (uint8_t *) buffer, 6, &br);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	f107 0108 	add.w	r1, r7, #8
 80006f4:	2206      	movs	r2, #6
 80006f6:	4847      	ldr	r0, [pc, #284]	@ (8000814 <LoadSDFileInfo+0x144>)
 80006f8:	f00f f9b2 	bl	800fa60 <f_read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]

	target_fps = ((uint16_t)buffer[1] << 8 | buffer[0]) / 100.0;
 8000700:	7a7b      	ldrb	r3, [r7, #9]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	7a3a      	ldrb	r2, [r7, #8]
 8000706:	4313      	orrs	r3, r2
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000710:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000800 <LoadSDFileInfo+0x130>
 8000714:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000718:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800071c:	4b3e      	ldr	r3, [pc, #248]	@ (8000818 <LoadSDFileInfo+0x148>)
 800071e:	edc3 7a00 	vstr	s15, [r3]
	frame_total = (uint16_t)buffer[3] << 8 | buffer[2];
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	b21b      	sxth	r3, r3
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7abb      	ldrb	r3, [r7, #10]
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b21b      	sxth	r3, r3
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b39      	ldr	r3, [pc, #228]	@ (800081c <LoadSDFileInfo+0x14c>)
 8000736:	801a      	strh	r2, [r3, #0]
	frame_size = (uint16_t)buffer[5] << 8 | buffer[4];
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	b21b      	sxth	r3, r3
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21a      	sxth	r2, r3
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <LoadSDFileInfo+0x150>)
 800074c:	801a      	strh	r2, [r3, #0]
	 * TIM6 = 240M / (71+1) = 3MHz
	 * DAC fq = 3MSa/s
	 * fps = DAC fq / frameSize / playCnt =let= targetFps
	 * playCnt = DAC fq / frameSize / targetFps
	 */
	play_cnt = 3000000.0 / frame_size / target_fps;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <LoadSDFileInfo+0x150>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800075a:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8000808 <LoadSDFileInfo+0x138>
 800075e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <LoadSDFileInfo+0x148>)
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800076c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000770:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <LoadSDFileInfo+0x154>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
	if (play_cnt < 1 || frame_size > SIG_N) {
 800077a:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <LoadSDFileInfo+0x154>)
 800077c:	edd3 7a00 	vldr	s15, [r3]
 8000780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	d405      	bmi.n	800079a <LoadSDFileInfo+0xca>
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <LoadSDFileInfo+0x150>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000796:	4293      	cmp	r3, r2
 8000798:	d901      	bls.n	800079e <LoadSDFileInfo+0xce>
		return 1;
 800079a:	2301      	movs	r3, #1
 800079c:	e029      	b.n	80007f2 <LoadSDFileInfo+0x122>
	}

	printf("> frame_total = %d\n", (int)frame_total);
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <LoadSDFileInfo+0x14c>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4820      	ldr	r0, [pc, #128]	@ (8000828 <LoadSDFileInfo+0x158>)
 80007a6:	f00f fe87 	bl	80104b8 <iprintf>
	printf("> target_fps(*100) = %d\n", (int)(target_fps * 100));
 80007aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <LoadSDFileInfo+0x148>)
 80007ac:	edd3 7a00 	vldr	s15, [r3]
 80007b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800082c <LoadSDFileInfo+0x15c>
 80007b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007bc:	ee17 1a90 	vmov	r1, s15
 80007c0:	481b      	ldr	r0, [pc, #108]	@ (8000830 <LoadSDFileInfo+0x160>)
 80007c2:	f00f fe79 	bl	80104b8 <iprintf>
	printf("> frame_size = %d\n", (int)frame_size);
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <LoadSDFileInfo+0x150>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4819      	ldr	r0, [pc, #100]	@ (8000834 <LoadSDFileInfo+0x164>)
 80007ce:	f00f fe73 	bl	80104b8 <iprintf>
	printf("> calculated play_cnt ~= %d\n", (int)play_cnt);
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <LoadSDFileInfo+0x154>)
 80007d4:	edd3 7a00 	vldr	s15, [r3]
 80007d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007dc:	ee17 1a90 	vmov	r1, s15
 80007e0:	4815      	ldr	r0, [pc, #84]	@ (8000838 <LoadSDFileInfo+0x168>)
 80007e2:	f00f fe69 	bl	80104b8 <iprintf>
	start_tick = HAL_GetTick();
 80007e6:	f001 f87b 	bl	80018e0 <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a13      	ldr	r2, [pc, #76]	@ (800083c <LoadSDFileInfo+0x16c>)
 80007ee:	6013      	str	r3, [r2, #0]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	f3af 8000 	nop.w
 8000800:	00000000 	.word	0x00000000
 8000804:	40590000 	.word	0x40590000
 8000808:	00000000 	.word	0x00000000
 800080c:	4146e360 	.word	0x4146e360
 8000810:	08011264 	.word	0x08011264
 8000814:	2407584c 	.word	0x2407584c
 8000818:	240002ec 	.word	0x240002ec
 800081c:	240002e8 	.word	0x240002e8
 8000820:	240002f0 	.word	0x240002f0
 8000824:	240002f4 	.word	0x240002f4
 8000828:	08011270 	.word	0x08011270
 800082c:	42c80000 	.word	0x42c80000
 8000830:	08011284 	.word	0x08011284
 8000834:	080112a0 	.word	0x080112a0
 8000838:	080112b4 	.word	0x080112b4
 800083c:	24075604 	.word	0x24075604

08000840 <LoadSDFileFrame>:
void LoadSDFileFrame(int firstFrame) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t br;
  FRESULT f_res = f_read(&SDFile, (uint8_t *) &signalXY[cur_play ^ 1][0], frame_size * 4, &br);
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <LoadSDFileFrame+0x6c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <LoadSDFileFrame+0x70>)
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <LoadSDFileFrame+0x74>)
 8000858:	1899      	adds	r1, r3, r2
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <LoadSDFileFrame+0x78>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	461a      	mov	r2, r3
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4815      	ldr	r0, [pc, #84]	@ (80008bc <LoadSDFileFrame+0x7c>)
 8000868:	f00f f8fa 	bl	800fa60 <f_read>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
  frame_idx = (frame_idx + 1) % frame_total;
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <LoadSDFileFrame+0x80>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <LoadSDFileFrame+0x84>)
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	fbb3 f1f2 	udiv	r1, r3, r2
 800087e:	fb01 f202 	mul.w	r2, r1, r2
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <LoadSDFileFrame+0x80>)
 8000886:	6013      	str	r3, [r2, #0]
  if (!frame_idx) {
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <LoadSDFileFrame+0x80>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d108      	bne.n	80008a2 <LoadSDFileFrame+0x62>
  	f_lseek(&SDFile, 6);
 8000890:	2106      	movs	r1, #6
 8000892:	480a      	ldr	r0, [pc, #40]	@ (80008bc <LoadSDFileFrame+0x7c>)
 8000894:	f00f fa23 	bl	800fcde <f_lseek>
  	start_tick = HAL_GetTick();
 8000898:	f001 f822 	bl	80018e0 <HAL_GetTick>
 800089c:	4603      	mov	r3, r0
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoadSDFileFrame+0x88>)
 80008a0:	6013      	str	r3, [r2, #0]
  }
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	240002f8 	.word	0x240002f8
 80008b0:	0003a980 	.word	0x0003a980
 80008b4:	240002fc 	.word	0x240002fc
 80008b8:	240002f0 	.word	0x240002f0
 80008bc:	2407584c 	.word	0x2407584c
 80008c0:	240755fc 	.word	0x240755fc
 80008c4:	240002e8 	.word	0x240002e8
 80008c8:	24075604 	.word	0x24075604
 80008cc:	00000000 	.word	0x00000000

080008d0 <setDAC>:

void setDAC() {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	ed2d 8b02 	vpush	{d8}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af02      	add	r7, sp, #8
	float cur_fps = 1.0 * frame_idx / ((HAL_GetTick() - start_tick) * 0.001);
 80008da:	4b37      	ldr	r3, [pc, #220]	@ (80009b8 <setDAC+0xe8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80008e6:	f000 fffb 	bl	80018e0 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <setDAC+0xec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008fa:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80009b0 <setDAC+0xe0>
 80008fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000902:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800090a:	edc7 7a01 	vstr	s15, [r7, #4]
  if (cur_fps < target_fps) {
 800090e:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <setDAC+0xf0>)
 8000910:	edd3 7a00 	vldr	s15, [r3]
 8000914:	ed97 7a01 	vldr	s14, [r7, #4]
 8000918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000920:	d400      	bmi.n	8000924 <setDAC+0x54>
  	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *) (signalXY[cur_play] + frame_size), frame_size, DAC_ALIGN_12B_R);
  	HAL_TIM_Base_Start(&htim6);
  	LoadSDFileFrame(0);
//  	printf("fps = %d\n", (int)(cur_fps * 100));
  }
}
 8000922:	e03c      	b.n	800099e <setDAC+0xce>
  	cur_play ^= 1;
 8000924:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <setDAC+0xf4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <setDAC+0xf4>)
 800092e:	6013      	str	r3, [r2, #0]
  	HAL_TIM_Base_Stop(&htim6);
 8000930:	4825      	ldr	r0, [pc, #148]	@ (80009c8 <setDAC+0xf8>)
 8000932:	f009 ff15 	bl	800a760 <HAL_TIM_Base_Stop>
  	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000936:	2100      	movs	r1, #0
 8000938:	4824      	ldr	r0, [pc, #144]	@ (80009cc <setDAC+0xfc>)
 800093a:	f001 fa77 	bl	8001e2c <HAL_DAC_Stop_DMA>
  	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 800093e:	2110      	movs	r1, #16
 8000940:	4822      	ldr	r0, [pc, #136]	@ (80009cc <setDAC+0xfc>)
 8000942:	f001 fa73 	bl	8001e2c <HAL_DAC_Stop_DMA>
  	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) signalXY[cur_play],				 				 frame_size, DAC_ALIGN_12B_R);
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <setDAC+0xf4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <setDAC+0x100>)
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	4a20      	ldr	r2, [pc, #128]	@ (80009d4 <setDAC+0x104>)
 8000952:	441a      	add	r2, r3
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <setDAC+0x108>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	2300      	movs	r3, #0
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	460b      	mov	r3, r1
 8000960:	2100      	movs	r1, #0
 8000962:	481a      	ldr	r0, [pc, #104]	@ (80009cc <setDAC+0xfc>)
 8000964:	f001 f9a2 	bl	8001cac <HAL_DAC_Start_DMA>
  	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *) (signalXY[cur_play] + frame_size), frame_size, DAC_ALIGN_12B_R);
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <setDAC+0xf4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <setDAC+0x100>)
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	4a18      	ldr	r2, [pc, #96]	@ (80009d4 <setDAC+0x104>)
 8000974:	441a      	add	r2, r3
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <setDAC+0x108>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	441a      	add	r2, r3
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <setDAC+0x108>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	460b      	mov	r3, r1
 800098a:	2110      	movs	r1, #16
 800098c:	480f      	ldr	r0, [pc, #60]	@ (80009cc <setDAC+0xfc>)
 800098e:	f001 f98d 	bl	8001cac <HAL_DAC_Start_DMA>
  	HAL_TIM_Base_Start(&htim6);
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <setDAC+0xf8>)
 8000994:	f009 fe74 	bl	800a680 <HAL_TIM_Base_Start>
  	LoadSDFileFrame(0);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff51 	bl	8000840 <LoadSDFileFrame>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	ecbd 8b02 	vpop	{d8}
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	f3af 8000 	nop.w
 80009b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009b4:	3f50624d 	.word	0x3f50624d
 80009b8:	240755fc 	.word	0x240755fc
 80009bc:	24075604 	.word	0x24075604
 80009c0:	240002ec 	.word	0x240002ec
 80009c4:	240002f8 	.word	0x240002f8
 80009c8:	24000208 	.word	0x24000208
 80009cc:	24000088 	.word	0x24000088
 80009d0:	0003a980 	.word	0x0003a980
 80009d4:	240002fc 	.word	0x240002fc
 80009d8:	240002f0 	.word	0x240002f0

080009dc <HAL_DACEx_ConvCpltCallbackCh2>:
void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	setDAC();
 80009e4:	f7ff ff74 	bl	80008d0 <setDAC>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009f6:	f000 fae9 	bl	8000fcc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 feeb 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f8d1 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 fa53 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a06:	f000 fa29 	bl	8000e5c <MX_DMA_Init>
  MX_DAC1_Init();
 8000a0a:	f000 f945 	bl	8000c98 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000a0e:	f000 f9a3 	bl	8000d58 <MX_TIM6_Init>
  MX_SDMMC1_SD_Init();
 8000a12:	f000 f97d 	bl	8000d10 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a16:	f00c fb7d 	bl	800d114 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000a1a:	f000 f9d3 	bl	8000dc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (f_mount(&SDFatFS, "0:", 1) != FR_OK) {
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4952      	ldr	r1, [pc, #328]	@ (8000b6c <main+0x17c>)
 8000a22:	4853      	ldr	r0, [pc, #332]	@ (8000b70 <main+0x180>)
 8000a24:	f00e fe1c 	bl	800f660 <f_mount>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <main+0x46>
		printf("mount failed.\n");
 8000a2e:	4851      	ldr	r0, [pc, #324]	@ (8000b74 <main+0x184>)
 8000a30:	f00f fdaa 	bl	8010588 <puts>
 8000a34:	e002      	b.n	8000a3c <main+0x4c>
	} else {
		printf("mount OK.\n");
 8000a36:	4850      	ldr	r0, [pc, #320]	@ (8000b78 <main+0x188>)
 8000a38:	f00f fda6 	bl	8010588 <puts>
	}
	HAL_Delay(200);
 8000a3c:	20c8      	movs	r0, #200	@ 0xc8
 8000a3e:	f000 ff5b 	bl	80018f8 <HAL_Delay>

	int infoRes = LoadSDFileInfo();
 8000a42:	f7ff fe45 	bl	80006d0 <LoadSDFileInfo>
 8000a46:	6078      	str	r0, [r7, #4]
	if (infoRes) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <main+0x70>
		if (infoRes == 2) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d103      	bne.n	8000a5c <main+0x6c>
			printf("too many points or too high fps");
 8000a54:	4849      	ldr	r0, [pc, #292]	@ (8000b7c <main+0x18c>)
 8000a56:	f00f fd2f 	bl	80104b8 <iprintf>
		}
		while (1) {
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <main+0x6c>
			; // Read info error.
		}
	}

	frame_idx = 0;
 8000a60:	4b47      	ldr	r3, [pc, #284]	@ (8000b80 <main+0x190>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
	play_idx = 0;
 8000a66:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <main+0x194>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
	cur_play = 0;
 8000a6c:	4b46      	ldr	r3, [pc, #280]	@ (8000b88 <main+0x198>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]

	LoadSDFileFrame(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fee4 	bl	8000840 <LoadSDFileFrame>

	if (frame_total == 1) {
 8000a78:	4b44      	ldr	r3, [pc, #272]	@ (8000b8c <main+0x19c>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d13b      	bne.n	8000af8 <main+0x108>
		cur_play ^= 1;
 8000a80:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <main+0x198>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f083 0301 	eor.w	r3, r3, #1
 8000a88:	4a3f      	ldr	r2, [pc, #252]	@ (8000b88 <main+0x198>)
 8000a8a:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Stop(&htim6);
 8000a8c:	4840      	ldr	r0, [pc, #256]	@ (8000b90 <main+0x1a0>)
 8000a8e:	f009 fe67 	bl	800a760 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000a92:	2100      	movs	r1, #0
 8000a94:	483f      	ldr	r0, [pc, #252]	@ (8000b94 <main+0x1a4>)
 8000a96:	f001 f9c9 	bl	8001e2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	483d      	ldr	r0, [pc, #244]	@ (8000b94 <main+0x1a4>)
 8000a9e:	f001 f9c5 	bl	8001e2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) signalXY[cur_play],				 				 frame_size, DAC_ALIGN_12B_R);
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <main+0x198>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8000b98 <main+0x1a8>)
 8000aa8:	fb02 f303 	mul.w	r3, r2, r3
 8000aac:	4a3b      	ldr	r2, [pc, #236]	@ (8000b9c <main+0x1ac>)
 8000aae:	441a      	add	r2, r3
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba0 <main+0x1b0>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	460b      	mov	r3, r1
 8000abc:	2100      	movs	r1, #0
 8000abe:	4835      	ldr	r0, [pc, #212]	@ (8000b94 <main+0x1a4>)
 8000ac0:	f001 f8f4 	bl	8001cac <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *) (signalXY[cur_play] + frame_size), frame_size, DAC_ALIGN_12B_R);
 8000ac4:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <main+0x198>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	@ (8000b98 <main+0x1a8>)
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	4a33      	ldr	r2, [pc, #204]	@ (8000b9c <main+0x1ac>)
 8000ad0:	441a      	add	r2, r3
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <main+0x1b0>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	441a      	add	r2, r3
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <main+0x1b0>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	482a      	ldr	r0, [pc, #168]	@ (8000b94 <main+0x1a4>)
 8000aea:	f001 f8df 	bl	8001cac <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim6);
 8000aee:	4828      	ldr	r0, [pc, #160]	@ (8000b90 <main+0x1a0>)
 8000af0:	f009 fdc6 	bl	800a680 <HAL_TIM_Base_Start>

		while (1) {
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <main+0x104>
			;
		}
	}

	HAL_TIM_Base_Stop(&htim6);
 8000af8:	4825      	ldr	r0, [pc, #148]	@ (8000b90 <main+0x1a0>)
 8000afa:	f009 fe31 	bl	800a760 <HAL_TIM_Base_Stop>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000afe:	2100      	movs	r1, #0
 8000b00:	4824      	ldr	r0, [pc, #144]	@ (8000b94 <main+0x1a4>)
 8000b02:	f001 f993 	bl	8001e2c <HAL_DAC_Stop_DMA>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 8000b06:	2110      	movs	r1, #16
 8000b08:	4822      	ldr	r0, [pc, #136]	@ (8000b94 <main+0x1a4>)
 8000b0a:	f001 f98f 	bl	8001e2c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) signalXY[cur_play],				 				 frame_size, DAC_ALIGN_12B_R);
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <main+0x198>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <main+0x1a8>)
 8000b14:	fb02 f303 	mul.w	r3, r2, r3
 8000b18:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <main+0x1ac>)
 8000b1a:	441a      	add	r2, r3
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <main+0x1b0>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	460b      	mov	r3, r1
 8000b28:	2100      	movs	r1, #0
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <main+0x1a4>)
 8000b2c:	f001 f8be 	bl	8001cac <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *) (signalXY[cur_play] + frame_size), frame_size, DAC_ALIGN_12B_R);
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <main+0x198>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a18      	ldr	r2, [pc, #96]	@ (8000b98 <main+0x1a8>)
 8000b36:	fb02 f303 	mul.w	r3, r2, r3
 8000b3a:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <main+0x1ac>)
 8000b3c:	441a      	add	r2, r3
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <main+0x1b0>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	441a      	add	r2, r3
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <main+0x1b0>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	460b      	mov	r3, r1
 8000b52:	2110      	movs	r1, #16
 8000b54:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <main+0x1a4>)
 8000b56:	f001 f8a9 	bl	8001cac <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <main+0x1a0>)
 8000b5c:	f009 fd90 	bl	800a680 <HAL_TIM_Base_Start>
	LoadSDFileFrame(0);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fe6d 	bl	8000840 <LoadSDFileFrame>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b66:	bf00      	nop
 8000b68:	e7fd      	b.n	8000b66 <main+0x176>
 8000b6a:	bf00      	nop
 8000b6c:	080112d4 	.word	0x080112d4
 8000b70:	24075618 	.word	0x24075618
 8000b74:	080112d8 	.word	0x080112d8
 8000b78:	080112e8 	.word	0x080112e8
 8000b7c:	080112f4 	.word	0x080112f4
 8000b80:	240755fc 	.word	0x240755fc
 8000b84:	24075600 	.word	0x24075600
 8000b88:	240002f8 	.word	0x240002f8
 8000b8c:	240002e8 	.word	0x240002e8
 8000b90:	24000208 	.word	0x24000208
 8000b94:	24000088 	.word	0x24000088
 8000b98:	0003a980 	.word	0x0003a980
 8000b9c:	240002fc 	.word	0x240002fc
 8000ba0:	240002f0 	.word	0x240002f0

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09c      	sub	sp, #112	@ 0x70
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	224c      	movs	r2, #76	@ 0x4c
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00f fdc8 	bl	8010748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2220      	movs	r2, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00f fdc2 	bl	8010748 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f004 fb81 	bl	80052cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <SystemClock_Config+0xec>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <SystemClock_Config+0xec>)
 8000bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <SystemClock_Config+0xec>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <SystemClock_Config+0xf0>)
 8000be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c94 <SystemClock_Config+0xf0>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <SystemClock_Config+0xf0>)
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bfc:	bf00      	nop
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <SystemClock_Config+0xec>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c0a:	d1f8      	bne.n	8000bfe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c22:	2378      	movs	r3, #120	@ 0x78
 8000c24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fb7c 	bl	8005340 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4e:	f000 f9e9 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	233f      	movs	r3, #63	@ 0x3f
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c66:	2340      	movs	r3, #64	@ 0x40
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c70:	2340      	movs	r3, #64	@ 0x40
 8000c72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2104      	movs	r1, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 ffbb 	bl	8005bf4 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c84:	f000 f9ce 	bl	8001024 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3770      	adds	r7, #112	@ 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024800 	.word	0x58024800
 8000c94:	58000400 	.word	0x58000400

08000c98 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2224      	movs	r2, #36	@ 0x24
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00f fd4f 	bl	8010748 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_DAC1_Init+0x70>)
 8000cac:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <MX_DAC1_Init+0x74>)
 8000cae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cb0:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <MX_DAC1_Init+0x70>)
 8000cb2:	f000 ffd9 	bl	8001c68 <HAL_DAC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cbc:	f000 f9b2 	bl	8001024 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000cc4:	2316      	movs	r3, #22
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <MX_DAC1_Init+0x70>)
 8000cdc:	f001 f912 	bl	8001f04 <HAL_DAC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f000 f99d 	bl	8001024 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2210      	movs	r2, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_DAC1_Init+0x70>)
 8000cf2:	f001 f907 	bl	8001f04 <HAL_DAC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000cfc:	f000 f992 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24000088 	.word	0x24000088
 8000d0c:	40007400 	.word	0x40007400

08000d10 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d16:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <MX_SDMMC1_SD_Init+0x44>)
 8000d18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d2c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 3;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_SDMMC1_SD_Init+0x40>)
 8000d3c:	f007 ffe4 	bl	8008d08 <HAL_SD_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000d46:	f000 f96d 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400018c 	.word	0x2400018c
 8000d54:	52007000 	.word	0x52007000

08000d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <MX_TIM6_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 71;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d7c:	2247      	movs	r2, #71	@ 0x47
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d88:	f009 fc22 	bl	800a5d0 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d92:	f000 f947 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d96:	2320      	movs	r3, #32
 8000d98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000da4:	f009 fda4 	bl	800a8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000dae:	f000 f939 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000208 	.word	0x24000208
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_USART1_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e0e:	f009 fdfd 	bl	800aa0c <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 f904 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e20:	f00b fae4 	bl	800c3ec <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 f8fb 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e32:	f00b fb19 	bl	800c468 <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 f8f2 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e42:	f00b fa9a 	bl	800c37a <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f8ea 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000254 	.word	0x24000254
 8000e58:	40011000 	.word	0x40011000

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	200b      	movs	r0, #11
 8000e86:	f000 fe42 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f000 fe59 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2102      	movs	r1, #2
 8000e94:	200c      	movs	r0, #12
 8000e96:	f000 fe3a 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f000 fe51 	bl	8001b42 <HAL_NVIC_EnableIRQ>

}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58024400 	.word	0x58024400

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee0:	4b37      	ldr	r3, [pc, #220]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	4a36      	ldr	r2, [pc, #216]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	4a18      	ldr	r2, [pc, #96]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_GPIO_Init+0x114>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0x118>)
 8000f7c:	f004 f98c 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f80:	2340      	movs	r3, #64	@ 0x40
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <MX_GPIO_Init+0x118>)
 8000f98:	f003 ffb6 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_GPIO_Init+0x11c>)
 8000fb2:	f003 ffa9 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	@ 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020400 	.word	0x58020400

08000fcc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fde:	f000 fdcb 	bl	8001b78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fee:	231f      	movs	r3, #31
 8000ff0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ff2:	2387      	movs	r3, #135	@ 0x87
 8000ff4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001002:	2301      	movs	r3, #1
 8001004:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fde9 	bl	8001be8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001016:	2004      	movs	r0, #4
 8001018:	f000 fdc6 	bl	8001ba8 <HAL_MPU_Enable>

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_MspInit+0x30>)
 8001038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800103c:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x30>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	58024400 	.word	0x58024400

08001064 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a48      	ldr	r2, [pc, #288]	@ (80011a4 <HAL_DAC_MspInit+0x140>)
 8001082:	4293      	cmp	r3, r2
 8001084:	f040 808a 	bne.w	800119c <HAL_DAC_MspInit+0x138>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 800108a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800108e:	4a46      	ldr	r2, [pc, #280]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 8001090:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001094:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001098:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 800109a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	4a3e      	ldr	r2, [pc, #248]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_DAC_MspInit+0x144>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010c4:	2330      	movs	r3, #48	@ 0x30
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	2303      	movs	r3, #3
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4835      	ldr	r0, [pc, #212]	@ (80011ac <HAL_DAC_MspInit+0x148>)
 80010d8:	f003 ff16 	bl	8004f08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010de:	4a35      	ldr	r2, [pc, #212]	@ (80011b4 <HAL_DAC_MspInit+0x150>)
 80010e0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010e2:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010e4:	2243      	movs	r2, #67	@ 0x43
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e8:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010ea:	2240      	movs	r2, #64	@ 0x40
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001102:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 8001106:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 800110e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001112:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001120:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 8001122:	f001 f8b5 	bl	8002290 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 800112c:	f7ff ff7a 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <HAL_DAC_MspInit+0x14c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <HAL_DAC_MspInit+0x158>)
 8001140:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001144:	2244      	movs	r2, #68	@ 0x44
 8001146:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 800114a:	2240      	movs	r2, #64	@ 0x40
 800114c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 800115e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001162:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 800116e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001172:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001182:	f001 f885 	bl	8002290 <HAL_DMA_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 800118c:	f7ff ff4a 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_DAC_MspInit+0x154>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40007400 	.word	0x40007400
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020000 	.word	0x58020000
 80011b0:	2400009c 	.word	0x2400009c
 80011b4:	40020010 	.word	0x40020010
 80011b8:	24000114 	.word	0x24000114
 80011bc:	40020028 	.word	0x40020028

080011c0 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0bc      	sub	sp, #240	@ 0xf0
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	22c0      	movs	r2, #192	@ 0xc0
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00f fab1 	bl	8010748 <memset>
  if(hsd->Instance==SDMMC1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a3c      	ldr	r2, [pc, #240]	@ (80012dc <HAL_SD_MspInit+0x11c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d171      	bne.n	80012d4 <HAL_SD_MspInit+0x114>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f881 	bl	800630c <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001210:	f7ff ff08 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001216:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001220:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001224:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001226:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800122a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a29      	ldr	r2, [pc, #164]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_SD_MspInit+0x120>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800126e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001288:	230c      	movs	r3, #12
 800128a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001292:	4619      	mov	r1, r3
 8001294:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <HAL_SD_MspInit+0x124>)
 8001296:	f003 fe37 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129a:	2304      	movs	r3, #4
 800129c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012b2:	230c      	movs	r3, #12
 80012b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012bc:	4619      	mov	r1, r3
 80012be:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <HAL_SD_MspInit+0x128>)
 80012c0:	f003 fe22 	bl	8004f08 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	2031      	movs	r0, #49	@ 0x31
 80012ca:	f000 fc20 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012ce:	2031      	movs	r0, #49	@ 0x31
 80012d0:	f000 fc37 	bl	8001b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	37f0      	adds	r7, #240	@ 0xf0
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	52007000 	.word	0x52007000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020800 	.word	0x58020800
 80012e8:	58020c00 	.word	0x58020c00

080012ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10e      	bne.n	800131c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_TIM_Base_MspInit+0x40>)
 8001300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001304:	4a09      	ldr	r2, [pc, #36]	@ (800132c <HAL_TIM_Base_MspInit+0x40>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <HAL_TIM_Base_MspInit+0x40>)
 8001310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40001000 	.word	0x40001000
 800132c:	58024400 	.word	0x58024400

08001330 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0ba      	sub	sp, #232	@ 0xe8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	22c0      	movs	r2, #192	@ 0xc0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00f f9f9 	bl	8010748 <memset>
  if(huart->Instance==USART1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2b      	ldr	r2, [pc, #172]	@ (8001408 <HAL_UART_MspInit+0xd8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d14e      	bne.n	80013fe <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001360:	f04f 0201 	mov.w	r2, #1
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f004 ffc8 	bl	800630c <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001382:	f7ff fe4f 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_UART_MspInit+0xdc>)
 8001388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800138c:	4a1f      	ldr	r2, [pc, #124]	@ (800140c <HAL_UART_MspInit+0xdc>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_UART_MspInit+0xdc>)
 8001398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_UART_MspInit+0xdc>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	4a18      	ldr	r2, [pc, #96]	@ (800140c <HAL_UART_MspInit+0xdc>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_UART_MspInit+0xdc>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013dc:	2307      	movs	r3, #7
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4809      	ldr	r0, [pc, #36]	@ (8001410 <HAL_UART_MspInit+0xe0>)
 80013ea:	f003 fd8d 	bl	8004f08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2102      	movs	r1, #2
 80013f2:	2025      	movs	r0, #37	@ 0x25
 80013f4:	f000 fb8b 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f8:	2025      	movs	r0, #37	@ 0x25
 80013fa:	f000 fba2 	bl	8001b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	37e8      	adds	r7, #232	@ 0xe8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40011000 	.word	0x40011000
 800140c:	58024400 	.word	0x58024400
 8001410:	58020000 	.word	0x58020000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 fa25 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <DMA1_Stream0_IRQHandler+0x10>)
 800147a:	f002 fa33 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2400009c 	.word	0x2400009c

08001488 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <DMA1_Stream1_IRQHandler+0x10>)
 800148e:	f002 fa29 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	24000114 	.word	0x24000114

0800149c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <USART1_IRQHandler+0x10>)
 80014a2:	f009 fb91 	bl	800abc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000254 	.word	0x24000254

080014b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <SDMMC1_IRQHandler+0x10>)
 80014b6:	f007 fe97 	bl	80091e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2400018c 	.word	0x2400018c

080014c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
  }

  return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e009      	b.n	8001524 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f8c7 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf1      	blt.n	8001510 <_write+0x12>
  }
  return len;
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_close>:

int _close(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155e:	605a      	str	r2, [r3, #4]
  return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_isatty>:

int _isatty(int file)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f00f f908 	bl	80107e4 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24080000 	.word	0x24080000
 8001600:	00001400 	.word	0x00001400
 8001604:	24075608 	.word	0x24075608
 8001608:	24075e08 	.word	0x24075e08

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001610:	4b43      	ldr	r3, [pc, #268]	@ (8001720 <SystemInit+0x114>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001616:	4a42      	ldr	r2, [pc, #264]	@ (8001720 <SystemInit+0x114>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001620:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <SystemInit+0x118>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	2b06      	cmp	r3, #6
 800162a:	d807      	bhi.n	800163c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800162c:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <SystemInit+0x118>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 030f 	bic.w	r3, r3, #15
 8001634:	4a3b      	ldr	r2, [pc, #236]	@ (8001724 <SystemInit+0x118>)
 8001636:	f043 0307 	orr.w	r3, r3, #7
 800163a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <SystemInit+0x11c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a39      	ldr	r2, [pc, #228]	@ (8001728 <SystemInit+0x11c>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <SystemInit+0x11c>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <SystemInit+0x11c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4935      	ldr	r1, [pc, #212]	@ (8001728 <SystemInit+0x11c>)
 8001654:	4b35      	ldr	r3, [pc, #212]	@ (800172c <SystemInit+0x120>)
 8001656:	4013      	ands	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800165a:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <SystemInit+0x118>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <SystemInit+0x118>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 030f 	bic.w	r3, r3, #15
 800166e:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <SystemInit+0x118>)
 8001670:	f043 0307 	orr.w	r3, r3, #7
 8001674:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <SystemInit+0x11c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800167c:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <SystemInit+0x11c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <SystemInit+0x11c>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <SystemInit+0x11c>)
 800168a:	4a29      	ldr	r2, [pc, #164]	@ (8001730 <SystemInit+0x124>)
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <SystemInit+0x11c>)
 8001690:	4a28      	ldr	r2, [pc, #160]	@ (8001734 <SystemInit+0x128>)
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <SystemInit+0x11c>)
 8001696:	4a28      	ldr	r2, [pc, #160]	@ (8001738 <SystemInit+0x12c>)
 8001698:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <SystemInit+0x11c>)
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <SystemInit+0x11c>)
 80016a2:	4a25      	ldr	r2, [pc, #148]	@ (8001738 <SystemInit+0x12c>)
 80016a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <SystemInit+0x11c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <SystemInit+0x11c>)
 80016ae:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <SystemInit+0x12c>)
 80016b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <SystemInit+0x11c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <SystemInit+0x11c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <SystemInit+0x11c>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <SystemInit+0x11c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <SystemInit+0x130>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <SystemInit+0x134>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016d6:	d202      	bcs.n	80016de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <SystemInit+0x138>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <SystemInit+0x11c>)
 80016e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d113      	bne.n	8001714 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <SystemInit+0x11c>)
 80016ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <SystemInit+0x11c>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <SystemInit+0x13c>)
 80016fe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001702:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <SystemInit+0x11c>)
 8001706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800170a:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <SystemInit+0x11c>)
 800170c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	52002000 	.word	0x52002000
 8001728:	58024400 	.word	0x58024400
 800172c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001730:	02020200 	.word	0x02020200
 8001734:	01ff0000 	.word	0x01ff0000
 8001738:	01010280 	.word	0x01010280
 800173c:	5c001000 	.word	0x5c001000
 8001740:	ffff0000 	.word	0xffff0000
 8001744:	51008108 	.word	0x51008108
 8001748:	52004000 	.word	0x52004000

0800174c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <ExitRun0Mode+0x2c>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <ExitRun0Mode+0x2c>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800175c:	bf00      	nop
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <ExitRun0Mode+0x2c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f9      	beq.n	800175e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	58024800 	.word	0x58024800

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017b8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001780:	f7ff ffe4 	bl	800174c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff ff42 	bl	800160c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f00f f81f 	bl	80107f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff f91d 	bl	80009f0 <main>
  bx  lr
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80017c4:	08011834 	.word	0x08011834
  ldr r2, =_sbss
 80017c8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80017cc:	24075e04 	.word	0x24075e04

080017d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC3_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017da:	2003      	movs	r0, #3
 80017dc:	f000 f98c 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e0:	f004 fbbe 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4913      	ldr	r1, [pc, #76]	@ (8001840 <HAL_Init+0x6c>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_Init+0x6c>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_Init+0x70>)
 8001816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_Init+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f814 	bl	800184c <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e002      	b.n	8001834 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182e:	f7ff fbff 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400
 8001840:	0801135c 	.word	0x0801135c
 8001844:	24000004 	.word	0x24000004
 8001848:	24000000 	.word	0x24000000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e021      	b.n	80018a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_InitTick+0x64>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_InitTick+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f971 	bl	8001b5e <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f93b 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x68>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2400000c 	.word	0x2400000c
 80018b0:	24000000 	.word	0x24000000
 80018b4:	24000008 	.word	0x24000008

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2400000c 	.word	0x2400000c
 80018dc:	2407560c 	.word	0x2407560c

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2407560c 	.word	0x2407560c

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2400000c 	.word	0x2400000c

08001940 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_GetREVID+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0c1b      	lsrs	r3, r3, #16
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	5c001000 	.word	0x5c001000

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <__NVIC_SetPriorityGrouping+0x40>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	4313      	orrs	r3, r2
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x40>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	05fa0000 	.word	0x05fa0000

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff40 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff90 	bl	8001a4c <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5f 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff33 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa4 	bl	8001ab4 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b7c:	f3bf 8f5f 	dmb	sy
}
 8001b80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <HAL_MPU_Disable+0x28>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_MPU_Disable+0x28>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_MPU_Disable+0x2c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00
 8001ba4:	e000ed90 	.word	0xe000ed90

08001ba8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_MPU_Enable+0x38>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_MPU_Enable+0x3c>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_MPU_Enable+0x3c>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc6:	f3bf 8f4f 	dsb	sy
}
 8001bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bcc:	f3bf 8f6f 	isb	sy
}
 8001bd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed90 	.word	0xe000ed90
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	785a      	ldrb	r2, [r3, #1]
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_MPU_ConfigRegion+0x7c>)
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_MPU_ConfigRegion+0x7c>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_MPU_ConfigRegion+0x7c>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c04:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <HAL_MPU_ConfigRegion+0x7c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
 8001c10:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7adb      	ldrb	r3, [r3, #11]
 8001c16:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7a9b      	ldrb	r3, [r3, #10]
 8001c1e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7b5b      	ldrb	r3, [r3, #13]
 8001c26:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7b9b      	ldrb	r3, [r3, #14]
 8001c2e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7bdb      	ldrb	r3, [r3, #15]
 8001c36:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7a5b      	ldrb	r3, [r3, #9]
 8001c3e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7a1b      	ldrb	r3, [r3, #8]
 8001c46:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c48:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c52:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c54:	6113      	str	r3, [r2, #16]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed90 	.word	0xe000ed90

08001c68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e014      	b.n	8001ca4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff f9ea 	bl	8001064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0a2      	b.n	8001e0a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_DAC_Start_DMA+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e09c      	b.n	8001e0a <HAL_DAC_Start_DMA+0x15e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d129      	bne.n	8001d36 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8001e14 <HAL_DAC_Start_DMA+0x168>)
 8001ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a4a      	ldr	r2, [pc, #296]	@ (8001e18 <HAL_DAC_Start_DMA+0x16c>)
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4a49      	ldr	r2, [pc, #292]	@ (8001e1c <HAL_DAC_Start_DMA+0x170>)
 8001cf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_DAC_Start_DMA+0x6c>
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d005      	beq.n	8001d22 <HAL_DAC_Start_DMA+0x76>
 8001d16:	e009      	b.n	8001d2c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	613b      	str	r3, [r7, #16]
        break;
 8001d20:	e033      	b.n	8001d8a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	330c      	adds	r3, #12
 8001d28:	613b      	str	r3, [r7, #16]
        break;
 8001d2a:	e02e      	b.n	8001d8a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3310      	adds	r3, #16
 8001d32:	613b      	str	r3, [r7, #16]
        break;
 8001d34:	e029      	b.n	8001d8a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a39      	ldr	r2, [pc, #228]	@ (8001e20 <HAL_DAC_Start_DMA+0x174>)
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a38      	ldr	r2, [pc, #224]	@ (8001e24 <HAL_DAC_Start_DMA+0x178>)
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	@ (8001e28 <HAL_DAC_Start_DMA+0x17c>)
 8001d4c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_DAC_Start_DMA+0xc0>
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d005      	beq.n	8001d76 <HAL_DAC_Start_DMA+0xca>
 8001d6a:	e009      	b.n	8001d80 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3314      	adds	r3, #20
 8001d72:	613b      	str	r3, [r7, #16]
        break;
 8001d74:	e009      	b.n	8001d8a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	613b      	str	r3, [r7, #16]
        break;
 8001d7e:	e004      	b.n	8001d8a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	331c      	adds	r3, #28
 8001d86:	613b      	str	r3, [r7, #16]
        break;
 8001d88:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	f000 fdcd 	bl	8002948 <HAL_DMA_Start_IT>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
 8001db2:	e010      	b.n	8001dd6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68d8      	ldr	r0, [r3, #12]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	f000 fdbb 	bl	8002948 <HAL_DMA_Start_IT>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2201      	movs	r2, #1
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e005      	b.n	8001e08 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f043 0204 	orr.w	r2, r3, #4
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08002191 	.word	0x08002191
 8001e18:	080021b3 	.word	0x080021b3
 8001e1c:	080021cf 	.word	0x080021cf
 8001e20:	08002225 	.word	0x08002225
 8001e24:	08002247 	.word	0x08002247
 8001e28:	08002263 	.word	0x08002263

08001e2c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e03e      	b.n	8001ebe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43da      	mvns	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ffc9 	bl	8002e1c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e00c      	b.n	8001eb6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 ffbb 	bl	8002e1c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001eb4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_DAC_ConfigChannel+0x1e>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e12d      	b.n	8002182 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	795b      	ldrb	r3, [r3, #5]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_DAC_ConfigChannel+0x34>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e124      	b.n	8002182 <HAL_DAC_ConfigChannel+0x27e>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2202      	movs	r2, #2
 8001f42:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d17a      	bne.n	8002042 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fcc8 	bl	80018e0 <HAL_GetTick>
 8001f50:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d13d      	bne.n	8001fd4 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f58:	e018      	b.n	8001f8c <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f5a:	f7ff fcc1 	bl	80018e0 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d911      	bls.n	8001f8c <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f6e:	4b87      	ldr	r3, [pc, #540]	@ (800218c <HAL_DAC_ConfigChannel+0x288>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f043 0208 	orr.w	r2, r3, #8
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2203      	movs	r2, #3
 8001f86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0fa      	b.n	8002182 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f92:	4b7e      	ldr	r3, [pc, #504]	@ (800218c <HAL_DAC_ConfigChannel+0x288>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1df      	bne.n	8001f5a <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	6992      	ldr	r2, [r2, #24]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fa4:	e020      	b.n	8001fe8 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fa6:	f7ff fc9b 	bl	80018e0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d90f      	bls.n	8001fd4 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da0a      	bge.n	8001fd4 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f043 0208 	orr.w	r2, r3, #8
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0d6      	b.n	8002182 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dbe3      	blt.n	8001fa6 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	6992      	ldr	r2, [r2, #24]
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	ea02 0103 	and.w	r1, r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	21ff      	movs	r1, #255	@ 0xff
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	ea02 0103 	and.w	r1, r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6a1a      	ldr	r2, [r3, #32]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11d      	bne.n	8002086 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	221f      	movs	r2, #31
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2207      	movs	r2, #7
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ae:	e00f      	b.n	80020d0 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d102      	bne.n	80020be <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80020b8:	2301      	movs	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80020bc:	e008      	b.n	80020d0 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80020c6:	2301      	movs	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ca:	e001      	b.n	80020d0 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4313      	orrs	r3, r2
 80020da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	22c0      	movs	r2, #192	@ 0xc0
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43da      	mvns	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800217e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002182:	4618      	mov	r0, r3
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20008000 	.word	0x20008000

08002190 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff fe91 	bl	8001ec6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	711a      	strb	r2, [r3, #4]
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fe8a 	bl	8001eda <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fe80 	bl	8001eee <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	711a      	strb	r2, [r3, #4]
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002230:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe fbd2 	bl	80009dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	711a      	strb	r2, [r3, #4]
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002252:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff ffd1 	bl	80021fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff ffc7 	bl	8002210 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	711a      	strb	r2, [r3, #4]
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff fb22 	bl	80018e0 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e316      	b.n	80028d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a66      	ldr	r2, [pc, #408]	@ (8002448 <HAL_DMA_Init+0x1b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a65      	ldr	r2, [pc, #404]	@ (800244c <HAL_DMA_Init+0x1bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a63      	ldr	r2, [pc, #396]	@ (8002450 <HAL_DMA_Init+0x1c0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a62      	ldr	r2, [pc, #392]	@ (8002454 <HAL_DMA_Init+0x1c4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a60      	ldr	r2, [pc, #384]	@ (8002458 <HAL_DMA_Init+0x1c8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5f      	ldr	r2, [pc, #380]	@ (800245c <HAL_DMA_Init+0x1cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002460 <HAL_DMA_Init+0x1d0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_DMA_Init+0x1d4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002468 <HAL_DMA_Init+0x1d8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a59      	ldr	r2, [pc, #356]	@ (800246c <HAL_DMA_Init+0x1dc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a57      	ldr	r2, [pc, #348]	@ (8002470 <HAL_DMA_Init+0x1e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a56      	ldr	r2, [pc, #344]	@ (8002474 <HAL_DMA_Init+0x1e4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a54      	ldr	r2, [pc, #336]	@ (8002478 <HAL_DMA_Init+0x1e8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a53      	ldr	r2, [pc, #332]	@ (800247c <HAL_DMA_Init+0x1ec>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a51      	ldr	r2, [pc, #324]	@ (8002480 <HAL_DMA_Init+0x1f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Init+0xb8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a50      	ldr	r2, [pc, #320]	@ (8002484 <HAL_DMA_Init+0x1f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0xbc>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_DMA_Init+0xbe>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 813b 	beq.w	80025ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a37      	ldr	r2, [pc, #220]	@ (8002448 <HAL_DMA_Init+0x1b8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d04a      	beq.n	8002404 <HAL_DMA_Init+0x174>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a36      	ldr	r2, [pc, #216]	@ (800244c <HAL_DMA_Init+0x1bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d045      	beq.n	8002404 <HAL_DMA_Init+0x174>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a34      	ldr	r2, [pc, #208]	@ (8002450 <HAL_DMA_Init+0x1c0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d040      	beq.n	8002404 <HAL_DMA_Init+0x174>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a33      	ldr	r2, [pc, #204]	@ (8002454 <HAL_DMA_Init+0x1c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d03b      	beq.n	8002404 <HAL_DMA_Init+0x174>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a31      	ldr	r2, [pc, #196]	@ (8002458 <HAL_DMA_Init+0x1c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d036      	beq.n	8002404 <HAL_DMA_Init+0x174>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a30      	ldr	r2, [pc, #192]	@ (800245c <HAL_DMA_Init+0x1cc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d031      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002460 <HAL_DMA_Init+0x1d0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02c      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <HAL_DMA_Init+0x1d4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d027      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <HAL_DMA_Init+0x1d8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d022      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <HAL_DMA_Init+0x1dc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d01d      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <HAL_DMA_Init+0x1e0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d018      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a27      	ldr	r2, [pc, #156]	@ (8002474 <HAL_DMA_Init+0x1e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	@ (8002478 <HAL_DMA_Init+0x1e8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a24      	ldr	r2, [pc, #144]	@ (800247c <HAL_DMA_Init+0x1ec>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	@ (8002480 <HAL_DMA_Init+0x1f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_DMA_Init+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_DMA_Init+0x1f4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <HAL_DMA_Init+0x186>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_DMA_Init+0x196>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002426:	e02f      	b.n	8002488 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002428:	f7ff fa5a 	bl	80018e0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d928      	bls.n	8002488 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e246      	b.n	80028d6 <HAL_DMA_Init+0x646>
 8002448:	40020010 	.word	0x40020010
 800244c:	40020028 	.word	0x40020028
 8002450:	40020040 	.word	0x40020040
 8002454:	40020058 	.word	0x40020058
 8002458:	40020070 	.word	0x40020070
 800245c:	40020088 	.word	0x40020088
 8002460:	400200a0 	.word	0x400200a0
 8002464:	400200b8 	.word	0x400200b8
 8002468:	40020410 	.word	0x40020410
 800246c:	40020428 	.word	0x40020428
 8002470:	40020440 	.word	0x40020440
 8002474:	40020458 	.word	0x40020458
 8002478:	40020470 	.word	0x40020470
 800247c:	40020488 	.word	0x40020488
 8002480:	400204a0 	.word	0x400204a0
 8002484:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1c8      	bne.n	8002428 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4b83      	ldr	r3, [pc, #524]	@ (80026b0 <HAL_DMA_Init+0x420>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	4313      	orrs	r3, r2
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024ec:	4b71      	ldr	r3, [pc, #452]	@ (80026b4 <HAL_DMA_Init+0x424>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b71      	ldr	r3, [pc, #452]	@ (80026b8 <HAL_DMA_Init+0x428>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f8:	d328      	bcc.n	800254c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b28      	cmp	r3, #40	@ 0x28
 8002500:	d903      	bls.n	800250a <HAL_DMA_Init+0x27a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b2e      	cmp	r3, #46	@ 0x2e
 8002508:	d917      	bls.n	800253a <HAL_DMA_Init+0x2aa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002510:	d903      	bls.n	800251a <HAL_DMA_Init+0x28a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b42      	cmp	r3, #66	@ 0x42
 8002518:	d90f      	bls.n	800253a <HAL_DMA_Init+0x2aa>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b46      	cmp	r3, #70	@ 0x46
 8002520:	d903      	bls.n	800252a <HAL_DMA_Init+0x29a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b48      	cmp	r3, #72	@ 0x48
 8002528:	d907      	bls.n	800253a <HAL_DMA_Init+0x2aa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002530:	d905      	bls.n	800253e <HAL_DMA_Init+0x2ae>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b52      	cmp	r3, #82	@ 0x52
 8002538:	d801      	bhi.n	800253e <HAL_DMA_Init+0x2ae>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_DMA_Init+0x2b0>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800254a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	2b04      	cmp	r3, #4
 8002574:	d117      	bne.n	80025a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f002 fb33 	bl	8004bf4 <DMA_CheckFifoParam>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e197      	b.n	80028d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f002 fa6e 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	223f      	movs	r2, #63	@ 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e0cd      	b.n	8002766 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <HAL_DMA_Init+0x42c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_Init+0x38a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a39      	ldr	r2, [pc, #228]	@ (80026c0 <HAL_DMA_Init+0x430>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_Init+0x38a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a38      	ldr	r2, [pc, #224]	@ (80026c4 <HAL_DMA_Init+0x434>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <HAL_DMA_Init+0x38a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a36      	ldr	r2, [pc, #216]	@ (80026c8 <HAL_DMA_Init+0x438>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_DMA_Init+0x38a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a35      	ldr	r2, [pc, #212]	@ (80026cc <HAL_DMA_Init+0x43c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_DMA_Init+0x38a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <HAL_DMA_Init+0x440>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_DMA_Init+0x38a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a32      	ldr	r2, [pc, #200]	@ (80026d4 <HAL_DMA_Init+0x444>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Init+0x38a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a30      	ldr	r2, [pc, #192]	@ (80026d8 <HAL_DMA_Init+0x448>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_DMA_Init+0x38e>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_DMA_Init+0x390>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8097 	beq.w	8002754 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a24      	ldr	r2, [pc, #144]	@ (80026bc <HAL_DMA_Init+0x42c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d021      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_DMA_Init+0x430>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01c      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	@ (80026c4 <HAL_DMA_Init+0x434>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d017      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <HAL_DMA_Init+0x438>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d012      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_DMA_Init+0x43c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <HAL_DMA_Init+0x440>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d008      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <HAL_DMA_Init+0x444>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_DMA_Init+0x3e4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_DMA_Init+0x448>)
 8002672:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_DMA_Init+0x44c>)
 8002690:	4013      	ands	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b40      	cmp	r3, #64	@ 0x40
 800269a:	d021      	beq.n	80026e0 <HAL_DMA_Init+0x450>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b80      	cmp	r3, #128	@ 0x80
 80026a2:	d102      	bne.n	80026aa <HAL_DMA_Init+0x41a>
 80026a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a8:	e01b      	b.n	80026e2 <HAL_DMA_Init+0x452>
 80026aa:	2300      	movs	r3, #0
 80026ac:	e019      	b.n	80026e2 <HAL_DMA_Init+0x452>
 80026ae:	bf00      	nop
 80026b0:	fe10803f 	.word	0xfe10803f
 80026b4:	5c001000 	.word	0x5c001000
 80026b8:	ffff0000 	.word	0xffff0000
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025444 	.word	0x58025444
 80026cc:	58025458 	.word	0x58025458
 80026d0:	5802546c 	.word	0x5802546c
 80026d4:	58025480 	.word	0x58025480
 80026d8:	58025494 	.word	0x58025494
 80026dc:	fffe000f 	.word	0xfffe000f
 80026e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002710:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b6e      	ldr	r3, [pc, #440]	@ (80028e0 <HAL_DMA_Init+0x650>)
 8002728:	4413      	add	r3, r2
 800272a:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <HAL_DMA_Init+0x654>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f002 f9a9 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 800273e:	4603      	mov	r3, r0
 8002740:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	e008      	b.n	8002766 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0b7      	b.n	80028d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5f      	ldr	r2, [pc, #380]	@ (80028e8 <HAL_DMA_Init+0x658>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d072      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5d      	ldr	r2, [pc, #372]	@ (80028ec <HAL_DMA_Init+0x65c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d06d      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5c      	ldr	r2, [pc, #368]	@ (80028f0 <HAL_DMA_Init+0x660>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d068      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5a      	ldr	r2, [pc, #360]	@ (80028f4 <HAL_DMA_Init+0x664>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d063      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a59      	ldr	r2, [pc, #356]	@ (80028f8 <HAL_DMA_Init+0x668>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a57      	ldr	r2, [pc, #348]	@ (80028fc <HAL_DMA_Init+0x66c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d059      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a56      	ldr	r2, [pc, #344]	@ (8002900 <HAL_DMA_Init+0x670>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d054      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a54      	ldr	r2, [pc, #336]	@ (8002904 <HAL_DMA_Init+0x674>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d04f      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a53      	ldr	r2, [pc, #332]	@ (8002908 <HAL_DMA_Init+0x678>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04a      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a51      	ldr	r2, [pc, #324]	@ (800290c <HAL_DMA_Init+0x67c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d045      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a50      	ldr	r2, [pc, #320]	@ (8002910 <HAL_DMA_Init+0x680>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d040      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002914 <HAL_DMA_Init+0x684>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d03b      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002918 <HAL_DMA_Init+0x688>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d036      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4b      	ldr	r2, [pc, #300]	@ (800291c <HAL_DMA_Init+0x68c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002920 <HAL_DMA_Init+0x690>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02c      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a48      	ldr	r2, [pc, #288]	@ (8002924 <HAL_DMA_Init+0x694>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_DMA_Init+0x698>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a45      	ldr	r2, [pc, #276]	@ (800292c <HAL_DMA_Init+0x69c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a44      	ldr	r2, [pc, #272]	@ (8002930 <HAL_DMA_Init+0x6a0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d018      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a42      	ldr	r2, [pc, #264]	@ (8002934 <HAL_DMA_Init+0x6a4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a41      	ldr	r2, [pc, #260]	@ (8002938 <HAL_DMA_Init+0x6a8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3f      	ldr	r2, [pc, #252]	@ (800293c <HAL_DMA_Init+0x6ac>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3e      	ldr	r2, [pc, #248]	@ (8002940 <HAL_DMA_Init+0x6b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3c      	ldr	r2, [pc, #240]	@ (8002944 <HAL_DMA_Init+0x6b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_DMA_Init+0x5ca>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_DMA_Init+0x5cc>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d032      	beq.n	80028c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f002 fa43 	bl	8004cec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b80      	cmp	r3, #128	@ 0x80
 800286c:	d102      	bne.n	8002874 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002888:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d010      	beq.n	80028b4 <HAL_DMA_Init+0x624>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d80c      	bhi.n	80028b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f002 fac0 	bl	8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e008      	b.n	80028c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	a7fdabf8 	.word	0xa7fdabf8
 80028e4:	cccccccd 	.word	0xcccccccd
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494

08002948 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e226      	b.n	8002db2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_DMA_Start_IT+0x2a>
 800296e:	2302      	movs	r3, #2
 8002970:	e21f      	b.n	8002db2 <HAL_DMA_Start_IT+0x46a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	f040 820a 	bne.w	8002d9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a68      	ldr	r2, [pc, #416]	@ (8002b3c <HAL_DMA_Start_IT+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a66      	ldr	r2, [pc, #408]	@ (8002b40 <HAL_DMA_Start_IT+0x1f8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_DMA_Start_IT+0x1fc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a63      	ldr	r2, [pc, #396]	@ (8002b48 <HAL_DMA_Start_IT+0x200>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a62      	ldr	r2, [pc, #392]	@ (8002b4c <HAL_DMA_Start_IT+0x204>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a60      	ldr	r2, [pc, #384]	@ (8002b50 <HAL_DMA_Start_IT+0x208>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b54 <HAL_DMA_Start_IT+0x20c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b58 <HAL_DMA_Start_IT+0x210>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5c      	ldr	r2, [pc, #368]	@ (8002b5c <HAL_DMA_Start_IT+0x214>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b60 <HAL_DMA_Start_IT+0x218>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a59      	ldr	r2, [pc, #356]	@ (8002b64 <HAL_DMA_Start_IT+0x21c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a57      	ldr	r2, [pc, #348]	@ (8002b68 <HAL_DMA_Start_IT+0x220>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_DMA_Start_IT+0x224>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	@ (8002b70 <HAL_DMA_Start_IT+0x228>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a53      	ldr	r2, [pc, #332]	@ (8002b74 <HAL_DMA_Start_IT+0x22c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Start_IT+0xee>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_DMA_Start_IT+0x230>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <HAL_DMA_Start_IT+0x100>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <HAL_DMA_Start_IT+0x110>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f001 fe6a 	bl	8004738 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a34      	ldr	r2, [pc, #208]	@ (8002b3c <HAL_DMA_Start_IT+0x1f4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04a      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a33      	ldr	r2, [pc, #204]	@ (8002b40 <HAL_DMA_Start_IT+0x1f8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d045      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a31      	ldr	r2, [pc, #196]	@ (8002b44 <HAL_DMA_Start_IT+0x1fc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d040      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a30      	ldr	r2, [pc, #192]	@ (8002b48 <HAL_DMA_Start_IT+0x200>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d03b      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	@ (8002b4c <HAL_DMA_Start_IT+0x204>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d036      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b50 <HAL_DMA_Start_IT+0x208>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b54 <HAL_DMA_Start_IT+0x20c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02c      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_DMA_Start_IT+0x210>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d027      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	@ (8002b5c <HAL_DMA_Start_IT+0x214>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d022      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	@ (8002b60 <HAL_DMA_Start_IT+0x218>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d01d      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	@ (8002b64 <HAL_DMA_Start_IT+0x21c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d018      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	@ (8002b68 <HAL_DMA_Start_IT+0x220>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	@ (8002b6c <HAL_DMA_Start_IT+0x224>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_DMA_Start_IT+0x228>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <HAL_DMA_Start_IT+0x22c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_DMA_Start_IT+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <HAL_DMA_Start_IT+0x230>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_DMA_Start_IT+0x1c0>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_Start_IT+0x1c2>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d036      	beq.n	8002b7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 021e 	bic.w	r2, r3, #30
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0216 	orr.w	r2, r2, #22
 8002b20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03e      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0208 	orr.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e035      	b.n	8002ba8 <HAL_DMA_Start_IT+0x260>
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 020e 	bic.w	r2, r3, #14
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 020a 	orr.w	r2, r2, #10
 8002b8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0204 	orr.w	r2, r2, #4
 8002ba6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a83      	ldr	r2, [pc, #524]	@ (8002dbc <HAL_DMA_Start_IT+0x474>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d072      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a82      	ldr	r2, [pc, #520]	@ (8002dc0 <HAL_DMA_Start_IT+0x478>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d06d      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a80      	ldr	r2, [pc, #512]	@ (8002dc4 <HAL_DMA_Start_IT+0x47c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d068      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7f      	ldr	r2, [pc, #508]	@ (8002dc8 <HAL_DMA_Start_IT+0x480>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d063      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a7d      	ldr	r2, [pc, #500]	@ (8002dcc <HAL_DMA_Start_IT+0x484>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d05e      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd0 <HAL_DMA_Start_IT+0x488>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d059      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7a      	ldr	r2, [pc, #488]	@ (8002dd4 <HAL_DMA_Start_IT+0x48c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d054      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a79      	ldr	r2, [pc, #484]	@ (8002dd8 <HAL_DMA_Start_IT+0x490>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04f      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a77      	ldr	r2, [pc, #476]	@ (8002ddc <HAL_DMA_Start_IT+0x494>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d04a      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a76      	ldr	r2, [pc, #472]	@ (8002de0 <HAL_DMA_Start_IT+0x498>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d045      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a74      	ldr	r2, [pc, #464]	@ (8002de4 <HAL_DMA_Start_IT+0x49c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d040      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	@ (8002de8 <HAL_DMA_Start_IT+0x4a0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d03b      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a71      	ldr	r2, [pc, #452]	@ (8002dec <HAL_DMA_Start_IT+0x4a4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d036      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a70      	ldr	r2, [pc, #448]	@ (8002df0 <HAL_DMA_Start_IT+0x4a8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d031      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	@ (8002df4 <HAL_DMA_Start_IT+0x4ac>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02c      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6d      	ldr	r2, [pc, #436]	@ (8002df8 <HAL_DMA_Start_IT+0x4b0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d027      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002dfc <HAL_DMA_Start_IT+0x4b4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d022      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6a      	ldr	r2, [pc, #424]	@ (8002e00 <HAL_DMA_Start_IT+0x4b8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d01d      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a68      	ldr	r2, [pc, #416]	@ (8002e04 <HAL_DMA_Start_IT+0x4bc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d018      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a67      	ldr	r2, [pc, #412]	@ (8002e08 <HAL_DMA_Start_IT+0x4c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	@ (8002e0c <HAL_DMA_Start_IT+0x4c4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a64      	ldr	r2, [pc, #400]	@ (8002e10 <HAL_DMA_Start_IT+0x4c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d009      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a62      	ldr	r2, [pc, #392]	@ (8002e14 <HAL_DMA_Start_IT+0x4cc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a61      	ldr	r2, [pc, #388]	@ (8002e18 <HAL_DMA_Start_IT+0x4d0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_DMA_Start_IT+0x354>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_DMA_Start_IT+0x356>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a37      	ldr	r2, [pc, #220]	@ (8002dbc <HAL_DMA_Start_IT+0x474>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d04a      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a36      	ldr	r2, [pc, #216]	@ (8002dc0 <HAL_DMA_Start_IT+0x478>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d045      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a34      	ldr	r2, [pc, #208]	@ (8002dc4 <HAL_DMA_Start_IT+0x47c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d040      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a33      	ldr	r2, [pc, #204]	@ (8002dc8 <HAL_DMA_Start_IT+0x480>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03b      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_DMA_Start_IT+0x484>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d036      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <HAL_DMA_Start_IT+0x488>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d031      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd4 <HAL_DMA_Start_IT+0x48c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02c      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <HAL_DMA_Start_IT+0x490>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d027      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <HAL_DMA_Start_IT+0x494>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d022      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2a      	ldr	r2, [pc, #168]	@ (8002de0 <HAL_DMA_Start_IT+0x498>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d01d      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a28      	ldr	r2, [pc, #160]	@ (8002de4 <HAL_DMA_Start_IT+0x49c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d018      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <HAL_DMA_Start_IT+0x4a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a25      	ldr	r2, [pc, #148]	@ (8002dec <HAL_DMA_Start_IT+0x4a4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00e      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a24      	ldr	r2, [pc, #144]	@ (8002df0 <HAL_DMA_Start_IT+0x4a8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_DMA_Start_IT+0x4ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_DMA_Start_IT+0x430>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a21      	ldr	r2, [pc, #132]	@ (8002df8 <HAL_DMA_Start_IT+0x4b0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <HAL_DMA_Start_IT+0x442>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e012      	b.n	8002db0 <HAL_DMA_Start_IT+0x468>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e009      	b.n	8002db0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40020010 	.word	0x40020010
 8002dc0:	40020028 	.word	0x40020028
 8002dc4:	40020040 	.word	0x40020040
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	40020070 	.word	0x40020070
 8002dd0:	40020088 	.word	0x40020088
 8002dd4:	400200a0 	.word	0x400200a0
 8002dd8:	400200b8 	.word	0x400200b8
 8002ddc:	40020410 	.word	0x40020410
 8002de0:	40020428 	.word	0x40020428
 8002de4:	40020440 	.word	0x40020440
 8002de8:	40020458 	.word	0x40020458
 8002dec:	40020470 	.word	0x40020470
 8002df0:	40020488 	.word	0x40020488
 8002df4:	400204a0 	.word	0x400204a0
 8002df8:	400204b8 	.word	0x400204b8
 8002dfc:	58025408 	.word	0x58025408
 8002e00:	5802541c 	.word	0x5802541c
 8002e04:	58025430 	.word	0x58025430
 8002e08:	58025444 	.word	0x58025444
 8002e0c:	58025458 	.word	0x58025458
 8002e10:	5802546c 	.word	0x5802546c
 8002e14:	58025480 	.word	0x58025480
 8002e18:	58025494 	.word	0x58025494

08002e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7fe fd5c 	bl	80018e0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e2dc      	b.n	80033ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d008      	beq.n	8002e52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2280      	movs	r2, #128	@ 0x80
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e2cd      	b.n	80033ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a76      	ldr	r2, [pc, #472]	@ (8003030 <HAL_DMA_Abort+0x214>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04a      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a74      	ldr	r2, [pc, #464]	@ (8003034 <HAL_DMA_Abort+0x218>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d045      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a73      	ldr	r2, [pc, #460]	@ (8003038 <HAL_DMA_Abort+0x21c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d040      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a71      	ldr	r2, [pc, #452]	@ (800303c <HAL_DMA_Abort+0x220>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d03b      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a70      	ldr	r2, [pc, #448]	@ (8003040 <HAL_DMA_Abort+0x224>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d036      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6e      	ldr	r2, [pc, #440]	@ (8003044 <HAL_DMA_Abort+0x228>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6d      	ldr	r2, [pc, #436]	@ (8003048 <HAL_DMA_Abort+0x22c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d02c      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6b      	ldr	r2, [pc, #428]	@ (800304c <HAL_DMA_Abort+0x230>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_DMA_Abort+0x234>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a68      	ldr	r2, [pc, #416]	@ (8003054 <HAL_DMA_Abort+0x238>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a67      	ldr	r2, [pc, #412]	@ (8003058 <HAL_DMA_Abort+0x23c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a65      	ldr	r2, [pc, #404]	@ (800305c <HAL_DMA_Abort+0x240>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a64      	ldr	r2, [pc, #400]	@ (8003060 <HAL_DMA_Abort+0x244>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a62      	ldr	r2, [pc, #392]	@ (8003064 <HAL_DMA_Abort+0x248>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a61      	ldr	r2, [pc, #388]	@ (8003068 <HAL_DMA_Abort+0x24c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort+0xd6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5f      	ldr	r2, [pc, #380]	@ (800306c <HAL_DMA_Abort+0x250>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Abort+0xda>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_DMA_Abort+0xdc>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 021e 	bic.w	r2, r2, #30
 8002f0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e00a      	b.n	8002f3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020e 	bic.w	r2, r2, #14
 8002f32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003030 <HAL_DMA_Abort+0x214>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d072      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3a      	ldr	r2, [pc, #232]	@ (8003034 <HAL_DMA_Abort+0x218>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d06d      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a39      	ldr	r2, [pc, #228]	@ (8003038 <HAL_DMA_Abort+0x21c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d068      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	@ (800303c <HAL_DMA_Abort+0x220>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d063      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a36      	ldr	r2, [pc, #216]	@ (8003040 <HAL_DMA_Abort+0x224>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d05e      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_DMA_Abort+0x228>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d059      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	@ (8003048 <HAL_DMA_Abort+0x22c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d054      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a31      	ldr	r2, [pc, #196]	@ (800304c <HAL_DMA_Abort+0x230>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d04f      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	@ (8003050 <HAL_DMA_Abort+0x234>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	@ (8003054 <HAL_DMA_Abort+0x238>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_DMA_Abort+0x23c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <HAL_DMA_Abort+0x240>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_DMA_Abort+0x244>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <HAL_DMA_Abort+0x248>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_DMA_Abort+0x24c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_DMA_Abort+0x250>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <HAL_DMA_Abort+0x254>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	@ (8003074 <HAL_DMA_Abort+0x258>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_DMA_Abort+0x25c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_DMA_Abort+0x260>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_DMA_Abort+0x264>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_DMA_Abort+0x268>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_DMA_Abort+0x26c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_Abort+0x20e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <HAL_DMA_Abort+0x270>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d132      	bne.n	8003090 <HAL_DMA_Abort+0x274>
 800302a:	2301      	movs	r3, #1
 800302c:	e031      	b.n	8003092 <HAL_DMA_Abort+0x276>
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003260 <HAL_DMA_Abort+0x444>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d04a      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003264 <HAL_DMA_Abort+0x448>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d045      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6a      	ldr	r2, [pc, #424]	@ (8003268 <HAL_DMA_Abort+0x44c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d040      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a68      	ldr	r2, [pc, #416]	@ (800326c <HAL_DMA_Abort+0x450>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d03b      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a67      	ldr	r2, [pc, #412]	@ (8003270 <HAL_DMA_Abort+0x454>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d036      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_DMA_Abort+0x458>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a64      	ldr	r2, [pc, #400]	@ (8003278 <HAL_DMA_Abort+0x45c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a62      	ldr	r2, [pc, #392]	@ (800327c <HAL_DMA_Abort+0x460>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <HAL_DMA_Abort+0x464>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5f      	ldr	r2, [pc, #380]	@ (8003284 <HAL_DMA_Abort+0x468>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5e      	ldr	r2, [pc, #376]	@ (8003288 <HAL_DMA_Abort+0x46c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5c      	ldr	r2, [pc, #368]	@ (800328c <HAL_DMA_Abort+0x470>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5b      	ldr	r2, [pc, #364]	@ (8003290 <HAL_DMA_Abort+0x474>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_DMA_Abort+0x478>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_DMA_Abort+0x47c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort+0x32a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a56      	ldr	r2, [pc, #344]	@ (800329c <HAL_DMA_Abort+0x480>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <HAL_DMA_Abort+0x33c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <HAL_DMA_Abort+0x34c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003168:	e013      	b.n	8003192 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316a:	f7fe fbb9 	bl	80018e0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b05      	cmp	r3, #5
 8003176:	d90c      	bls.n	8003192 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e12d      	b.n	80033ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <HAL_DMA_Abort+0x444>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_DMA_Abort+0x448>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003268 <HAL_DMA_Abort+0x44c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <HAL_DMA_Abort+0x450>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a29      	ldr	r2, [pc, #164]	@ (8003270 <HAL_DMA_Abort+0x454>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_DMA_Abort+0x458>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <HAL_DMA_Abort+0x45c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a24      	ldr	r2, [pc, #144]	@ (800327c <HAL_DMA_Abort+0x460>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a23      	ldr	r2, [pc, #140]	@ (8003280 <HAL_DMA_Abort+0x464>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Abort+0x422>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <HAL_DMA_Abort+0x468>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Abort+0x422>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a20      	ldr	r2, [pc, #128]	@ (8003288 <HAL_DMA_Abort+0x46c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Abort+0x422>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <HAL_DMA_Abort+0x470>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Abort+0x422>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_DMA_Abort+0x474>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Abort+0x422>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1b      	ldr	r2, [pc, #108]	@ (8003294 <HAL_DMA_Abort+0x478>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Abort+0x422>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1a      	ldr	r2, [pc, #104]	@ (8003298 <HAL_DMA_Abort+0x47c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort+0x422>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <HAL_DMA_Abort+0x480>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Abort+0x426>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_DMA_Abort+0x428>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02b      	beq.n	80032a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	223f      	movs	r2, #63	@ 0x3f
 8003258:	409a      	lsls	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	e02a      	b.n	80032b6 <HAL_DMA_Abort+0x49a>
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2201      	movs	r2, #1
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4f      	ldr	r2, [pc, #316]	@ (80033f8 <HAL_DMA_Abort+0x5dc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d072      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4d      	ldr	r2, [pc, #308]	@ (80033fc <HAL_DMA_Abort+0x5e0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d06d      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003400 <HAL_DMA_Abort+0x5e4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d068      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003404 <HAL_DMA_Abort+0x5e8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d063      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a49      	ldr	r2, [pc, #292]	@ (8003408 <HAL_DMA_Abort+0x5ec>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d05e      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a47      	ldr	r2, [pc, #284]	@ (800340c <HAL_DMA_Abort+0x5f0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d059      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a46      	ldr	r2, [pc, #280]	@ (8003410 <HAL_DMA_Abort+0x5f4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d054      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a44      	ldr	r2, [pc, #272]	@ (8003414 <HAL_DMA_Abort+0x5f8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04f      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a43      	ldr	r2, [pc, #268]	@ (8003418 <HAL_DMA_Abort+0x5fc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a41      	ldr	r2, [pc, #260]	@ (800341c <HAL_DMA_Abort+0x600>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a40      	ldr	r2, [pc, #256]	@ (8003420 <HAL_DMA_Abort+0x604>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3e      	ldr	r2, [pc, #248]	@ (8003424 <HAL_DMA_Abort+0x608>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <HAL_DMA_Abort+0x60c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3b      	ldr	r2, [pc, #236]	@ (800342c <HAL_DMA_Abort+0x610>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3a      	ldr	r2, [pc, #232]	@ (8003430 <HAL_DMA_Abort+0x614>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a38      	ldr	r2, [pc, #224]	@ (8003434 <HAL_DMA_Abort+0x618>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a37      	ldr	r2, [pc, #220]	@ (8003438 <HAL_DMA_Abort+0x61c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a35      	ldr	r2, [pc, #212]	@ (800343c <HAL_DMA_Abort+0x620>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a34      	ldr	r2, [pc, #208]	@ (8003440 <HAL_DMA_Abort+0x624>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a32      	ldr	r2, [pc, #200]	@ (8003444 <HAL_DMA_Abort+0x628>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a31      	ldr	r2, [pc, #196]	@ (8003448 <HAL_DMA_Abort+0x62c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2f      	ldr	r2, [pc, #188]	@ (800344c <HAL_DMA_Abort+0x630>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2e      	ldr	r2, [pc, #184]	@ (8003450 <HAL_DMA_Abort+0x634>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort+0x58a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003454 <HAL_DMA_Abort+0x638>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Abort+0x58e>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_DMA_Abort+0x590>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40020010 	.word	0x40020010
 80033fc:	40020028 	.word	0x40020028
 8003400:	40020040 	.word	0x40020040
 8003404:	40020058 	.word	0x40020058
 8003408:	40020070 	.word	0x40020070
 800340c:	40020088 	.word	0x40020088
 8003410:	400200a0 	.word	0x400200a0
 8003414:	400200b8 	.word	0x400200b8
 8003418:	40020410 	.word	0x40020410
 800341c:	40020428 	.word	0x40020428
 8003420:	40020440 	.word	0x40020440
 8003424:	40020458 	.word	0x40020458
 8003428:	40020470 	.word	0x40020470
 800342c:	40020488 	.word	0x40020488
 8003430:	400204a0 	.word	0x400204a0
 8003434:	400204b8 	.word	0x400204b8
 8003438:	58025408 	.word	0x58025408
 800343c:	5802541c 	.word	0x5802541c
 8003440:	58025430 	.word	0x58025430
 8003444:	58025444 	.word	0x58025444
 8003448:	58025458 	.word	0x58025458
 800344c:	5802546c 	.word	0x5802546c
 8003450:	58025480 	.word	0x58025480
 8003454:	58025494 	.word	0x58025494

08003458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e237      	b.n	80038da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d004      	beq.n	8003480 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e22c      	b.n	80038da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_DMA_Abort_IT+0x1a0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d04a      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5b      	ldr	r2, [pc, #364]	@ (80035fc <HAL_DMA_Abort_IT+0x1a4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d045      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a59      	ldr	r2, [pc, #356]	@ (8003600 <HAL_DMA_Abort_IT+0x1a8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d040      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a58      	ldr	r2, [pc, #352]	@ (8003604 <HAL_DMA_Abort_IT+0x1ac>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d03b      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a56      	ldr	r2, [pc, #344]	@ (8003608 <HAL_DMA_Abort_IT+0x1b0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d036      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a55      	ldr	r2, [pc, #340]	@ (800360c <HAL_DMA_Abort_IT+0x1b4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a53      	ldr	r2, [pc, #332]	@ (8003610 <HAL_DMA_Abort_IT+0x1b8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02c      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_DMA_Abort_IT+0x1bc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d027      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a50      	ldr	r2, [pc, #320]	@ (8003618 <HAL_DMA_Abort_IT+0x1c0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4f      	ldr	r2, [pc, #316]	@ (800361c <HAL_DMA_Abort_IT+0x1c4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01d      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003620 <HAL_DMA_Abort_IT+0x1c8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_DMA_Abort_IT+0x1cc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003628 <HAL_DMA_Abort_IT+0x1d0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a49      	ldr	r2, [pc, #292]	@ (800362c <HAL_DMA_Abort_IT+0x1d4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a47      	ldr	r2, [pc, #284]	@ (8003630 <HAL_DMA_Abort_IT+0x1d8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_DMA_Abort_IT+0xc8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a46      	ldr	r2, [pc, #280]	@ (8003634 <HAL_DMA_Abort_IT+0x1dc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_DMA_Abort_IT+0xcc>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_DMA_Abort_IT+0xce>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8086 	beq.w	8003638 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2204      	movs	r2, #4
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2f      	ldr	r2, [pc, #188]	@ (80035f8 <HAL_DMA_Abort_IT+0x1a0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04a      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2e      	ldr	r2, [pc, #184]	@ (80035fc <HAL_DMA_Abort_IT+0x1a4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d045      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <HAL_DMA_Abort_IT+0x1a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d040      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2b      	ldr	r2, [pc, #172]	@ (8003604 <HAL_DMA_Abort_IT+0x1ac>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d03b      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a29      	ldr	r2, [pc, #164]	@ (8003608 <HAL_DMA_Abort_IT+0x1b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d036      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a28      	ldr	r2, [pc, #160]	@ (800360c <HAL_DMA_Abort_IT+0x1b4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <HAL_DMA_Abort_IT+0x1b8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02c      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a25      	ldr	r2, [pc, #148]	@ (8003614 <HAL_DMA_Abort_IT+0x1bc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d027      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a23      	ldr	r2, [pc, #140]	@ (8003618 <HAL_DMA_Abort_IT+0x1c0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_DMA_Abort_IT+0x1c4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a20      	ldr	r2, [pc, #128]	@ (8003620 <HAL_DMA_Abort_IT+0x1c8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003624 <HAL_DMA_Abort_IT+0x1cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <HAL_DMA_Abort_IT+0x1d0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_DMA_Abort_IT+0x1d4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003630 <HAL_DMA_Abort_IT+0x1d8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x17c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_DMA_Abort_IT+0x1dc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <HAL_DMA_Abort_IT+0x18e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e178      	b.n	80038d8 <HAL_DMA_Abort_IT+0x480>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e16f      	b.n	80038d8 <HAL_DMA_Abort_IT+0x480>
 80035f8:	40020010 	.word	0x40020010
 80035fc:	40020028 	.word	0x40020028
 8003600:	40020040 	.word	0x40020040
 8003604:	40020058 	.word	0x40020058
 8003608:	40020070 	.word	0x40020070
 800360c:	40020088 	.word	0x40020088
 8003610:	400200a0 	.word	0x400200a0
 8003614:	400200b8 	.word	0x400200b8
 8003618:	40020410 	.word	0x40020410
 800361c:	40020428 	.word	0x40020428
 8003620:	40020440 	.word	0x40020440
 8003624:	40020458 	.word	0x40020458
 8003628:	40020470 	.word	0x40020470
 800362c:	40020488 	.word	0x40020488
 8003630:	400204a0 	.word	0x400204a0
 8003634:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 020e 	bic.w	r2, r2, #14
 8003646:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6c      	ldr	r2, [pc, #432]	@ (8003800 <HAL_DMA_Abort_IT+0x3a8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6b      	ldr	r2, [pc, #428]	@ (8003804 <HAL_DMA_Abort_IT+0x3ac>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a69      	ldr	r2, [pc, #420]	@ (8003808 <HAL_DMA_Abort_IT+0x3b0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a68      	ldr	r2, [pc, #416]	@ (800380c <HAL_DMA_Abort_IT+0x3b4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a66      	ldr	r2, [pc, #408]	@ (8003810 <HAL_DMA_Abort_IT+0x3b8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a65      	ldr	r2, [pc, #404]	@ (8003814 <HAL_DMA_Abort_IT+0x3bc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a63      	ldr	r2, [pc, #396]	@ (8003818 <HAL_DMA_Abort_IT+0x3c0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a62      	ldr	r2, [pc, #392]	@ (800381c <HAL_DMA_Abort_IT+0x3c4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <HAL_DMA_Abort_IT+0x3c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003824 <HAL_DMA_Abort_IT+0x3cc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003828 <HAL_DMA_Abort_IT+0x3d0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5c      	ldr	r2, [pc, #368]	@ (800382c <HAL_DMA_Abort_IT+0x3d4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_DMA_Abort_IT+0x3d8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a59      	ldr	r2, [pc, #356]	@ (8003834 <HAL_DMA_Abort_IT+0x3dc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a57      	ldr	r2, [pc, #348]	@ (8003838 <HAL_DMA_Abort_IT+0x3e0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x290>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a56      	ldr	r2, [pc, #344]	@ (800383c <HAL_DMA_Abort_IT+0x3e4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <HAL_DMA_Abort_IT+0x2a2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e007      	b.n	800370a <HAL_DMA_Abort_IT+0x2b2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3c      	ldr	r2, [pc, #240]	@ (8003800 <HAL_DMA_Abort_IT+0x3a8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d072      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3a      	ldr	r2, [pc, #232]	@ (8003804 <HAL_DMA_Abort_IT+0x3ac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d06d      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a39      	ldr	r2, [pc, #228]	@ (8003808 <HAL_DMA_Abort_IT+0x3b0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d068      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_DMA_Abort_IT+0x3b4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d063      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a36      	ldr	r2, [pc, #216]	@ (8003810 <HAL_DMA_Abort_IT+0x3b8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d05e      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <HAL_DMA_Abort_IT+0x3bc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d059      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a33      	ldr	r2, [pc, #204]	@ (8003818 <HAL_DMA_Abort_IT+0x3c0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d054      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_DMA_Abort_IT+0x3c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d04f      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <HAL_DMA_Abort_IT+0x3c8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04a      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <HAL_DMA_Abort_IT+0x3cc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d045      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <HAL_DMA_Abort_IT+0x3d0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d040      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_DMA_Abort_IT+0x3d4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d03b      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <HAL_DMA_Abort_IT+0x3d8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d036      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_DMA_Abort_IT+0x3dc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d031      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <HAL_DMA_Abort_IT+0x3e0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d02c      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HAL_DMA_Abort_IT+0x3e4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_DMA_Abort_IT+0x3e8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <HAL_DMA_Abort_IT+0x3ec>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_DMA_Abort_IT+0x3f0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	@ (800384c <HAL_DMA_Abort_IT+0x3f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003850 <HAL_DMA_Abort_IT+0x3f8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <HAL_DMA_Abort_IT+0x3fc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <HAL_DMA_Abort_IT+0x400>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_DMA_Abort_IT+0x3a2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_DMA_Abort_IT+0x404>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d132      	bne.n	8003860 <HAL_DMA_Abort_IT+0x408>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e031      	b.n	8003862 <HAL_DMA_Abort_IT+0x40a>
 80037fe:	bf00      	nop
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
 8003840:	58025408 	.word	0x58025408
 8003844:	5802541c 	.word	0x5802541c
 8003848:	58025430 	.word	0x58025430
 800384c:	58025444 	.word	0x58025444
 8003850:	58025458 	.word	0x58025458
 8003854:	5802546c 	.word	0x5802546c
 8003858:	58025480 	.word	0x58025480
 800385c:	58025494 	.word	0x58025494
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003874:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003894:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038f0:	4b67      	ldr	r3, [pc, #412]	@ (8003a90 <HAL_DMA_IRQHandler+0x1ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a67      	ldr	r2, [pc, #412]	@ (8003a94 <HAL_DMA_IRQHandler+0x1b0>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a98 <HAL_DMA_IRQHandler+0x1b4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d04a      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5d      	ldr	r2, [pc, #372]	@ (8003a9c <HAL_DMA_IRQHandler+0x1b8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d045      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1bc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d040      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1c0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d03b      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a59      	ldr	r2, [pc, #356]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1c4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d036      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_DMA_IRQHandler+0x1c8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d031      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a56      	ldr	r2, [pc, #344]	@ (8003ab0 <HAL_DMA_IRQHandler+0x1cc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d02c      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_DMA_IRQHandler+0x1d0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d027      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a53      	ldr	r2, [pc, #332]	@ (8003ab8 <HAL_DMA_IRQHandler+0x1d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d022      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a51      	ldr	r2, [pc, #324]	@ (8003abc <HAL_DMA_IRQHandler+0x1d8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01d      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a50      	ldr	r2, [pc, #320]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1dc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac4 <HAL_DMA_IRQHandler+0x1e0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac8 <HAL_DMA_IRQHandler+0x1e4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a4b      	ldr	r2, [pc, #300]	@ (8003acc <HAL_DMA_IRQHandler+0x1e8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1ec>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a48      	ldr	r2, [pc, #288]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_DMA_IRQHandler+0xd6>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_DMA_IRQHandler+0xd8>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 842b 	beq.w	8004218 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2208      	movs	r2, #8
 80039cc:	409a      	lsls	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80a2 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003a98 <HAL_DMA_IRQHandler+0x1b4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d04a      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a9c <HAL_DMA_IRQHandler+0x1b8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d045      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1bc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d040      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1c0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d03b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a28      	ldr	r2, [pc, #160]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1c4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d036      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <HAL_DMA_IRQHandler+0x1c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d031      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a25      	ldr	r2, [pc, #148]	@ (8003ab0 <HAL_DMA_IRQHandler+0x1cc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a24      	ldr	r2, [pc, #144]	@ (8003ab4 <HAL_DMA_IRQHandler+0x1d0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d027      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	@ (8003ab8 <HAL_DMA_IRQHandler+0x1d4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	@ (8003abc <HAL_DMA_IRQHandler+0x1d8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01d      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1dc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <HAL_DMA_IRQHandler+0x1e0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <HAL_DMA_IRQHandler+0x1e4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_DMA_IRQHandler+0x1e8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1ec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x194>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d12f      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x1f4>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf14      	ite	ne
 8003a86:	2301      	movne	r3, #1
 8003a88:	2300      	moveq	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	e02e      	b.n	8003aec <HAL_DMA_IRQHandler+0x208>
 8003a8e:	bf00      	nop
 8003a90:	24000000 	.word	0x24000000
 8003a94:	1b4e81b5 	.word	0x1b4e81b5
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2208      	movs	r2, #8
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	f043 0201 	orr.w	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06e      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a69      	ldr	r2, [pc, #420]	@ (8003cdc <HAL_DMA_IRQHandler+0x3f8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a67      	ldr	r2, [pc, #412]	@ (8003ce0 <HAL_DMA_IRQHandler+0x3fc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a66      	ldr	r2, [pc, #408]	@ (8003ce4 <HAL_DMA_IRQHandler+0x400>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a64      	ldr	r2, [pc, #400]	@ (8003ce8 <HAL_DMA_IRQHandler+0x404>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a63      	ldr	r2, [pc, #396]	@ (8003cec <HAL_DMA_IRQHandler+0x408>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a61      	ldr	r2, [pc, #388]	@ (8003cf0 <HAL_DMA_IRQHandler+0x40c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <HAL_DMA_IRQHandler+0x410>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cf8 <HAL_DMA_IRQHandler+0x414>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5d      	ldr	r2, [pc, #372]	@ (8003cfc <HAL_DMA_IRQHandler+0x418>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5b      	ldr	r2, [pc, #364]	@ (8003d00 <HAL_DMA_IRQHandler+0x41c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d04 <HAL_DMA_IRQHandler+0x420>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	@ (8003d08 <HAL_DMA_IRQHandler+0x424>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a57      	ldr	r2, [pc, #348]	@ (8003d0c <HAL_DMA_IRQHandler+0x428>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a55      	ldr	r2, [pc, #340]	@ (8003d10 <HAL_DMA_IRQHandler+0x42c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a54      	ldr	r2, [pc, #336]	@ (8003d14 <HAL_DMA_IRQHandler+0x430>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2ee>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_DMA_IRQHandler+0x434>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10a      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x304>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e003      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x30c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f043 0202 	orr.w	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2204      	movs	r2, #4
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 808f 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <HAL_DMA_IRQHandler+0x3f8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d04a      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <HAL_DMA_IRQHandler+0x3fc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d045      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ce4 <HAL_DMA_IRQHandler+0x400>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d040      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <HAL_DMA_IRQHandler+0x404>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <HAL_DMA_IRQHandler+0x408>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_DMA_IRQHandler+0x40c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d031      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <HAL_DMA_IRQHandler+0x410>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02c      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a21      	ldr	r2, [pc, #132]	@ (8003cf8 <HAL_DMA_IRQHandler+0x414>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d027      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a20      	ldr	r2, [pc, #128]	@ (8003cfc <HAL_DMA_IRQHandler+0x418>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	@ (8003d00 <HAL_DMA_IRQHandler+0x41c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d04 <HAL_DMA_IRQHandler+0x420>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <HAL_DMA_IRQHandler+0x424>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <HAL_DMA_IRQHandler+0x428>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a18      	ldr	r2, [pc, #96]	@ (8003d10 <HAL_DMA_IRQHandler+0x42c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_DMA_IRQHandler+0x430>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x3e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <HAL_DMA_IRQHandler+0x434>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12a      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x438>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	e023      	b.n	8003d24 <HAL_DMA_IRQHandler+0x440>
 8003cdc:	40020010 	.word	0x40020010
 8003ce0:	40020028 	.word	0x40020028
 8003ce4:	40020040 	.word	0x40020040
 8003ce8:	40020058 	.word	0x40020058
 8003cec:	40020070 	.word	0x40020070
 8003cf0:	40020088 	.word	0x40020088
 8003cf4:	400200a0 	.word	0x400200a0
 8003cf8:	400200b8 	.word	0x400200b8
 8003cfc:	40020410 	.word	0x40020410
 8003d00:	40020428 	.word	0x40020428
 8003d04:	40020440 	.word	0x40020440
 8003d08:	40020458 	.word	0x40020458
 8003d0c:	40020470 	.word	0x40020470
 8003d10:	40020488 	.word	0x40020488
 8003d14:	400204a0 	.word	0x400204a0
 8003d18:	400204b8 	.word	0x400204b8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00d      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2204      	movs	r2, #4
 8003d32:	409a      	lsls	r2, r3
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a6 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a85      	ldr	r2, [pc, #532]	@ (8003f74 <HAL_DMA_IRQHandler+0x690>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04a      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a83      	ldr	r2, [pc, #524]	@ (8003f78 <HAL_DMA_IRQHandler+0x694>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d045      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a82      	ldr	r2, [pc, #520]	@ (8003f7c <HAL_DMA_IRQHandler+0x698>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d040      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a80      	ldr	r2, [pc, #512]	@ (8003f80 <HAL_DMA_IRQHandler+0x69c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03b      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7f      	ldr	r2, [pc, #508]	@ (8003f84 <HAL_DMA_IRQHandler+0x6a0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d036      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7d      	ldr	r2, [pc, #500]	@ (8003f88 <HAL_DMA_IRQHandler+0x6a4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d031      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f8c <HAL_DMA_IRQHandler+0x6a8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d02c      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a7a      	ldr	r2, [pc, #488]	@ (8003f90 <HAL_DMA_IRQHandler+0x6ac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d027      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a79      	ldr	r2, [pc, #484]	@ (8003f94 <HAL_DMA_IRQHandler+0x6b0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a77      	ldr	r2, [pc, #476]	@ (8003f98 <HAL_DMA_IRQHandler+0x6b4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a76      	ldr	r2, [pc, #472]	@ (8003f9c <HAL_DMA_IRQHandler+0x6b8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d018      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a74      	ldr	r2, [pc, #464]	@ (8003fa0 <HAL_DMA_IRQHandler+0x6bc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a73      	ldr	r2, [pc, #460]	@ (8003fa4 <HAL_DMA_IRQHandler+0x6c0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a71      	ldr	r2, [pc, #452]	@ (8003fa8 <HAL_DMA_IRQHandler+0x6c4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a70      	ldr	r2, [pc, #448]	@ (8003fac <HAL_DMA_IRQHandler+0x6c8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x516>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb0 <HAL_DMA_IRQHandler+0x6cc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10a      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x52c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e009      	b.n	8003e24 <HAL_DMA_IRQHandler+0x540>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03e      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2210      	movs	r2, #16
 8003e32:	409a      	lsls	r2, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d108      	bne.n	8003e66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d024      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e01f      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
 8003e76:	e016      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0208 	bic.w	r2, r2, #8
 8003e94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2220      	movs	r2, #32
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8110 	beq.w	80040dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f74 <HAL_DMA_IRQHandler+0x690>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d04a      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2b      	ldr	r2, [pc, #172]	@ (8003f78 <HAL_DMA_IRQHandler+0x694>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d045      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <HAL_DMA_IRQHandler+0x698>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d040      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <HAL_DMA_IRQHandler+0x69c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d03b      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	@ (8003f84 <HAL_DMA_IRQHandler+0x6a0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d036      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a25      	ldr	r2, [pc, #148]	@ (8003f88 <HAL_DMA_IRQHandler+0x6a4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d031      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a23      	ldr	r2, [pc, #140]	@ (8003f8c <HAL_DMA_IRQHandler+0x6a8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d02c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a22      	ldr	r2, [pc, #136]	@ (8003f90 <HAL_DMA_IRQHandler+0x6ac>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d027      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a20      	ldr	r2, [pc, #128]	@ (8003f94 <HAL_DMA_IRQHandler+0x6b0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <HAL_DMA_IRQHandler+0x6b4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d01d      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	@ (8003f9c <HAL_DMA_IRQHandler+0x6b8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa0 <HAL_DMA_IRQHandler+0x6bc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa4 <HAL_DMA_IRQHandler+0x6c0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <HAL_DMA_IRQHandler+0x6c4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <HAL_DMA_IRQHandler+0x6c8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x678>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <HAL_DMA_IRQHandler+0x6cc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d12b      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x6d0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e02a      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x6e4>
 8003f72:	bf00      	nop
 8003f74:	40020010 	.word	0x40020010
 8003f78:	40020028 	.word	0x40020028
 8003f7c:	40020040 	.word	0x40020040
 8003f80:	40020058 	.word	0x40020058
 8003f84:	40020070 	.word	0x40020070
 8003f88:	40020088 	.word	0x40020088
 8003f8c:	400200a0 	.word	0x400200a0
 8003f90:	400200b8 	.word	0x400200b8
 8003f94:	40020410 	.word	0x40020410
 8003f98:	40020428 	.word	0x40020428
 8003f9c:	40020440 	.word	0x40020440
 8003fa0:	40020458 	.word	0x40020458
 8003fa4:	40020470 	.word	0x40020470
 8003fa8:	40020488 	.word	0x40020488
 8003fac:	400204a0 	.word	0x400204a0
 8003fb0:	400204b8 	.word	0x400204b8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8087 	beq.w	80040dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d139      	bne.n	800405e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0216 	bic.w	r2, r2, #22
 8003ff8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004008:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_DMA_IRQHandler+0x736>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	223f      	movs	r2, #63	@ 0x3f
 8004034:	409a      	lsls	r2, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 834a 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	4798      	blx	r3
          }
          return;
 800405c:	e344      	b.n	80046e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d018      	beq.n	800409e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e027      	b.n	80040dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d023      	beq.n	80040dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e01e      	b.n	80040dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0210 	bic.w	r2, r2, #16
 80040ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8306 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8088 	beq.w	8004204 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7a      	ldr	r2, [pc, #488]	@ (80042ec <HAL_DMA_IRQHandler+0xa08>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a79      	ldr	r2, [pc, #484]	@ (80042f0 <HAL_DMA_IRQHandler+0xa0c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <HAL_DMA_IRQHandler+0xa10>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a76      	ldr	r2, [pc, #472]	@ (80042f8 <HAL_DMA_IRQHandler+0xa14>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a74      	ldr	r2, [pc, #464]	@ (80042fc <HAL_DMA_IRQHandler+0xa18>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a73      	ldr	r2, [pc, #460]	@ (8004300 <HAL_DMA_IRQHandler+0xa1c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a71      	ldr	r2, [pc, #452]	@ (8004304 <HAL_DMA_IRQHandler+0xa20>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a70      	ldr	r2, [pc, #448]	@ (8004308 <HAL_DMA_IRQHandler+0xa24>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6e      	ldr	r2, [pc, #440]	@ (800430c <HAL_DMA_IRQHandler+0xa28>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6d      	ldr	r2, [pc, #436]	@ (8004310 <HAL_DMA_IRQHandler+0xa2c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6b      	ldr	r2, [pc, #428]	@ (8004314 <HAL_DMA_IRQHandler+0xa30>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6a      	ldr	r2, [pc, #424]	@ (8004318 <HAL_DMA_IRQHandler+0xa34>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a68      	ldr	r2, [pc, #416]	@ (800431c <HAL_DMA_IRQHandler+0xa38>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a67      	ldr	r2, [pc, #412]	@ (8004320 <HAL_DMA_IRQHandler+0xa3c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a65      	ldr	r2, [pc, #404]	@ (8004324 <HAL_DMA_IRQHandler+0xa40>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_IRQHandler+0x8b8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a64      	ldr	r2, [pc, #400]	@ (8004328 <HAL_DMA_IRQHandler+0xa44>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <HAL_DMA_IRQHandler+0x8ca>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e007      	b.n	80041be <HAL_DMA_IRQHandler+0x8da>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d307      	bcc.n	80041da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f2      	bne.n	80041be <HAL_DMA_IRQHandler+0x8da>
 80041d8:	e000      	b.n	80041dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2203      	movs	r2, #3
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80041f2:	e003      	b.n	80041fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8272 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
 8004216:	e26c      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a43      	ldr	r2, [pc, #268]	@ (800432c <HAL_DMA_IRQHandler+0xa48>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a42      	ldr	r2, [pc, #264]	@ (8004330 <HAL_DMA_IRQHandler+0xa4c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a40      	ldr	r2, [pc, #256]	@ (8004334 <HAL_DMA_IRQHandler+0xa50>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3f      	ldr	r2, [pc, #252]	@ (8004338 <HAL_DMA_IRQHandler+0xa54>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3d      	ldr	r2, [pc, #244]	@ (800433c <HAL_DMA_IRQHandler+0xa58>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3c      	ldr	r2, [pc, #240]	@ (8004340 <HAL_DMA_IRQHandler+0xa5c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a3a      	ldr	r2, [pc, #232]	@ (8004344 <HAL_DMA_IRQHandler+0xa60>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_IRQHandler+0x984>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a39      	ldr	r2, [pc, #228]	@ (8004348 <HAL_DMA_IRQHandler+0xa64>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_DMA_IRQHandler+0x988>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_DMA_IRQHandler+0x98a>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 823f 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2204      	movs	r2, #4
 8004286:	409a      	lsls	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80cd 	beq.w	800442c <HAL_DMA_IRQHandler+0xb48>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80c7 	beq.w	800442c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2204      	movs	r2, #4
 80042a8:	409a      	lsls	r2, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d049      	beq.n	800434c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8210 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d4:	e20a      	b.n	80046ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8206 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e8:	e200      	b.n	80046ec <HAL_DMA_IRQHandler+0xe08>
 80042ea:	bf00      	nop
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d160      	bne.n	8004418 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7f      	ldr	r2, [pc, #508]	@ (8004558 <HAL_DMA_IRQHandler+0xc74>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d04a      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7d      	ldr	r2, [pc, #500]	@ (800455c <HAL_DMA_IRQHandler+0xc78>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d045      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7c      	ldr	r2, [pc, #496]	@ (8004560 <HAL_DMA_IRQHandler+0xc7c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d040      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7a      	ldr	r2, [pc, #488]	@ (8004564 <HAL_DMA_IRQHandler+0xc80>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d03b      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a79      	ldr	r2, [pc, #484]	@ (8004568 <HAL_DMA_IRQHandler+0xc84>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d036      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a77      	ldr	r2, [pc, #476]	@ (800456c <HAL_DMA_IRQHandler+0xc88>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d031      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a76      	ldr	r2, [pc, #472]	@ (8004570 <HAL_DMA_IRQHandler+0xc8c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d02c      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	@ (8004574 <HAL_DMA_IRQHandler+0xc90>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d027      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a73      	ldr	r2, [pc, #460]	@ (8004578 <HAL_DMA_IRQHandler+0xc94>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a71      	ldr	r2, [pc, #452]	@ (800457c <HAL_DMA_IRQHandler+0xc98>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01d      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a70      	ldr	r2, [pc, #448]	@ (8004580 <HAL_DMA_IRQHandler+0xc9c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004584 <HAL_DMA_IRQHandler+0xca0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004588 <HAL_DMA_IRQHandler+0xca4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	@ (800458c <HAL_DMA_IRQHandler+0xca8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004590 <HAL_DMA_IRQHandler+0xcac>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_DMA_IRQHandler+0xcb0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0xb24>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0208 	bic.w	r2, r2, #8
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e007      	b.n	8004418 <HAL_DMA_IRQHandler+0xb34>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0204 	bic.w	r2, r2, #4
 8004416:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8165 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442a:	e15f      	b.n	80046ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2202      	movs	r2, #2
 8004436:	409a      	lsls	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80c5 	beq.w	80045cc <HAL_DMA_IRQHandler+0xce8>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80bf 	beq.w	80045cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2202      	movs	r2, #2
 8004458:	409a      	lsls	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 813a 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004484:	e134      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8130 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004498:	e12a      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8089 	bne.w	80045b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <HAL_DMA_IRQHandler+0xc74>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a29      	ldr	r2, [pc, #164]	@ (800455c <HAL_DMA_IRQHandler+0xc78>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a28      	ldr	r2, [pc, #160]	@ (8004560 <HAL_DMA_IRQHandler+0xc7c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a26      	ldr	r2, [pc, #152]	@ (8004564 <HAL_DMA_IRQHandler+0xc80>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a25      	ldr	r2, [pc, #148]	@ (8004568 <HAL_DMA_IRQHandler+0xc84>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <HAL_DMA_IRQHandler+0xc88>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_DMA_IRQHandler+0xc8c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <HAL_DMA_IRQHandler+0xc90>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_DMA_IRQHandler+0xc94>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_DMA_IRQHandler+0xc98>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_DMA_IRQHandler+0xc9c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <HAL_DMA_IRQHandler+0xca0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_DMA_IRQHandler+0xca4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_DMA_IRQHandler+0xca8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_DMA_IRQHandler+0xcac>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_DMA_IRQHandler+0xc62>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_DMA_IRQHandler+0xcb0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d128      	bne.n	8004598 <HAL_DMA_IRQHandler+0xcb4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0214 	bic.w	r2, r2, #20
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e027      	b.n	80045a8 <HAL_DMA_IRQHandler+0xcc4>
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020a 	bic.w	r2, r2, #10
 80045a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8097 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ca:	e091      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2208      	movs	r2, #8
 80045d6:	409a      	lsls	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8088 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe0e>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8082 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a41      	ldr	r2, [pc, #260]	@ (80046f8 <HAL_DMA_IRQHandler+0xe14>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d04a      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3f      	ldr	r2, [pc, #252]	@ (80046fc <HAL_DMA_IRQHandler+0xe18>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d045      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3e      	ldr	r2, [pc, #248]	@ (8004700 <HAL_DMA_IRQHandler+0xe1c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d040      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3c      	ldr	r2, [pc, #240]	@ (8004704 <HAL_DMA_IRQHandler+0xe20>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d03b      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <HAL_DMA_IRQHandler+0xe24>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d036      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a39      	ldr	r2, [pc, #228]	@ (800470c <HAL_DMA_IRQHandler+0xe28>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a38      	ldr	r2, [pc, #224]	@ (8004710 <HAL_DMA_IRQHandler+0xe2c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d02c      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a36      	ldr	r2, [pc, #216]	@ (8004714 <HAL_DMA_IRQHandler+0xe30>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d027      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a35      	ldr	r2, [pc, #212]	@ (8004718 <HAL_DMA_IRQHandler+0xe34>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <HAL_DMA_IRQHandler+0xe38>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01d      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a32      	ldr	r2, [pc, #200]	@ (8004720 <HAL_DMA_IRQHandler+0xe3c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a30      	ldr	r2, [pc, #192]	@ (8004724 <HAL_DMA_IRQHandler+0xe40>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2f      	ldr	r2, [pc, #188]	@ (8004728 <HAL_DMA_IRQHandler+0xe44>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2d      	ldr	r2, [pc, #180]	@ (800472c <HAL_DMA_IRQHandler+0xe48>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <HAL_DMA_IRQHandler+0xe4c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_DMA_IRQHandler+0xdaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2a      	ldr	r2, [pc, #168]	@ (8004734 <HAL_DMA_IRQHandler+0xe50>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d108      	bne.n	80046a0 <HAL_DMA_IRQHandler+0xdbc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 021c 	bic.w	r2, r2, #28
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e007      	b.n	80046b0 <HAL_DMA_IRQHandler+0xdcc>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 020e 	bic.w	r2, r2, #14
 80046ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2201      	movs	r2, #1
 80046ba:	409a      	lsls	r2, r3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
 80046e6:	e004      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046f2:	3728      	adds	r7, #40	@ 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40020010 	.word	0x40020010
 80046fc:	40020028 	.word	0x40020028
 8004700:	40020040 	.word	0x40020040
 8004704:	40020058 	.word	0x40020058
 8004708:	40020070 	.word	0x40020070
 800470c:	40020088 	.word	0x40020088
 8004710:	400200a0 	.word	0x400200a0
 8004714:	400200b8 	.word	0x400200b8
 8004718:	40020410 	.word	0x40020410
 800471c:	40020428 	.word	0x40020428
 8004720:	40020440 	.word	0x40020440
 8004724:	40020458 	.word	0x40020458
 8004728:	40020470 	.word	0x40020470
 800472c:	40020488 	.word	0x40020488
 8004730:	400204a0 	.word	0x400204a0
 8004734:	400204b8 	.word	0x400204b8

08004738 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7f      	ldr	r2, [pc, #508]	@ (8004954 <DMA_SetConfig+0x21c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d072      	beq.n	8004842 <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7d      	ldr	r2, [pc, #500]	@ (8004958 <DMA_SetConfig+0x220>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d06d      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7c      	ldr	r2, [pc, #496]	@ (800495c <DMA_SetConfig+0x224>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d068      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a7a      	ldr	r2, [pc, #488]	@ (8004960 <DMA_SetConfig+0x228>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d063      	beq.n	8004842 <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a79      	ldr	r2, [pc, #484]	@ (8004964 <DMA_SetConfig+0x22c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d05e      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a77      	ldr	r2, [pc, #476]	@ (8004968 <DMA_SetConfig+0x230>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d059      	beq.n	8004842 <DMA_SetConfig+0x10a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a76      	ldr	r2, [pc, #472]	@ (800496c <DMA_SetConfig+0x234>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d054      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a74      	ldr	r2, [pc, #464]	@ (8004970 <DMA_SetConfig+0x238>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04f      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a73      	ldr	r2, [pc, #460]	@ (8004974 <DMA_SetConfig+0x23c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a71      	ldr	r2, [pc, #452]	@ (8004978 <DMA_SetConfig+0x240>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a70      	ldr	r2, [pc, #448]	@ (800497c <DMA_SetConfig+0x244>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004980 <DMA_SetConfig+0x248>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004984 <DMA_SetConfig+0x24c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004988 <DMA_SetConfig+0x250>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6a      	ldr	r2, [pc, #424]	@ (800498c <DMA_SetConfig+0x254>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a68      	ldr	r2, [pc, #416]	@ (8004990 <DMA_SetConfig+0x258>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a67      	ldr	r2, [pc, #412]	@ (8004994 <DMA_SetConfig+0x25c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <DMA_SetConfig+0x10a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a65      	ldr	r2, [pc, #404]	@ (8004998 <DMA_SetConfig+0x260>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a64      	ldr	r2, [pc, #400]	@ (800499c <DMA_SetConfig+0x264>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a62      	ldr	r2, [pc, #392]	@ (80049a0 <DMA_SetConfig+0x268>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <DMA_SetConfig+0x10a>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a61      	ldr	r2, [pc, #388]	@ (80049a4 <DMA_SetConfig+0x26c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5f      	ldr	r2, [pc, #380]	@ (80049a8 <DMA_SetConfig+0x270>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <DMA_SetConfig+0x10a>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5e      	ldr	r2, [pc, #376]	@ (80049ac <DMA_SetConfig+0x274>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <DMA_SetConfig+0x10a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5c      	ldr	r2, [pc, #368]	@ (80049b0 <DMA_SetConfig+0x278>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <DMA_SetConfig+0x10e>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <DMA_SetConfig+0x110>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004854:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004866:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a39      	ldr	r2, [pc, #228]	@ (8004954 <DMA_SetConfig+0x21c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d04a      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a38      	ldr	r2, [pc, #224]	@ (8004958 <DMA_SetConfig+0x220>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d045      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a36      	ldr	r2, [pc, #216]	@ (800495c <DMA_SetConfig+0x224>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d040      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <DMA_SetConfig+0x228>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d03b      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a33      	ldr	r2, [pc, #204]	@ (8004964 <DMA_SetConfig+0x22c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d036      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a32      	ldr	r2, [pc, #200]	@ (8004968 <DMA_SetConfig+0x230>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d031      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a30      	ldr	r2, [pc, #192]	@ (800496c <DMA_SetConfig+0x234>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02c      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004970 <DMA_SetConfig+0x238>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d027      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004974 <DMA_SetConfig+0x23c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d022      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <DMA_SetConfig+0x240>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d01d      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2a      	ldr	r2, [pc, #168]	@ (800497c <DMA_SetConfig+0x244>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <DMA_SetConfig+0x248>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a27      	ldr	r2, [pc, #156]	@ (8004984 <DMA_SetConfig+0x24c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <DMA_SetConfig+0x250>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a24      	ldr	r2, [pc, #144]	@ (800498c <DMA_SetConfig+0x254>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <DMA_SetConfig+0x1d0>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <DMA_SetConfig+0x258>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <DMA_SetConfig+0x1d4>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <DMA_SetConfig+0x1d6>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d059      	beq.n	80049c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	223f      	movs	r2, #63	@ 0x3f
 800491c:	409a      	lsls	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004930:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d138      	bne.n	80049b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004952:	e086      	b.n	8004a62 <DMA_SetConfig+0x32a>
 8004954:	40020010 	.word	0x40020010
 8004958:	40020028 	.word	0x40020028
 800495c:	40020040 	.word	0x40020040
 8004960:	40020058 	.word	0x40020058
 8004964:	40020070 	.word	0x40020070
 8004968:	40020088 	.word	0x40020088
 800496c:	400200a0 	.word	0x400200a0
 8004970:	400200b8 	.word	0x400200b8
 8004974:	40020410 	.word	0x40020410
 8004978:	40020428 	.word	0x40020428
 800497c:	40020440 	.word	0x40020440
 8004980:	40020458 	.word	0x40020458
 8004984:	40020470 	.word	0x40020470
 8004988:	40020488 	.word	0x40020488
 800498c:	400204a0 	.word	0x400204a0
 8004990:	400204b8 	.word	0x400204b8
 8004994:	58025408 	.word	0x58025408
 8004998:	5802541c 	.word	0x5802541c
 800499c:	58025430 	.word	0x58025430
 80049a0:	58025444 	.word	0x58025444
 80049a4:	58025458 	.word	0x58025458
 80049a8:	5802546c 	.word	0x5802546c
 80049ac:	58025480 	.word	0x58025480
 80049b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
}
 80049c4:	e04d      	b.n	8004a62 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <DMA_SetConfig+0x338>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a27      	ldr	r2, [pc, #156]	@ (8004a74 <DMA_SetConfig+0x33c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01d      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a26      	ldr	r2, [pc, #152]	@ (8004a78 <DMA_SetConfig+0x340>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d018      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a24      	ldr	r2, [pc, #144]	@ (8004a7c <DMA_SetConfig+0x344>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <DMA_SetConfig+0x348>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <DMA_SetConfig+0x34c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a20      	ldr	r2, [pc, #128]	@ (8004a88 <DMA_SetConfig+0x350>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <DMA_SetConfig+0x2de>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1e      	ldr	r2, [pc, #120]	@ (8004a8c <DMA_SetConfig+0x354>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <DMA_SetConfig+0x2e2>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <DMA_SetConfig+0x2e4>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2201      	movs	r2, #1
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d108      	bne.n	8004a52 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	60da      	str	r2, [r3, #12]
}
 8004a50:	e007      	b.n	8004a62 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	58025408 	.word	0x58025408
 8004a74:	5802541c 	.word	0x5802541c
 8004a78:	58025430 	.word	0x58025430
 8004a7c:	58025444 	.word	0x58025444
 8004a80:	58025458 	.word	0x58025458
 8004a84:	5802546c 	.word	0x5802546c
 8004a88:	58025480 	.word	0x58025480
 8004a8c:	58025494 	.word	0x58025494

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <DMA_CalcBaseAndBitshift+0x118>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <DMA_CalcBaseAndBitshift+0x11c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb0 <DMA_CalcBaseAndBitshift+0x120>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <DMA_CalcBaseAndBitshift+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb8 <DMA_CalcBaseAndBitshift+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	@ (8004bbc <DMA_CalcBaseAndBitshift+0x12c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a39      	ldr	r2, [pc, #228]	@ (8004bc0 <DMA_CalcBaseAndBitshift+0x130>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a38      	ldr	r2, [pc, #224]	@ (8004bc4 <DMA_CalcBaseAndBitshift+0x134>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a36      	ldr	r2, [pc, #216]	@ (8004bc8 <DMA_CalcBaseAndBitshift+0x138>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a35      	ldr	r2, [pc, #212]	@ (8004bcc <DMA_CalcBaseAndBitshift+0x13c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a33      	ldr	r2, [pc, #204]	@ (8004bd0 <DMA_CalcBaseAndBitshift+0x140>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a32      	ldr	r2, [pc, #200]	@ (8004bd4 <DMA_CalcBaseAndBitshift+0x144>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a30      	ldr	r2, [pc, #192]	@ (8004bd8 <DMA_CalcBaseAndBitshift+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004bdc <DMA_CalcBaseAndBitshift+0x14c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2d      	ldr	r2, [pc, #180]	@ (8004be0 <DMA_CalcBaseAndBitshift+0x150>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2c      	ldr	r2, [pc, #176]	@ (8004be4 <DMA_CalcBaseAndBitshift+0x154>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <DMA_CalcBaseAndBitshift+0xac>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <DMA_CalcBaseAndBitshift+0xae>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d024      	beq.n	8004b8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3b10      	subs	r3, #16
 8004b4a:	4a27      	ldr	r2, [pc, #156]	@ (8004be8 <DMA_CalcBaseAndBitshift+0x158>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	4a24      	ldr	r2, [pc, #144]	@ (8004bec <DMA_CalcBaseAndBitshift+0x15c>)
 8004b5c:	5cd3      	ldrb	r3, [r2, r3]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d908      	bls.n	8004b7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	1d1a      	adds	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b7a:	e00d      	b.n	8004b98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b8a:	e005      	b.n	8004b98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40020010 	.word	0x40020010
 8004bac:	40020028 	.word	0x40020028
 8004bb0:	40020040 	.word	0x40020040
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	40020070 	.word	0x40020070
 8004bbc:	40020088 	.word	0x40020088
 8004bc0:	400200a0 	.word	0x400200a0
 8004bc4:	400200b8 	.word	0x400200b8
 8004bc8:	40020410 	.word	0x40020410
 8004bcc:	40020428 	.word	0x40020428
 8004bd0:	40020440 	.word	0x40020440
 8004bd4:	40020458 	.word	0x40020458
 8004bd8:	40020470 	.word	0x40020470
 8004bdc:	40020488 	.word	0x40020488
 8004be0:	400204a0 	.word	0x400204a0
 8004be4:	400204b8 	.word	0x400204b8
 8004be8:	aaaaaaab 	.word	0xaaaaaaab
 8004bec:	0801136c 	.word	0x0801136c
 8004bf0:	fffffc00 	.word	0xfffffc00

08004bf4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d120      	bne.n	8004c4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d858      	bhi.n	8004cc2 <DMA_CheckFifoParam+0xce>
 8004c10:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <DMA_CheckFifoParam+0x24>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c3b 	.word	0x08004c3b
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004cc3 	.word	0x08004cc3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d048      	beq.n	8004cc6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c38:	e045      	b.n	8004cc6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c42:	d142      	bne.n	8004cca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c48:	e03f      	b.n	8004cca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c52:	d123      	bne.n	8004c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d838      	bhi.n	8004cce <DMA_CheckFifoParam+0xda>
 8004c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <DMA_CheckFifoParam+0x70>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c7b 	.word	0x08004c7b
 8004c6c:	08004c75 	.word	0x08004c75
 8004c70:	08004c8d 	.word	0x08004c8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
        break;
 8004c78:	e030      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d025      	beq.n	8004cd2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c8a:	e022      	b.n	8004cd2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c94:	d11f      	bne.n	8004cd6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c9a:	e01c      	b.n	8004cd6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d902      	bls.n	8004caa <DMA_CheckFifoParam+0xb6>
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d003      	beq.n	8004cb0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ca8:	e018      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        break;
 8004cae:	e015      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00e      	beq.n	8004cda <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8004cc0:	e00b      	b.n	8004cda <DMA_CheckFifoParam+0xe6>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e00a      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e008      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e006      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e004      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        break;
 8004cd2:	bf00      	nop
 8004cd4:	e002      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <DMA_CheckFifoParam+0xe8>
    break;
 8004cda:	bf00      	nop
    }
  }

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a38      	ldr	r2, [pc, #224]	@ (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	@ (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01d      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a35      	ldr	r2, [pc, #212]	@ (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a33      	ldr	r2, [pc, #204]	@ (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	@ (8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3b08      	subs	r3, #8
 8004d5c:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4b26      	ldr	r3, [pc, #152]	@ (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a24      	ldr	r2, [pc, #144]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2201      	movs	r2, #1
 8004d82:	409a      	lsls	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d88:	e024      	b.n	8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3b10      	subs	r3, #16
 8004d92:	4a1e      	ldr	r2, [pc, #120]	@ (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d806      	bhi.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d902      	bls.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3308      	adds	r3, #8
 8004db0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4b18      	ldr	r3, [pc, #96]	@ (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004dc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2201      	movs	r2, #1
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	58025408 	.word	0x58025408
 8004de4:	5802541c 	.word	0x5802541c
 8004de8:	58025430 	.word	0x58025430
 8004dec:	58025444 	.word	0x58025444
 8004df0:	58025458 	.word	0x58025458
 8004df4:	5802546c 	.word	0x5802546c
 8004df8:	58025480 	.word	0x58025480
 8004dfc:	58025494 	.word	0x58025494
 8004e00:	cccccccd 	.word	0xcccccccd
 8004e04:	16009600 	.word	0x16009600
 8004e08:	58025880 	.word	0x58025880
 8004e0c:	aaaaaaab 	.word	0xaaaaaaab
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	4002040f 	.word	0x4002040f
 8004e18:	10008200 	.word	0x10008200
 8004e1c:	40020880 	.word	0x40020880

08004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d04a      	beq.n	8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d847      	bhi.n	8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a25      	ldr	r2, [pc, #148]	@ (8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	@ (8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	@ (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ea8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004eaa:	e009      	b.n	8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a11      	ldr	r2, [pc, #68]	@ (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ebe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	58025408 	.word	0x58025408
 8004edc:	5802541c 	.word	0x5802541c
 8004ee0:	58025430 	.word	0x58025430
 8004ee4:	58025444 	.word	0x58025444
 8004ee8:	58025458 	.word	0x58025458
 8004eec:	5802546c 	.word	0x5802546c
 8004ef0:	58025480 	.word	0x58025480
 8004ef4:	58025494 	.word	0x58025494
 8004ef8:	1600963f 	.word	0x1600963f
 8004efc:	58025940 	.word	0x58025940
 8004f00:	1000823f 	.word	0x1000823f
 8004f04:	40020940 	.word	0x40020940

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f16:	4b89      	ldr	r3, [pc, #548]	@ (800513c <HAL_GPIO_Init+0x234>)
 8004f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f1a:	e194      	b.n	8005246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2101      	movs	r1, #1
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8186 	beq.w	8005240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d005      	beq.n	8004f4c <HAL_GPIO_Init+0x44>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d130      	bne.n	8004fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f82:	2201      	movs	r2, #1
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0201 	and.w	r2, r3, #1
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d017      	beq.n	8004fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d123      	bne.n	800503e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80e0 	beq.w	8005240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005080:	4b2f      	ldr	r3, [pc, #188]	@ (8005140 <HAL_GPIO_Init+0x238>)
 8005082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005086:	4a2e      	ldr	r2, [pc, #184]	@ (8005140 <HAL_GPIO_Init+0x238>)
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005090:	4b2b      	ldr	r3, [pc, #172]	@ (8005140 <HAL_GPIO_Init+0x238>)
 8005092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800509e:	4a29      	ldr	r2, [pc, #164]	@ (8005144 <HAL_GPIO_Init+0x23c>)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	3302      	adds	r3, #2
 80050a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	220f      	movs	r2, #15
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a20      	ldr	r2, [pc, #128]	@ (8005148 <HAL_GPIO_Init+0x240>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d052      	beq.n	8005170 <HAL_GPIO_Init+0x268>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_GPIO_Init+0x244>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_GPIO_Init+0x22e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <HAL_GPIO_Init+0x248>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02b      	beq.n	8005132 <HAL_GPIO_Init+0x22a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <HAL_GPIO_Init+0x24c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d025      	beq.n	800512e <HAL_GPIO_Init+0x226>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <HAL_GPIO_Init+0x250>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <HAL_GPIO_Init+0x222>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <HAL_GPIO_Init+0x254>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d019      	beq.n	8005126 <HAL_GPIO_Init+0x21e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <HAL_GPIO_Init+0x258>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_GPIO_Init+0x21a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_GPIO_Init+0x25c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00d      	beq.n	800511e <HAL_GPIO_Init+0x216>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <HAL_GPIO_Init+0x260>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <HAL_GPIO_Init+0x212>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <HAL_GPIO_Init+0x264>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_GPIO_Init+0x20e>
 8005112:	2309      	movs	r3, #9
 8005114:	e02d      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 8005116:	230a      	movs	r3, #10
 8005118:	e02b      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 800511a:	2308      	movs	r3, #8
 800511c:	e029      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 800511e:	2307      	movs	r3, #7
 8005120:	e027      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 8005122:	2306      	movs	r3, #6
 8005124:	e025      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 8005126:	2305      	movs	r3, #5
 8005128:	e023      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 800512a:	2304      	movs	r3, #4
 800512c:	e021      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 800512e:	2303      	movs	r3, #3
 8005130:	e01f      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 8005132:	2302      	movs	r3, #2
 8005134:	e01d      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 8005136:	2301      	movs	r3, #1
 8005138:	e01b      	b.n	8005172 <HAL_GPIO_Init+0x26a>
 800513a:	bf00      	nop
 800513c:	58000080 	.word	0x58000080
 8005140:	58024400 	.word	0x58024400
 8005144:	58000400 	.word	0x58000400
 8005148:	58020000 	.word	0x58020000
 800514c:	58020400 	.word	0x58020400
 8005150:	58020800 	.word	0x58020800
 8005154:	58020c00 	.word	0x58020c00
 8005158:	58021000 	.word	0x58021000
 800515c:	58021400 	.word	0x58021400
 8005160:	58021800 	.word	0x58021800
 8005164:	58021c00 	.word	0x58021c00
 8005168:	58022000 	.word	0x58022000
 800516c:	58022400 	.word	0x58022400
 8005170:	2300      	movs	r3, #0
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	f002 0203 	and.w	r2, r2, #3
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	4093      	lsls	r3, r2
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005182:	4938      	ldr	r1, [pc, #224]	@ (8005264 <HAL_GPIO_Init+0x35c>)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	3302      	adds	r3, #2
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	f47f ae63 	bne.w	8004f1c <HAL_GPIO_Init+0x14>
  }
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	3724      	adds	r7, #36	@ 0x24
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	58000400 	.word	0x58000400

08005268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e001      	b.n	800528a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a8:	787b      	ldrb	r3, [r7, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052b4:	e003      	b.n	80052be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052b6:	887b      	ldrh	r3, [r7, #2]
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	619a      	str	r2, [r3, #24]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_PWREx_ConfigSupply+0x70>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d00a      	beq.n	80052f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052e0:	4b16      	ldr	r3, [pc, #88]	@ (800533c <HAL_PWREx_ConfigSupply+0x70>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e01f      	b.n	8005332 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e01d      	b.n	8005332 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052f6:	4b11      	ldr	r3, [pc, #68]	@ (800533c <HAL_PWREx_ConfigSupply+0x70>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 0207 	bic.w	r2, r3, #7
 80052fe:	490f      	ldr	r1, [pc, #60]	@ (800533c <HAL_PWREx_ConfigSupply+0x70>)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4313      	orrs	r3, r2
 8005304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005306:	f7fc faeb 	bl	80018e0 <HAL_GetTick>
 800530a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800530c:	e009      	b.n	8005322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800530e:	f7fc fae7 	bl	80018e0 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800531c:	d901      	bls.n	8005322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e007      	b.n	8005332 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_PWREx_ConfigSupply+0x70>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532e:	d1ee      	bne.n	800530e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	58024800 	.word	0x58024800

08005340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	@ 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f000 bc48 	b.w	8005be4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8088 	beq.w	8005472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005362:	4b99      	ldr	r3, [pc, #612]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800536c:	4b96      	ldr	r3, [pc, #600]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	2b10      	cmp	r3, #16
 8005376:	d007      	beq.n	8005388 <HAL_RCC_OscConfig+0x48>
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	2b18      	cmp	r3, #24
 800537c:	d111      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62>
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d10c      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b8f      	ldr	r3, [pc, #572]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d06d      	beq.n	8005470 <HAL_RCC_OscConfig+0x130>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d169      	bne.n	8005470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f000 bc21 	b.w	8005be4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053aa:	d106      	bne.n	80053ba <HAL_RCC_OscConfig+0x7a>
 80053ac:	4b86      	ldr	r3, [pc, #536]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a85      	ldr	r2, [pc, #532]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	e02e      	b.n	8005418 <HAL_RCC_OscConfig+0xd8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x9c>
 80053c2:	4b81      	ldr	r3, [pc, #516]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a80      	ldr	r2, [pc, #512]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b7e      	ldr	r3, [pc, #504]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a7d      	ldr	r2, [pc, #500]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <HAL_RCC_OscConfig+0xd8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0xc0>
 80053e6:	4b78      	ldr	r3, [pc, #480]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a77      	ldr	r2, [pc, #476]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4b75      	ldr	r3, [pc, #468]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a74      	ldr	r2, [pc, #464]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0xd8>
 8005400:	4b71      	ldr	r3, [pc, #452]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a70      	ldr	r2, [pc, #448]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b6e      	ldr	r3, [pc, #440]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a6d      	ldr	r2, [pc, #436]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fc fa5e 	bl	80018e0 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005428:	f7fc fa5a 	bl	80018e0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	@ 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e3d4      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800543a:	4b63      	ldr	r3, [pc, #396]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xe8>
 8005446:	e014      	b.n	8005472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fc fa4a 	bl	80018e0 <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005450:	f7fc fa46 	bl	80018e0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	@ 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e3c0      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005462:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x110>
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80ca 	beq.w	8005614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005480:	4b51      	ldr	r3, [pc, #324]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800548a:	4b4f      	ldr	r3, [pc, #316]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_RCC_OscConfig+0x166>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b18      	cmp	r3, #24
 800549a:	d156      	bne.n	800554a <HAL_RCC_OscConfig+0x20a>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d151      	bne.n	800554a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a6:	4b48      	ldr	r3, [pc, #288]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_RCC_OscConfig+0x17e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e392      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054be:	4b42      	ldr	r3, [pc, #264]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0219 	bic.w	r2, r3, #25
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	493f      	ldr	r1, [pc, #252]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fc fa06 	bl	80018e0 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d8:	f7fc fa02 	bl	80018e0 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e37c      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ea:	4b37      	ldr	r3, [pc, #220]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	f7fc fa23 	bl	8001940 <HAL_GetREVID>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005500:	4293      	cmp	r3, r2
 8005502:	d817      	bhi.n	8005534 <HAL_RCC_OscConfig+0x1f4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d108      	bne.n	800551e <HAL_RCC_OscConfig+0x1de>
 800550c:	4b2e      	ldr	r3, [pc, #184]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005514:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551c:	e07a      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b2a      	ldr	r3, [pc, #168]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	031b      	lsls	r3, r3, #12
 800552c:	4926      	ldr	r1, [pc, #152]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005532:	e06f      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	4921      	ldr	r1, [pc, #132]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005548:	e064      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d047      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005552:	4b1d      	ldr	r3, [pc, #116]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 0219 	bic.w	r2, r3, #25
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	491a      	ldr	r1, [pc, #104]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fc f9bc 	bl	80018e0 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fc f9b8 	bl	80018e0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e332      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558a:	f7fc f9d9 	bl	8001940 <HAL_GetREVID>
 800558e:	4603      	mov	r3, r0
 8005590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005594:	4293      	cmp	r3, r2
 8005596:	d819      	bhi.n	80055cc <HAL_RCC_OscConfig+0x28c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b40      	cmp	r3, #64	@ 0x40
 800559e:	d108      	bne.n	80055b2 <HAL_RCC_OscConfig+0x272>
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80055a8:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80055aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ae:	6053      	str	r3, [r2, #4]
 80055b0:	e030      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
 80055b2:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	031b      	lsls	r3, r3, #12
 80055c0:	4901      	ldr	r1, [pc, #4]	@ (80055c8 <HAL_RCC_OscConfig+0x288>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
 80055c6:	e025      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
 80055c8:	58024400 	.word	0x58024400
 80055cc:	4b9a      	ldr	r3, [pc, #616]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	4997      	ldr	r1, [pc, #604]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
 80055e0:	e018      	b.n	8005614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e2:	4b95      	ldr	r3, [pc, #596]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a94      	ldr	r2, [pc, #592]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fc f977 	bl	80018e0 <HAL_GetTick>
 80055f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f6:	f7fc f973 	bl	80018e0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e2ed      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005608:	4b8b      	ldr	r3, [pc, #556]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80a9 	beq.w	8005774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005622:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800562c:	4b82      	ldr	r3, [pc, #520]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d007      	beq.n	8005648 <HAL_RCC_OscConfig+0x308>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b18      	cmp	r3, #24
 800563c:	d13a      	bne.n	80056b4 <HAL_RCC_OscConfig+0x374>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d135      	bne.n	80056b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005648:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_OscConfig+0x320>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b80      	cmp	r3, #128	@ 0x80
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e2c1      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005660:	f7fc f96e 	bl	8001940 <HAL_GetREVID>
 8005664:	4603      	mov	r3, r0
 8005666:	f241 0203 	movw	r2, #4099	@ 0x1003
 800566a:	4293      	cmp	r3, r2
 800566c:	d817      	bhi.n	800569e <HAL_RCC_OscConfig+0x35e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	2b20      	cmp	r3, #32
 8005674:	d108      	bne.n	8005688 <HAL_RCC_OscConfig+0x348>
 8005676:	4b70      	ldr	r3, [pc, #448]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800567e:	4a6e      	ldr	r2, [pc, #440]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005684:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005686:	e075      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005688:	4b6b      	ldr	r3, [pc, #428]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	069b      	lsls	r3, r3, #26
 8005696:	4968      	ldr	r1, [pc, #416]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569c:	e06a      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800569e:	4b66      	ldr	r3, [pc, #408]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	4962      	ldr	r1, [pc, #392]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056b2:	e05f      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d042      	beq.n	8005742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80056c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fc f90a 	bl	80018e0 <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056d0:	f7fc f906 	bl	80018e0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e280      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056e2:	4b55      	ldr	r3, [pc, #340]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ee:	f7fc f927 	bl	8001940 <HAL_GetREVID>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d817      	bhi.n	800572c <HAL_RCC_OscConfig+0x3ec>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	2b20      	cmp	r3, #32
 8005702:	d108      	bne.n	8005716 <HAL_RCC_OscConfig+0x3d6>
 8005704:	4b4c      	ldr	r3, [pc, #304]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800570c:	4a4a      	ldr	r2, [pc, #296]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800570e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005712:	6053      	str	r3, [r2, #4]
 8005714:	e02e      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
 8005716:	4b48      	ldr	r3, [pc, #288]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	069b      	lsls	r3, r3, #26
 8005724:	4944      	ldr	r1, [pc, #272]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	604b      	str	r3, [r1, #4]
 800572a:	e023      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
 800572c:	4b42      	ldr	r3, [pc, #264]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	493f      	ldr	r1, [pc, #252]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800573c:	4313      	orrs	r3, r2
 800573e:	60cb      	str	r3, [r1, #12]
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005742:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a3c      	ldr	r2, [pc, #240]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fc f8c7 	bl	80018e0 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005756:	f7fc f8c3 	bl	80018e0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e23d      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005768:	4b33      	ldr	r3, [pc, #204]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d036      	beq.n	80057ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d019      	beq.n	80057bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005788:	4b2b      	ldr	r3, [pc, #172]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800578a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578c:	4a2a      	ldr	r2, [pc, #168]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fc f8a4 	bl	80018e0 <HAL_GetTick>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800579c:	f7fc f8a0 	bl	80018e0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e21a      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ae:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x45c>
 80057ba:	e018      	b.n	80057ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80057be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fc f88a 	bl	80018e0 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fc f886 	bl	80018e0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e200      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 80057e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d039      	beq.n	800586e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01c      	beq.n	800583c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a0c      	ldr	r2, [pc, #48]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 8005808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800580c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800580e:	f7fc f867 	bl	80018e0 <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005816:	f7fc f863 	bl	80018e0 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e1dd      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005828:	4b03      	ldr	r3, [pc, #12]	@ (8005838 <HAL_RCC_OscConfig+0x4f8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCC_OscConfig+0x4d6>
 8005834:	e01b      	b.n	800586e <HAL_RCC_OscConfig+0x52e>
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800583c:	4b9b      	ldr	r3, [pc, #620]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a9a      	ldr	r2, [pc, #616]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005848:	f7fc f84a 	bl	80018e0 <HAL_GetTick>
 800584c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005850:	f7fc f846 	bl	80018e0 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e1c0      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005862:	4b92      	ldr	r3, [pc, #584]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8081 	beq.w	800597e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800587c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab0 <HAL_RCC_OscConfig+0x770>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a8b      	ldr	r2, [pc, #556]	@ (8005ab0 <HAL_RCC_OscConfig+0x770>)
 8005882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005888:	f7fc f82a 	bl	80018e0 <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005890:	f7fc f826 	bl	80018e0 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	@ 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e1a0      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a2:	4b83      	ldr	r3, [pc, #524]	@ (8005ab0 <HAL_RCC_OscConfig+0x770>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d106      	bne.n	80058c4 <HAL_RCC_OscConfig+0x584>
 80058b6:	4b7d      	ldr	r3, [pc, #500]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	4a7c      	ldr	r2, [pc, #496]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c2:	e02d      	b.n	8005920 <HAL_RCC_OscConfig+0x5e0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCC_OscConfig+0x5a6>
 80058cc:	4b77      	ldr	r3, [pc, #476]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d0:	4a76      	ldr	r2, [pc, #472]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d8:	4b74      	ldr	r3, [pc, #464]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058dc:	4a73      	ldr	r2, [pc, #460]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058de:	f023 0304 	bic.w	r3, r3, #4
 80058e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e4:	e01c      	b.n	8005920 <HAL_RCC_OscConfig+0x5e0>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c8>
 80058ee:	4b6f      	ldr	r3, [pc, #444]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	4a6e      	ldr	r2, [pc, #440]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fa:	4b6c      	ldr	r3, [pc, #432]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	4a6b      	ldr	r2, [pc, #428]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6713      	str	r3, [r2, #112]	@ 0x70
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0x5e0>
 8005908:	4b68      	ldr	r3, [pc, #416]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a67      	ldr	r2, [pc, #412]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	4b65      	ldr	r3, [pc, #404]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	4a64      	ldr	r2, [pc, #400]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 800591a:	f023 0304 	bic.w	r3, r3, #4
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fb ffda 	bl	80018e0 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fb ffd6 	bl	80018e0 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e14e      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005946:	4b59      	ldr	r3, [pc, #356]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ee      	beq.n	8005930 <HAL_RCC_OscConfig+0x5f0>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fb ffc4 	bl	80018e0 <HAL_GetTick>
 8005958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595c:	f7fb ffc0 	bl	80018e0 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e138      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005972:	4b4e      	ldr	r3, [pc, #312]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1ee      	bne.n	800595c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 812d 	beq.w	8005be2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005988:	4b48      	ldr	r3, [pc, #288]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005990:	2b18      	cmp	r3, #24
 8005992:	f000 80bd 	beq.w	8005b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	2b02      	cmp	r3, #2
 800599c:	f040 809e 	bne.w	8005adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a0:	4b42      	ldr	r3, [pc, #264]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a41      	ldr	r2, [pc, #260]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80059a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fb ff98 	bl	80018e0 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fb ff94 	bl	80018e0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e10e      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c6:	4b39      	ldr	r3, [pc, #228]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d2:	4b36      	ldr	r3, [pc, #216]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80059d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059d6:	4b37      	ldr	r3, [pc, #220]	@ (8005ab4 <HAL_RCC_OscConfig+0x774>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	430a      	orrs	r2, r1
 80059e6:	4931      	ldr	r1, [pc, #196]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	3b01      	subs	r3, #1
 80059f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	3b01      	subs	r3, #1
 80059fc:	025b      	lsls	r3, r3, #9
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	3b01      	subs	r3, #1
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a1c:	4923      	ldr	r1, [pc, #140]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005a22:	4b22      	ldr	r3, [pc, #136]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4a21      	ldr	r2, [pc, #132]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a32:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <HAL_RCC_OscConfig+0x778>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a3a:	00d2      	lsls	r2, r2, #3
 8005a3c:	491b      	ldr	r1, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a42:	4b1a      	ldr	r3, [pc, #104]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	f023 020c 	bic.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	4917      	ldr	r1, [pc, #92]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a54:	4b15      	ldr	r3, [pc, #84]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	f023 0202 	bic.w	r2, r3, #2
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	4912      	ldr	r1, [pc, #72]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a66:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6a:	4a10      	ldr	r2, [pc, #64]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a72:	4b0e      	ldr	r3, [pc, #56]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	4a0d      	ldr	r2, [pc, #52]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a8a:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	4a07      	ldr	r2, [pc, #28]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a04      	ldr	r2, [pc, #16]	@ (8005aac <HAL_RCC_OscConfig+0x76c>)
 8005a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa2:	f7fb ff1d 	bl	80018e0 <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aa8:	e011      	b.n	8005ace <HAL_RCC_OscConfig+0x78e>
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	58024800 	.word	0x58024800
 8005ab4:	fffffc0c 	.word	0xfffffc0c
 8005ab8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fb ff10 	bl	80018e0 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e08a      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ace:	4b47      	ldr	r3, [pc, #284]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x77c>
 8005ada:	e082      	b.n	8005be2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005adc:	4b43      	ldr	r3, [pc, #268]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a42      	ldr	r2, [pc, #264]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fb fefa 	bl	80018e0 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fb fef6 	bl	80018e0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e070      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b02:	4b3a      	ldr	r3, [pc, #232]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x7b0>
 8005b0e:	e068      	b.n	8005be2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b10:	4b36      	ldr	r3, [pc, #216]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b16:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d031      	beq.n	8005b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f003 0203 	and.w	r2, r3, #3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d12a      	bne.n	8005b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d122      	bne.n	8005b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d11a      	bne.n	8005b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d111      	bne.n	8005b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d108      	bne.n	8005b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d001      	beq.n	8005b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e02b      	b.n	8005be4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b8c:	4b17      	ldr	r3, [pc, #92]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d01f      	beq.n	8005be2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005ba2:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	4a11      	ldr	r2, [pc, #68]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bae:	f7fb fe97 	bl	80018e0 <HAL_GetTick>
 8005bb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005bb4:	bf00      	nop
 8005bb6:	f7fb fe93 	bl	80018e0 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d0f9      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <HAL_RCC_OscConfig+0x8b0>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bce:	00d2      	lsls	r2, r2, #3
 8005bd0:	4906      	ldr	r1, [pc, #24]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005bd6:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	4a04      	ldr	r2, [pc, #16]	@ (8005bec <HAL_RCC_OscConfig+0x8ac>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3730      	adds	r7, #48	@ 0x30
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	ffff0007 	.word	0xffff0007

08005bf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e19c      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c08:	4b8a      	ldr	r3, [pc, #552]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d910      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c16:	4b87      	ldr	r3, [pc, #540]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 020f 	bic.w	r2, r3, #15
 8005c1e:	4985      	ldr	r1, [pc, #532]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b83      	ldr	r3, [pc, #524]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e184      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d010      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	4b7b      	ldr	r3, [pc, #492]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d908      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c54:	4b78      	ldr	r3, [pc, #480]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	4975      	ldr	r1, [pc, #468]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d010      	beq.n	8005c94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	4b70      	ldr	r3, [pc, #448]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d908      	bls.n	8005c94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c82:	4b6d      	ldr	r3, [pc, #436]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	496a      	ldr	r1, [pc, #424]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	4b64      	ldr	r3, [pc, #400]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d908      	bls.n	8005cc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cb0:	4b61      	ldr	r3, [pc, #388]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	495e      	ldr	r1, [pc, #376]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d010      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d908      	bls.n	8005cf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cde:	4b56      	ldr	r3, [pc, #344]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4953      	ldr	r1, [pc, #332]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	4b4d      	ldr	r3, [pc, #308]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d908      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f023 020f 	bic.w	r2, r3, #15
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4947      	ldr	r1, [pc, #284]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d055      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d2a:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4940      	ldr	r1, [pc, #256]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d44:	4b3c      	ldr	r3, [pc, #240]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d121      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0f6      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d107      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d5c:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0ea      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d74:	4b30      	ldr	r3, [pc, #192]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d109      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0de      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d84:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0d6      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d94:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f023 0207 	bic.w	r2, r3, #7
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4925      	ldr	r1, [pc, #148]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da6:	f7fb fd9b 	bl	80018e0 <HAL_GetTick>
 8005daa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dae:	f7fb fd97 	bl	80018e0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e0be      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d1eb      	bne.n	8005dae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d010      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	4b14      	ldr	r3, [pc, #80]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d208      	bcs.n	8005e04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df2:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f023 020f 	bic.w	r2, r3, #15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	490e      	ldr	r1, [pc, #56]	@ (8005e38 <HAL_RCC_ClockConfig+0x244>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d214      	bcs.n	8005e3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e12:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f023 020f 	bic.w	r2, r3, #15
 8005e1a:	4906      	ldr	r1, [pc, #24]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <HAL_RCC_ClockConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e086      	b.n	8005f42 <HAL_RCC_ClockConfig+0x34e>
 8005e34:	52002000 	.word	0x52002000
 8005e38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d208      	bcs.n	8005e6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e58:	4b3c      	ldr	r3, [pc, #240]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	4939      	ldr	r1, [pc, #228]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d208      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e86:	4b31      	ldr	r3, [pc, #196]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	492e      	ldr	r1, [pc, #184]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	4b28      	ldr	r3, [pc, #160]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d208      	bcs.n	8005ec6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005eb4:	4b25      	ldr	r3, [pc, #148]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	4922      	ldr	r1, [pc, #136]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d010      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d208      	bcs.n	8005ef4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	4917      	ldr	r1, [pc, #92]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ef4:	f000 f834 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b14      	ldr	r3, [pc, #80]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	4912      	ldr	r1, [pc, #72]	@ (8005f50 <HAL_RCC_ClockConfig+0x35c>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f12:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <HAL_RCC_ClockConfig+0x358>)
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f50 <HAL_RCC_ClockConfig+0x35c>)
 8005f1c:	5cd3      	ldrb	r3, [r2, r3]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	4a0a      	ldr	r2, [pc, #40]	@ (8005f54 <HAL_RCC_ClockConfig+0x360>)
 8005f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f58 <HAL_RCC_ClockConfig+0x364>)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005f32:	4b0a      	ldr	r3, [pc, #40]	@ (8005f5c <HAL_RCC_ClockConfig+0x368>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fb fc88 	bl	800184c <HAL_InitTick>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	0801135c 	.word	0x0801135c
 8005f54:	24000004 	.word	0x24000004
 8005f58:	24000000 	.word	0x24000000
 8005f5c:	24000008 	.word	0x24000008

08005f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b089      	sub	sp, #36	@ 0x24
 8005f64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f66:	4bb3      	ldr	r3, [pc, #716]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f6e:	2b18      	cmp	r3, #24
 8005f70:	f200 8155 	bhi.w	800621e <HAL_RCC_GetSysClockFreq+0x2be>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	0800621f 	.word	0x0800621f
 8005f84:	0800621f 	.word	0x0800621f
 8005f88:	0800621f 	.word	0x0800621f
 8005f8c:	0800621f 	.word	0x0800621f
 8005f90:	0800621f 	.word	0x0800621f
 8005f94:	0800621f 	.word	0x0800621f
 8005f98:	0800621f 	.word	0x0800621f
 8005f9c:	08006007 	.word	0x08006007
 8005fa0:	0800621f 	.word	0x0800621f
 8005fa4:	0800621f 	.word	0x0800621f
 8005fa8:	0800621f 	.word	0x0800621f
 8005fac:	0800621f 	.word	0x0800621f
 8005fb0:	0800621f 	.word	0x0800621f
 8005fb4:	0800621f 	.word	0x0800621f
 8005fb8:	0800621f 	.word	0x0800621f
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	0800621f 	.word	0x0800621f
 8005fc4:	0800621f 	.word	0x0800621f
 8005fc8:	0800621f 	.word	0x0800621f
 8005fcc:	0800621f 	.word	0x0800621f
 8005fd0:	0800621f 	.word	0x0800621f
 8005fd4:	0800621f 	.word	0x0800621f
 8005fd8:	0800621f 	.word	0x0800621f
 8005fdc:	08006013 	.word	0x08006013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe0:	4b94      	ldr	r3, [pc, #592]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fec:	4b91      	ldr	r3, [pc, #580]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	08db      	lsrs	r3, r3, #3
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	4a90      	ldr	r2, [pc, #576]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ffe:	e111      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006000:	4b8d      	ldr	r3, [pc, #564]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006002:	61bb      	str	r3, [r7, #24]
      break;
 8006004:	e10e      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006006:	4b8d      	ldr	r3, [pc, #564]	@ (800623c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006008:	61bb      	str	r3, [r7, #24]
      break;
 800600a:	e10b      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800600c:	4b8c      	ldr	r3, [pc, #560]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800600e:	61bb      	str	r3, [r7, #24]
      break;
 8006010:	e108      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006012:	4b88      	ldr	r3, [pc, #544]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800601c:	4b85      	ldr	r3, [pc, #532]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006026:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006028:	4b82      	ldr	r3, [pc, #520]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006032:	4b80      	ldr	r3, [pc, #512]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80e1 	beq.w	8006218 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b02      	cmp	r3, #2
 800605a:	f000 8083 	beq.w	8006164 <HAL_RCC_GetSysClockFreq+0x204>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b02      	cmp	r3, #2
 8006062:	f200 80a1 	bhi.w	80061a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x114>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d056      	beq.n	8006120 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006072:	e099      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006074:	4b6f      	ldr	r3, [pc, #444]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02d      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006080:	4b6c      	ldr	r3, [pc, #432]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	08db      	lsrs	r3, r3, #3
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	4a6b      	ldr	r2, [pc, #428]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b62      	ldr	r3, [pc, #392]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80060be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80060da:	e087      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006248 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b51      	ldr	r3, [pc, #324]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006102:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006244 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800611e:	e065      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800624c <HAL_RCC_GetSysClockFreq+0x2ec>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b40      	ldr	r3, [pc, #256]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a02 	vldr	s12, [r7, #8]
 8006146:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006162:	e043      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006250 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b2f      	ldr	r3, [pc, #188]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a02 	vldr	s12, [r7, #8]
 800618a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061a6:	e021      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800624c <HAL_RCC_GetSysClockFreq+0x2ec>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80061ec:	4b11      	ldr	r3, [pc, #68]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	0a5b      	lsrs	r3, r3, #9
 80061f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f6:	3301      	adds	r3, #1
 80061f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006204:	edd7 6a07 	vldr	s13, [r7, #28]
 8006208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006210:	ee17 3a90 	vmov	r3, s15
 8006214:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006216:	e005      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
      break;
 800621c:	e002      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006220:	61bb      	str	r3, [r7, #24]
      break;
 8006222:	bf00      	nop
  }

  return sysclockfreq;
 8006224:	69bb      	ldr	r3, [r7, #24]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3724      	adds	r7, #36	@ 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	58024400 	.word	0x58024400
 8006238:	03d09000 	.word	0x03d09000
 800623c:	003d0900 	.word	0x003d0900
 8006240:	007a1200 	.word	0x007a1200
 8006244:	46000000 	.word	0x46000000
 8006248:	4c742400 	.word	0x4c742400
 800624c:	4a742400 	.word	0x4a742400
 8006250:	4af42400 	.word	0x4af42400

08006254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800625a:	f7ff fe81 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 800625e:	4602      	mov	r2, r0
 8006260:	4b10      	ldr	r3, [pc, #64]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	490f      	ldr	r1, [pc, #60]	@ (80062a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800626c:	5ccb      	ldrb	r3, [r1, r3]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006278:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	4a09      	ldr	r2, [pc, #36]	@ (80062a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006282:	5cd3      	ldrb	r3, [r2, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	4a07      	ldr	r2, [pc, #28]	@ (80062ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006290:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006292:	4a07      	ldr	r2, [pc, #28]	@ (80062b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006298:	4b04      	ldr	r3, [pc, #16]	@ (80062ac <HAL_RCC_GetHCLKFreq+0x58>)
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	58024400 	.word	0x58024400
 80062a8:	0801135c 	.word	0x0801135c
 80062ac:	24000004 	.word	0x24000004
 80062b0:	24000000 	.word	0x24000000

080062b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062b8:	f7ff ffcc 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	4904      	ldr	r1, [pc, #16]	@ (80062dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80062ca:	5ccb      	ldrb	r3, [r1, r3]
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	58024400 	.word	0x58024400
 80062dc:	0801135c 	.word	0x0801135c

080062e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062e4:	f7ff ffb6 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4904      	ldr	r1, [pc, #16]	@ (8006308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	58024400 	.word	0x58024400
 8006308:	0801135c 	.word	0x0801135c

0800630c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800630c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006310:	b0ca      	sub	sp, #296	@ 0x128
 8006312:	af00      	add	r7, sp, #0
 8006314:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800631e:	2300      	movs	r3, #0
 8006320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006330:	2500      	movs	r5, #0
 8006332:	ea54 0305 	orrs.w	r3, r4, r5
 8006336:	d049      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800633e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006342:	d02f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006348:	d828      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800634a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800634e:	d01a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006354:	d822      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800635a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800635e:	d007      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006360:	e01c      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006362:	4bb8      	ldr	r3, [pc, #736]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	4ab7      	ldr	r2, [pc, #732]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800636e:	e01a      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	3308      	adds	r3, #8
 8006376:	2102      	movs	r1, #2
 8006378:	4618      	mov	r0, r3
 800637a:	f002 fb61 	bl	8008a40 <RCCEx_PLL2_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006384:	e00f      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	3328      	adds	r3, #40	@ 0x28
 800638c:	2102      	movs	r1, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f002 fc08 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800639a:	e004      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80063a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063ae:	4ba5      	ldr	r3, [pc, #660]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063bc:	4aa1      	ldr	r2, [pc, #644]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063be:	430b      	orrs	r3, r1
 80063c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c2:	e003      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80063d8:	f04f 0900 	mov.w	r9, #0
 80063dc:	ea58 0309 	orrs.w	r3, r8, r9
 80063e0:	d047      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d82a      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006409 	.word	0x08006409
 80063f8:	08006417 	.word	0x08006417
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800644b 	.word	0x0800644b
 8006404:	0800644b 	.word	0x0800644b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006408:	4b8e      	ldr	r3, [pc, #568]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	4a8d      	ldr	r2, [pc, #564]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800640e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006414:	e01a      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	3308      	adds	r3, #8
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f002 fb0e 	bl	8008a40 <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800642a:	e00f      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	3328      	adds	r3, #40	@ 0x28
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f002 fbb5 	bl	8008ba4 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006440:	e004      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800644a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006454:	4b7b      	ldr	r3, [pc, #492]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006458:	f023 0107 	bic.w	r1, r3, #7
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	4a78      	ldr	r2, [pc, #480]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6513      	str	r3, [r2, #80]	@ 0x50
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800647e:	f04f 0b00 	mov.w	fp, #0
 8006482:	ea5a 030b 	orrs.w	r3, sl, fp
 8006486:	d04c      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006492:	d030      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006498:	d829      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800649a:	2bc0      	cmp	r3, #192	@ 0xc0
 800649c:	d02d      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800649e:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a0:	d825      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064a2:	2b80      	cmp	r3, #128	@ 0x80
 80064a4:	d018      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80064a6:	2b80      	cmp	r3, #128	@ 0x80
 80064a8:	d821      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80064ae:	2b40      	cmp	r3, #64	@ 0x40
 80064b0:	d007      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80064b2:	e01c      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4b63      	ldr	r3, [pc, #396]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b8:	4a62      	ldr	r2, [pc, #392]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064c0:	e01c      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c6:	3308      	adds	r3, #8
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f002 fab8 	bl	8008a40 <RCCEx_PLL2_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3328      	adds	r3, #40	@ 0x28
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f002 fb5f 	bl	8008ba4 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064ec:	e006      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f4:	e002      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80064fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006504:	4b4f      	ldr	r3, [pc, #316]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006508:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006512:	4a4c      	ldr	r2, [pc, #304]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006514:	430b      	orrs	r3, r1
 8006516:	6513      	str	r3, [r2, #80]	@ 0x50
 8006518:	e003      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800652e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006538:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d053      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800654a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800654e:	d035      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006550:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006554:	d82e      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006556:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800655a:	d031      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800655c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006560:	d828      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006566:	d01a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656c:	d822      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006576:	d007      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006578:	e01c      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657a:	4b32      	ldr	r3, [pc, #200]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	4a31      	ldr	r2, [pc, #196]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006586:	e01c      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	3308      	adds	r3, #8
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f002 fa55 	bl	8008a40 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800659c:	e011      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	3328      	adds	r3, #40	@ 0x28
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 fafc 	bl	8008ba4 <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b2:	e006      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ba:	e002      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80065ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065da:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6593      	str	r3, [r2, #88]	@ 0x58
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80065f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065fa:	2300      	movs	r3, #0
 80065fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006600:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006604:	460b      	mov	r3, r1
 8006606:	4313      	orrs	r3, r2
 8006608:	d056      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006612:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006616:	d038      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800661c:	d831      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800661e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006622:	d034      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006624:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006628:	d82b      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800662a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800662e:	d01d      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006634:	d825      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d006      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800663a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006640:	e01f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006648:	4ba2      	ldr	r3, [pc, #648]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4aa1      	ldr	r2, [pc, #644]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800664e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006654:	e01c      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	3308      	adds	r3, #8
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f002 f9ee 	bl	8008a40 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800666a:	e011      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	3328      	adds	r3, #40	@ 0x28
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f002 fa95 	bl	8008ba4 <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006680:	e006      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800668a:	bf00      	nop
 800668c:	e000      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800668e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006698:	4b8e      	ldr	r3, [pc, #568]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800669a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066a8:	4a8a      	ldr	r2, [pc, #552]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80066c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d03a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	2b30      	cmp	r3, #48	@ 0x30
 80066e0:	d01f      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80066e2:	2b30      	cmp	r3, #48	@ 0x30
 80066e4:	d819      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d00c      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d815      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d019      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d111      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f6:	4b77      	ldr	r3, [pc, #476]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	4a76      	ldr	r2, [pc, #472]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006708:	3308      	adds	r3, #8
 800670a:	2102      	movs	r1, #2
 800670c:	4618      	mov	r0, r3
 800670e:	f002 f997 	bl	8008a40 <RCCEx_PLL2_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006730:	4b68      	ldr	r3, [pc, #416]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006734:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	4a65      	ldr	r2, [pc, #404]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006740:	430b      	orrs	r3, r1
 8006742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800675a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006764:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006768:	460b      	mov	r3, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	d051      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006778:	d035      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800677a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800677e:	d82e      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006784:	d031      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006786:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800678a:	d828      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d01a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006796:	d822      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a0:	d007      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80067a2:	e01c      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a4:	4b4b      	ldr	r3, [pc, #300]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	4a4a      	ldr	r2, [pc, #296]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067b0:	e01c      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	3308      	adds	r3, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f002 f940 	bl	8008a40 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067c6:	e011      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	3328      	adds	r3, #40	@ 0x28
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f002 f9e7 	bl	8008ba4 <RCCEx_PLL3_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067dc:	e006      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067e4:	e002      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80067ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80067f4:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006802:	4a34      	ldr	r2, [pc, #208]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6513      	str	r3, [r2, #80]	@ 0x50
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800681e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006828:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d056      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800683c:	d033      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800683e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006842:	d82c      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006844:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006848:	d02f      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800684a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800684e:	d826      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006850:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006854:	d02b      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006856:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800685a:	d820      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800685c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006860:	d012      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006866:	d81a      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d022      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006870:	d115      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	3308      	adds	r3, #8
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f002 f8e0 	bl	8008a40 <RCCEx_PLL2_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006886:	e015      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	3328      	adds	r3, #40	@ 0x28
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f002 f987 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800689c:	e00a      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a4:	e006      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068a6:	bf00      	nop
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ca:	4a02      	ldr	r2, [pc, #8]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80068d0:	e006      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80068d2:	bf00      	nop
 80068d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d055      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800690c:	d033      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800690e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006912:	d82c      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006918:	d02f      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691e:	d826      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006920:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006924:	d02b      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006926:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800692a:	d820      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800692c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006930:	d012      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006936:	d81a      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d022      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800693c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006940:	d115      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	3308      	adds	r3, #8
 8006948:	2101      	movs	r1, #1
 800694a:	4618      	mov	r0, r3
 800694c:	f002 f878 	bl	8008a40 <RCCEx_PLL2_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006956:	e015      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695c:	3328      	adds	r3, #40	@ 0x28
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f002 f91f 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800696c:	e00a      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006974:	e006      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006976:	bf00      	nop
 8006978:	e004      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800697a:	bf00      	nop
 800697c:	e002      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800697e:	bf00      	nop
 8006980:	e000      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800698c:	4ba3      	ldr	r3, [pc, #652]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006990:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800699c:	4a9f      	ldr	r2, [pc, #636]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80069b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069c6:	460b      	mov	r3, r1
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d037      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d6:	d00e      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069dc:	d816      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d018      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80069e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e6:	d111      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e8:	4b8c      	ldr	r3, [pc, #560]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	4a8b      	ldr	r2, [pc, #556]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80069f4:	e00f      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	3308      	adds	r3, #8
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f002 f81e 	bl	8008a40 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d039      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d81c      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006a66:	a201      	add	r2, pc, #4	@ (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006aa9 	.word	0x08006aa9
 8006a70:	08006a7d 	.word	0x08006a7d
 8006a74:	08006a8b 	.word	0x08006a8b
 8006a78:	08006aa9 	.word	0x08006aa9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7c:	4b67      	ldr	r3, [pc, #412]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	4a66      	ldr	r2, [pc, #408]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a88:	e00f      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8e:	3308      	adds	r3, #8
 8006a90:	2102      	movs	r1, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 ffd4 	bl	8008a40 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a9e:	e004      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa6:	e000      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab6:	f023 0103 	bic.w	r1, r3, #3
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac0:	4a56      	ldr	r2, [pc, #344]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ae6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f000 809f 	beq.w	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af2:	4b4b      	ldr	r3, [pc, #300]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006afe:	f7fa feef 	bl	80018e0 <HAL_GetTick>
 8006b02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b06:	e00b      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b08:	f7fa feea 	bl	80018e0 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b64      	cmp	r3, #100	@ 0x64
 8006b16:	d903      	bls.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b20:	4b3f      	ldr	r3, [pc, #252]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0ed      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d179      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b34:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b40:	4053      	eors	r3, r2
 8006b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d015      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b4a:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b56:	4b31      	ldr	r3, [pc, #196]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5a:	4a30      	ldr	r2, [pc, #192]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b62:	4b2e      	ldr	r3, [pc, #184]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	4a2d      	ldr	r2, [pc, #180]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b82:	d118      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fa feac 	bl	80018e0 <HAL_GetTick>
 8006b88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b8c:	e00d      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8e:	f7fa fea7 	bl	80018e0 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d903      	bls.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006baa:	4b1c      	ldr	r3, [pc, #112]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0eb      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d129      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bce:	d10e      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006bd0:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006be0:	091a      	lsrs	r2, r3, #4
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	4a0d      	ldr	r2, [pc, #52]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6113      	str	r3, [r2, #16]
 8006bec:	e005      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006bee:	4b0b      	ldr	r3, [pc, #44]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bf8:	6113      	str	r3, [r2, #16]
 8006bfa:	4b08      	ldr	r3, [pc, #32]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0a:	4a04      	ldr	r2, [pc, #16]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c10:	e00e      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006c1a:	e009      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	58024800 	.word	0x58024800
 8006c24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f002 0301 	and.w	r3, r2, #1
 8006c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f000 8089 	beq.w	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c58:	2b28      	cmp	r3, #40	@ 0x28
 8006c5a:	d86b      	bhi.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006d3d 	.word	0x08006d3d
 8006c68:	08006d35 	.word	0x08006d35
 8006c6c:	08006d35 	.word	0x08006d35
 8006c70:	08006d35 	.word	0x08006d35
 8006c74:	08006d35 	.word	0x08006d35
 8006c78:	08006d35 	.word	0x08006d35
 8006c7c:	08006d35 	.word	0x08006d35
 8006c80:	08006d35 	.word	0x08006d35
 8006c84:	08006d09 	.word	0x08006d09
 8006c88:	08006d35 	.word	0x08006d35
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d35 	.word	0x08006d35
 8006c94:	08006d35 	.word	0x08006d35
 8006c98:	08006d35 	.word	0x08006d35
 8006c9c:	08006d35 	.word	0x08006d35
 8006ca0:	08006d35 	.word	0x08006d35
 8006ca4:	08006d1f 	.word	0x08006d1f
 8006ca8:	08006d35 	.word	0x08006d35
 8006cac:	08006d35 	.word	0x08006d35
 8006cb0:	08006d35 	.word	0x08006d35
 8006cb4:	08006d35 	.word	0x08006d35
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d35 	.word	0x08006d35
 8006cc0:	08006d35 	.word	0x08006d35
 8006cc4:	08006d3d 	.word	0x08006d3d
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006d35 	.word	0x08006d35
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006d35 	.word	0x08006d35
 8006cd8:	08006d35 	.word	0x08006d35
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d35 	.word	0x08006d35
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d35 	.word	0x08006d35
 8006cf4:	08006d35 	.word	0x08006d35
 8006cf8:	08006d35 	.word	0x08006d35
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d3d 	.word	0x08006d3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fe95 	bl	8008a40 <RCCEx_PLL2_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d1c:	e00f      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	3328      	adds	r3, #40	@ 0x28
 8006d24:	2101      	movs	r1, #1
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 ff3c 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d46:	4bbf      	ldr	r3, [pc, #764]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d54:	4abb      	ldr	r2, [pc, #748]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d56:	430b      	orrs	r3, r1
 8006d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d5a:	e003      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f002 0302 	and.w	r3, r2, #2
 8006d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d041      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d824      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006de1 	.word	0x08006de1
 8006d98:	08006dad 	.word	0x08006dad
 8006d9c:	08006dc3 	.word	0x08006dc3
 8006da0:	08006de1 	.word	0x08006de1
 8006da4:	08006de1 	.word	0x08006de1
 8006da8:	08006de1 	.word	0x08006de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db0:	3308      	adds	r3, #8
 8006db2:	2101      	movs	r1, #1
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fe43 	bl	8008a40 <RCCEx_PLL2_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006dc0:	e00f      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc6:	3328      	adds	r3, #40	@ 0x28
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 feea 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006dd6:	e004      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dea:	4b96      	ldr	r3, [pc, #600]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dee:	f023 0107 	bic.w	r1, r3, #7
 8006df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006df8:	4a92      	ldr	r2, [pc, #584]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dfe:	e003      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f002 0304 	and.w	r3, r2, #4
 8006e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4313      	orrs	r3, r2
 8006e26:	d044      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d825      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006e34:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e89 	.word	0x08006e89
 8006e40:	08006e55 	.word	0x08006e55
 8006e44:	08006e6b 	.word	0x08006e6b
 8006e48:	08006e89 	.word	0x08006e89
 8006e4c:	08006e89 	.word	0x08006e89
 8006e50:	08006e89 	.word	0x08006e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fdef 	bl	8008a40 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e68:	e00f      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	2101      	movs	r1, #1
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fe96 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e7e:	e004      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10b      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e92:	4b6c      	ldr	r3, [pc, #432]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	f023 0107 	bic.w	r1, r3, #7
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ea2:	4a68      	ldr	r2, [pc, #416]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea8:	e003      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f002 0320 	and.w	r3, r2, #32
 8006ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d055      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ede:	d033      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ee4:	d82c      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d02f      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef0:	d826      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ef6:	d02b      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006efc:	d820      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f02:	d012      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f08:	d81a      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f12:	d115      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	3308      	adds	r3, #8
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 fd8f 	bl	8008a40 <RCCEx_PLL2_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f28:	e015      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	3328      	adds	r3, #40	@ 0x28
 8006f30:	2102      	movs	r1, #2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fe36 	bl	8008ba4 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f3e:	e00a      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f46:	e006      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f48:	bf00      	nop
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f5e:	4b39      	ldr	r3, [pc, #228]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6e:	4a35      	ldr	r2, [pc, #212]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d058      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fa6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006faa:	d033      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006fac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006fb0:	d82c      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb6:	d02f      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbc:	d826      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fc2:	d02b      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fc8:	d820      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fce:	d012      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fd4:	d81a      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d022      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fde:	d115      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fd29 	bl	8008a40 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e015      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	3328      	adds	r3, #40	@ 0x28
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fdd0 	bl	8008ba4 <RCCEx_PLL3_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800700a:	e00a      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10e      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800702a:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800702c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800702e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800703a:	4a02      	ldr	r2, [pc, #8]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800703c:	430b      	orrs	r3, r1
 800703e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007040:	e006      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800705c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007066:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800706a:	460b      	mov	r3, r1
 800706c:	4313      	orrs	r3, r2
 800706e:	d055      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007078:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800707c:	d033      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800707e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007082:	d82c      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007088:	d02f      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800708e:	d826      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007090:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007094:	d02b      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007096:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800709a:	d820      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a0:	d012      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80070a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a6:	d81a      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d022      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b0:	d115      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b6:	3308      	adds	r3, #8
 80070b8:	2100      	movs	r1, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fcc0 	bl	8008a40 <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80070c6:	e015      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	3328      	adds	r3, #40	@ 0x28
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fd67 	bl	8008ba4 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80070dc:	e00a      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e4:	e006      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070e6:	bf00      	nop
 80070e8:	e004      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070ea:	bf00      	nop
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070fc:	4ba1      	ldr	r3, [pc, #644]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007100:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800710c:	4a9d      	ldr	r2, [pc, #628]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800710e:	430b      	orrs	r3, r1
 8007110:	6593      	str	r3, [r2, #88]	@ 0x58
 8007112:	e003      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f002 0308 	and.w	r3, r2, #8
 8007128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007136:	460b      	mov	r3, r1
 8007138:	4313      	orrs	r3, r2
 800713a:	d01e      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007148:	d10c      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714e:	3328      	adds	r3, #40	@ 0x28
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fd26 	bl	8008ba4 <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007164:	4b87      	ldr	r3, [pc, #540]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007168:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800716c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007174:	4a83      	ldr	r2, [pc, #524]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007176:	430b      	orrs	r3, r1
 8007178:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f002 0310 	and.w	r3, r2, #16
 8007186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800718a:	2300      	movs	r3, #0
 800718c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007190:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d01e      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a6:	d10c      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	3328      	adds	r3, #40	@ 0x28
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fcf7 	bl	8008ba4 <RCCEx_PLL3_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071c2:	4b70      	ldr	r3, [pc, #448]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80071e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d03e      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007204:	d022      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800720a:	d81b      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007214:	d00b      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007216:	e015      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	3308      	adds	r3, #8
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fc0d 	bl	8008a40 <RCCEx_PLL2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	3328      	adds	r3, #40	@ 0x28
 8007234:	2102      	movs	r1, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fcb4 	bl	8008ba4 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800724c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007256:	4b4b      	ldr	r3, [pc, #300]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007266:	4a47      	ldr	r2, [pc, #284]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6593      	str	r3, [r2, #88]	@ 0x58
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007282:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007284:	2300      	movs	r3, #0
 8007286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d03b      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800729e:	d01f      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80072a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072a4:	d818      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072aa:	d003      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80072ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072b0:	d007      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80072b2:	e011      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b4:	4b33      	ldr	r3, [pc, #204]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	4a32      	ldr	r2, [pc, #200]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80072c0:	e00f      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	3328      	adds	r3, #40	@ 0x28
 80072c8:	2101      	movs	r1, #1
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fc6a 	bl	8008ba4 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80072d6:	e004      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072de:	e000      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80072e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ea:	4b26      	ldr	r3, [pc, #152]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	4a22      	ldr	r2, [pc, #136]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007300:	e003      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007316:	673b      	str	r3, [r7, #112]	@ 0x70
 8007318:	2300      	movs	r3, #0
 800731a:	677b      	str	r3, [r7, #116]	@ 0x74
 800731c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007320:	460b      	mov	r3, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d034      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007334:	d007      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007336:	e011      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007338:	4b12      	ldr	r3, [pc, #72]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	4a11      	ldr	r2, [pc, #68]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800733e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007344:	e00e      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fb76 	bl	8008a40 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800736e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007370:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737a:	4a02      	ldr	r2, [pc, #8]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800737c:	430b      	orrs	r3, r1
 800737e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007380:	e006      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007382:	bf00      	nop
 8007384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800739c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800739e:	2300      	movs	r3, #0
 80073a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80073a6:	460b      	mov	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d00c      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	3328      	adds	r3, #40	@ 0x28
 80073b2:	2102      	movs	r1, #2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fbf5 	bl	8008ba4 <RCCEx_PLL3_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80073d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80073d4:	2300      	movs	r3, #0
 80073d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80073d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80073dc:	460b      	mov	r3, r1
 80073de:	4313      	orrs	r3, r2
 80073e0:	d038      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ee:	d018      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80073f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f4:	d811      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80073f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073fa:	d014      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d80b      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d011      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740a:	d106      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4bc3      	ldr	r3, [pc, #780]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	4ac2      	ldr	r2, [pc, #776]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007418:	e008      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800742a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007434:	4bb9      	ldr	r3, [pc, #740]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007438:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007444:	4ab5      	ldr	r2, [pc, #724]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007446:	430b      	orrs	r3, r1
 8007448:	6553      	str	r3, [r2, #84]	@ 0x54
 800744a:	e003      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007460:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007462:	2300      	movs	r3, #0
 8007464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007466:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800746a:	460b      	mov	r3, r1
 800746c:	4313      	orrs	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007470:	4baa      	ldr	r3, [pc, #680]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747e:	4aa7      	ldr	r2, [pc, #668]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007490:	653b      	str	r3, [r7, #80]	@ 0x50
 8007492:	2300      	movs	r3, #0
 8007494:	657b      	str	r3, [r7, #84]	@ 0x54
 8007496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074a0:	4b9e      	ldr	r3, [pc, #632]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80074b0:	4a9a      	ldr	r2, [pc, #616]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074b2:	430b      	orrs	r3, r1
 80074b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80074c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074c4:	2300      	movs	r3, #0
 80074c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074d2:	4b92      	ldr	r3, [pc, #584]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	4a8e      	ldr	r2, [pc, #568]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074e2:	430b      	orrs	r3, r1
 80074e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80074f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80074f4:	2300      	movs	r3, #0
 80074f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80074fc:	460b      	mov	r3, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	d00e      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007502:	4b86      	ldr	r3, [pc, #536]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	4a85      	ldr	r2, [pc, #532]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007508:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800750c:	6113      	str	r3, [r2, #16]
 800750e:	4b83      	ldr	r3, [pc, #524]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007510:	6919      	ldr	r1, [r3, #16]
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007516:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800751a:	4a80      	ldr	r2, [pc, #512]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800751c:	430b      	orrs	r3, r1
 800751e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800752c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800752e:	2300      	movs	r3, #0
 8007530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007532:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007536:	460b      	mov	r3, r1
 8007538:	4313      	orrs	r3, r2
 800753a:	d009      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800753c:	4b77      	ldr	r3, [pc, #476]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800753e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007540:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754a:	4a74      	ldr	r2, [pc, #464]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800754c:	430b      	orrs	r3, r1
 800754e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800755c:	633b      	str	r3, [r7, #48]	@ 0x30
 800755e:	2300      	movs	r3, #0
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
 8007562:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d00a      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800756c:	4b6b      	ldr	r3, [pc, #428]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800757c:	4a67      	ldr	r2, [pc, #412]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800757e:	430b      	orrs	r3, r1
 8007580:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	2100      	movs	r1, #0
 800758c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007594:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007598:	460b      	mov	r3, r1
 800759a:	4313      	orrs	r3, r2
 800759c:	d011      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	3308      	adds	r3, #8
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fa4a 	bl	8008a40 <RCCEx_PLL2_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	2100      	movs	r1, #0
 80075cc:	6239      	str	r1, [r7, #32]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80075d8:	460b      	mov	r3, r1
 80075da:	4313      	orrs	r3, r2
 80075dc:	d011      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	3308      	adds	r3, #8
 80075e4:	2101      	movs	r1, #1
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 fa2a 	bl	8008a40 <RCCEx_PLL2_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	2100      	movs	r1, #0
 800760c:	61b9      	str	r1, [r7, #24]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	61fb      	str	r3, [r7, #28]
 8007614:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007618:	460b      	mov	r3, r1
 800761a:	4313      	orrs	r3, r2
 800761c:	d011      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	3308      	adds	r3, #8
 8007624:	2102      	movs	r1, #2
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fa0a 	bl	8008a40 <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800763e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	2100      	movs	r1, #0
 800764c:	6139      	str	r1, [r7, #16]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007658:	460b      	mov	r3, r1
 800765a:	4313      	orrs	r3, r2
 800765c:	d011      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007662:	3328      	adds	r3, #40	@ 0x28
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fa9c 	bl	8008ba4 <RCCEx_PLL3_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	2100      	movs	r1, #0
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007698:	460b      	mov	r3, r1
 800769a:	4313      	orrs	r3, r2
 800769c:	d011      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a2:	3328      	adds	r3, #40	@ 0x28
 80076a4:	2101      	movs	r1, #1
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 fa7c 	bl	8008ba4 <RCCEx_PLL3_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	2100      	movs	r1, #0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80076d8:	460b      	mov	r3, r1
 80076da:	4313      	orrs	r3, r2
 80076dc:	d011      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	3328      	adds	r3, #40	@ 0x28
 80076e4:	2102      	movs	r1, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fa5c 	bl	8008ba4 <RCCEx_PLL3_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007702:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
}
 8007710:	4618      	mov	r0, r3
 8007712:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007716:	46bd      	mov	sp, r7
 8007718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771c:	58024400 	.word	0x58024400

08007720 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b090      	sub	sp, #64	@ 0x40
 8007724:	af00      	add	r7, sp, #0
 8007726:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800772a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007732:	430b      	orrs	r3, r1
 8007734:	f040 8094 	bne.w	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007738:	4b9e      	ldr	r3, [pc, #632]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800773a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b04      	cmp	r3, #4
 8007746:	f200 8087 	bhi.w	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800774a:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007765 	.word	0x08007765
 8007754:	0800778d 	.word	0x0800778d
 8007758:	080077b5 	.word	0x080077b5
 800775c:	08007851 	.word	0x08007851
 8007760:	080077dd 	.word	0x080077dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007764:	4b93      	ldr	r3, [pc, #588]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007770:	d108      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007776:	4618      	mov	r0, r3
 8007778:	f001 f810 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007780:	f000 bd45 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007788:	f000 bd41 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800778c:	4b89      	ldr	r3, [pc, #548]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007798:	d108      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779a:	f107 0318 	add.w	r3, r7, #24
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fd54 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a8:	f000 bd31 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b0:	f000 bd2d 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077b4:	4b7f      	ldr	r3, [pc, #508]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c0:	d108      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c2:	f107 030c 	add.w	r3, r7, #12
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fe94 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d0:	f000 bd1d 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d8:	f000 bd19 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077dc:	4b75      	ldr	r3, [pc, #468]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077e6:	4b73      	ldr	r3, [pc, #460]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d10c      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80077f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077f8:	4b6e      	ldr	r3, [pc, #440]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	4a6d      	ldr	r2, [pc, #436]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800780a:	e01f      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800780c:	4b69      	ldr	r3, [pc, #420]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007818:	d106      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800781a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007822:	4b66      	ldr	r3, [pc, #408]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007826:	e011      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007828:	4b62      	ldr	r3, [pc, #392]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007834:	d106      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800783e:	4b60      	ldr	r3, [pc, #384]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007842:	e003      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007848:	f000 bce1 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800784c:	f000 bcdf 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007850:	4b5c      	ldr	r3, [pc, #368]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007854:	f000 bcdb 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785c:	f000 bcd7 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007868:	430b      	orrs	r3, r1
 800786a:	f040 80ad 	bne.w	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800786e:	4b51      	ldr	r3, [pc, #324]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007872:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007876:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800787e:	d056      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007886:	f200 8090 	bhi.w	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2bc0      	cmp	r3, #192	@ 0xc0
 800788e:	f000 8088 	beq.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	2bc0      	cmp	r3, #192	@ 0xc0
 8007896:	f200 8088 	bhi.w	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	2b80      	cmp	r3, #128	@ 0x80
 800789e:	d032      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	2b80      	cmp	r3, #128	@ 0x80
 80078a4:	f200 8081 	bhi.w	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	d014      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80078b4:	e079      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078b6:	4b3f      	ldr	r3, [pc, #252]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078c2:	d108      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 ff67 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d2:	f000 bc9c 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078da:	f000 bc98 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078de:	4b35      	ldr	r3, [pc, #212]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ea:	d108      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ec:	f107 0318 	add.w	r3, r7, #24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fcab 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078fa:	f000 bc88 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007902:	f000 bc84 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007906:	4b2b      	ldr	r3, [pc, #172]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007912:	d108      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fdeb 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007922:	f000 bc74 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792a:	f000 bc70 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800792e:	4b21      	ldr	r3, [pc, #132]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007932:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007938:	4b1e      	ldr	r3, [pc, #120]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b04      	cmp	r3, #4
 8007942:	d10c      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800794a:	4b1a      	ldr	r3, [pc, #104]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	08db      	lsrs	r3, r3, #3
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800795c:	e01f      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800795e:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800796a:	d106      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007972:	d102      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007974:	4b11      	ldr	r3, [pc, #68]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007978:	e011      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800797a:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007986:	d106      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007994:	e003      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800799a:	f000 bc38 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800799e:	f000 bc36 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079a2:	4b08      	ldr	r3, [pc, #32]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a6:	f000 bc32 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ae:	f000 bc2e 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079b2:	bf00      	nop
 80079b4:	58024400 	.word	0x58024400
 80079b8:	03d09000 	.word	0x03d09000
 80079bc:	003d0900 	.word	0x003d0900
 80079c0:	007a1200 	.word	0x007a1200
 80079c4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80079d0:	430b      	orrs	r3, r1
 80079d2:	f040 809c 	bne.w	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80079d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80079de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079e6:	d054      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079ee:	f200 808b 	bhi.w	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079f8:	f000 8083 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a02:	f200 8081 	bhi.w	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a0c:	d02f      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a14:	d878      	bhi.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007a24:	e070      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a26:	4b8a      	ldr	r3, [pc, #552]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a32:	d107      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 feaf 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a42:	e3e4      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e3e1      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a4a:	4b81      	ldr	r3, [pc, #516]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a58:	f107 0318 	add.w	r3, r7, #24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fbf5 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a66:	e3d2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e3cf      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a6e:	4b78      	ldr	r3, [pc, #480]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fd37 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8a:	e3c0      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e3bd      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a92:	4b6f      	ldr	r3, [pc, #444]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aae:	4b68      	ldr	r3, [pc, #416]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	4a66      	ldr	r2, [pc, #408]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac0:	e01e      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac2:	4b63      	ldr	r3, [pc, #396]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ace:	d106      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad6:	d102      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ad8:	4b5f      	ldr	r3, [pc, #380]	@ (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007adc:	e010      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ade:	4b5c      	ldr	r3, [pc, #368]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af2:	d102      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007af4:	4b59      	ldr	r3, [pc, #356]	@ (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007afe:	e386      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b00:	e385      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b02:	4b57      	ldr	r3, [pc, #348]	@ (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b06:	e382      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b0c:	e37f      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b12:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007b16:	430b      	orrs	r3, r1
 8007b18:	f040 80a7 	bne.w	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b20:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007b24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b2c:	d055      	beq.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b34:	f200 8096 	bhi.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b3e:	f000 8084 	beq.w	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b48:	f200 808c 	bhi.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b52:	d030      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b5a:	f200 8083 	bhi.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d004      	beq.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6a:	d012      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007b6c:	e07a      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b6e:	4b38      	ldr	r3, [pc, #224]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b7a:	d107      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fe0b 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b8a:	e340      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b90:	e33d      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b92:	4b2f      	ldr	r3, [pc, #188]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b9e:	d107      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba0:	f107 0318 	add.w	r3, r7, #24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fb51 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bae:	e32e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb4:	e32b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bb6:	4b26      	ldr	r3, [pc, #152]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc2:	d107      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bc4:	f107 030c 	add.w	r3, r7, #12
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fc93 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd2:	e31c      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e319      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bda:	4b1d      	ldr	r3, [pc, #116]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007be4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d10c      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bf6:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	08db      	lsrs	r3, r3, #3
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	4a14      	ldr	r2, [pc, #80]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c08:	e01e      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c0a:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c16:	d106      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c1e:	d102      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c20:	4b0d      	ldr	r3, [pc, #52]	@ (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c24:	e010      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c26:	4b0a      	ldr	r3, [pc, #40]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c32:	d106      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c3a:	d102      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c3c:	4b07      	ldr	r3, [pc, #28]	@ (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c40:	e002      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c46:	e2e2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c48:	e2e1      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c4a:	4b05      	ldr	r3, [pc, #20]	@ (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4e:	e2de      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c50:	58024400 	.word	0x58024400
 8007c54:	03d09000 	.word	0x03d09000
 8007c58:	003d0900 	.word	0x003d0900
 8007c5c:	007a1200 	.word	0x007a1200
 8007c60:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c68:	e2d1      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007c72:	430b      	orrs	r3, r1
 8007c74:	f040 809c 	bne.w	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007c78:	4b93      	ldr	r3, [pc, #588]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007c80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c88:	d054      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c90:	f200 808b 	bhi.w	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c9a:	f000 8083 	beq.w	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ca4:	f200 8081 	bhi.w	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cae:	d02f      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb6:	d878      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc4:	d012      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007cc6:	e070      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fd5e 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce4:	e293      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cea:	e290      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cec:	4b76      	ldr	r3, [pc, #472]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf8:	d107      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfa:	f107 0318 	add.w	r3, r7, #24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 faa4 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d08:	e281      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0e:	e27e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d10:	4b6d      	ldr	r3, [pc, #436]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1e:	f107 030c 	add.w	r3, r7, #12
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fbe6 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d2c:	e26f      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d32:	e26c      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d34:	4b64      	ldr	r3, [pc, #400]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d3e:	4b62      	ldr	r3, [pc, #392]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d50:	4b5d      	ldr	r3, [pc, #372]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d62:	e01e      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d64:	4b58      	ldr	r3, [pc, #352]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d70:	d106      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d78:	d102      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d7a:	4b55      	ldr	r3, [pc, #340]	@ (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7e:	e010      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d80:	4b51      	ldr	r3, [pc, #324]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d94:	d102      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d96:	4b4f      	ldr	r3, [pc, #316]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9a:	e002      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007da0:	e235      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007da2:	e234      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007da4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da8:	e231      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dae:	e22e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007db8:	430b      	orrs	r3, r1
 8007dba:	f040 808f 	bne.w	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007dbe:	4b42      	ldr	r3, [pc, #264]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dce:	d06b      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dd6:	d874      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dde:	d056      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007de6:	d86c      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dee:	d03b      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007df6:	d864      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dfe:	d021      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e06:	d85c      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e14:	d004      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007e16:	e054      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7fe fa4c 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e1e:	e1f6      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e20:	4b29      	ldr	r3, [pc, #164]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2e:	f107 0318 	add.w	r3, r7, #24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fa0a 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3c:	e1e7      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e42:	e1e4      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e44:	4b20      	ldr	r3, [pc, #128]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e52:	f107 030c 	add.w	r3, r7, #12
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb4c 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e60:	e1d5      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e66:	e1d2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e68:	4b17      	ldr	r3, [pc, #92]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d109      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e74:	4b14      	ldr	r3, [pc, #80]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	4a13      	ldr	r2, [pc, #76]	@ (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
 8007e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e86:	e1c2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8c:	e1bf      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea0:	e1b5      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea6:	e1b2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ea8:	4b07      	ldr	r3, [pc, #28]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007eb6:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eba:	e1a8      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec0:	e1a5      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec6:	e1a2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	03d09000 	.word	0x03d09000
 8007ed0:	003d0900 	.word	0x003d0900
 8007ed4:	007a1200 	.word	0x007a1200
 8007ed8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	d173      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ee8:	4b9c      	ldr	r3, [pc, #624]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef8:	d02f      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f00:	d863      	bhi.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007f10:	e05b      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f12:	4b92      	ldr	r3, [pc, #584]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f20:	f107 0318 	add.w	r3, r7, #24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f991 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2e:	e16e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f34:	e16b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f36:	4b89      	ldr	r3, [pc, #548]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f42:	d107      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fad3 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f52:	e15c      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f58:	e159      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f5a:	4b80      	ldr	r3, [pc, #512]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f64:	4b7d      	ldr	r3, [pc, #500]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d10c      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f76:	4b79      	ldr	r3, [pc, #484]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	4a77      	ldr	r2, [pc, #476]	@ (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f88:	e01e      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f8a:	4b74      	ldr	r3, [pc, #464]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	d106      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f9e:	d102      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fa0:	4b70      	ldr	r3, [pc, #448]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa4:	e010      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb2:	d106      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fba:	d102      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc0:	e002      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fc6:	e122      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fc8:	e121      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fce:	e11e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	d133      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fe4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff2:	d012      	beq.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ff4:	e023      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ff6:	4b59      	ldr	r3, [pc, #356]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008002:	d107      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fbc7 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800800e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008012:	e0fc      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008018:	e0f9      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800801a:	4b50      	ldr	r3, [pc, #320]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008026:	d107      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008028:	f107 0318 	add.w	r3, r7, #24
 800802c:	4618      	mov	r0, r3
 800802e:	f000 f90d 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008036:	e0ea      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803c:	e0e7      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008042:	e0e4      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008048:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800804c:	430b      	orrs	r3, r1
 800804e:	f040 808d 	bne.w	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008052:	4b42      	ldr	r3, [pc, #264]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008056:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800805a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008062:	d06b      	beq.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800806a:	d874      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008072:	d056      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807a:	d86c      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008082:	d03b      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800808a:	d864      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800808c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008092:	d021      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800809a:	d85c      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080a8:	d004      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80080aa:	e054      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080ac:	f000 f8b8 	bl	8008220 <HAL_RCCEx_GetD3PCLK1Freq>
 80080b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080b2:	e0ac      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b4:	4b29      	ldr	r3, [pc, #164]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c0:	d107      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c2:	f107 0318 	add.w	r3, r7, #24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f8c0 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d0:	e09d      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d6:	e09a      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080d8:	4b20      	ldr	r3, [pc, #128]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e4:	d107      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e6:	f107 030c 	add.w	r3, r7, #12
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fa02 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f4:	e08b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fa:	e088      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080fc:	4b17      	ldr	r3, [pc, #92]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b04      	cmp	r3, #4
 8008106:	d109      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008108:	4b14      	ldr	r3, [pc, #80]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	4a13      	ldr	r2, [pc, #76]	@ (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811a:	e078      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008120:	e075      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008122:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800812e:	d102      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008130:	4b0c      	ldr	r3, [pc, #48]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008134:	e06b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813a:	e068      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008148:	d102      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800814a:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	e05e      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e05b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815a:	e058      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800815c:	58024400 	.word	0x58024400
 8008160:	03d09000 	.word	0x03d09000
 8008164:	003d0900 	.word	0x003d0900
 8008168:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800816c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008170:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008174:	430b      	orrs	r3, r1
 8008176:	d148      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008178:	4b27      	ldr	r3, [pc, #156]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800817a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008188:	d02a      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008190:	d838      	bhi.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800819e:	d00d      	beq.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80081a0:	e030      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ae:	d102      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80081b0:	4b1a      	ldr	r3, [pc, #104]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b4:	e02b      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ba:	e028      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081bc:	4b16      	ldr	r3, [pc, #88]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081c8:	d107      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fae4 	bl	800879c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d8:	e019      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081de:	e016      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ec:	d107      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ee:	f107 0318 	add.w	r3, r7, #24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f82a 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081fc:	e007      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008202:	e004      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	e001      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800820e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008210:	4618      	mov	r0, r3
 8008212:	3740      	adds	r7, #64	@ 0x40
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	58024400 	.word	0x58024400
 800821c:	007a1200 	.word	0x007a1200

08008220 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008224:	f7fe f816 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8008228:	4602      	mov	r2, r0
 800822a:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	4904      	ldr	r1, [pc, #16]	@ (8008248 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008236:	5ccb      	ldrb	r3, [r1, r3]
 8008238:	f003 031f 	and.w	r3, r3, #31
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008240:	4618      	mov	r0, r3
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58024400 	.word	0x58024400
 8008248:	0801135c 	.word	0x0801135c

0800824c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	@ 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008254:	4ba1      	ldr	r3, [pc, #644]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800825e:	4b9f      	ldr	r3, [pc, #636]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008262:	0b1b      	lsrs	r3, r3, #12
 8008264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008268:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800826a:	4b9c      	ldr	r3, [pc, #624]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	091b      	lsrs	r3, r3, #4
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008276:	4b99      	ldr	r3, [pc, #612]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827a:	08db      	lsrs	r3, r3, #3
 800827c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	fb02 f303 	mul.w	r3, r2, r3
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8111 	beq.w	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f000 8083 	beq.w	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	f200 80a1 	bhi.w	80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d056      	beq.n	8008364 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082b6:	e099      	b.n	80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b8:	4b88      	ldr	r3, [pc, #544]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d02d      	beq.n	8008320 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c4:	4b85      	ldr	r3, [pc, #532]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	08db      	lsrs	r3, r3, #3
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	4a84      	ldr	r2, [pc, #528]	@ (80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
 80082d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ee:	4b7b      	ldr	r3, [pc, #492]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008302:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800831e:	e087      	b.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800832e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008332:	4b6a      	ldr	r3, [pc, #424]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008342:	ed97 6a03 	vldr	s12, [r7, #12]
 8008346:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008362:	e065      	b.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b59      	ldr	r3, [pc, #356]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a03 	vldr	s12, [r7, #12]
 800838a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083a6:	e043      	b.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80084f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ba:	4b48      	ldr	r3, [pc, #288]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ea:	e021      	b.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b37      	ldr	r3, [pc, #220]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800842e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008430:	4b2a      	ldr	r3, [pc, #168]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008434:	0a5b      	lsrs	r3, r3, #9
 8008436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800844a:	edd7 6a07 	vldr	s13, [r7, #28]
 800844e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008456:	ee17 2a90 	vmov	r2, s15
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800845e:	4b1f      	ldr	r3, [pc, #124]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008470:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008478:	edd7 6a07 	vldr	s13, [r7, #28]
 800847c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008484:	ee17 2a90 	vmov	r2, s15
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800848c:	4b13      	ldr	r3, [pc, #76]	@ (80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008490:	0e1b      	lsrs	r3, r3, #24
 8008492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b2:	ee17 2a90 	vmov	r2, s15
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084ba:	e008      	b.n	80084ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	609a      	str	r2, [r3, #8]
}
 80084ce:	bf00      	nop
 80084d0:	3724      	adds	r7, #36	@ 0x24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	58024400 	.word	0x58024400
 80084e0:	03d09000 	.word	0x03d09000
 80084e4:	46000000 	.word	0x46000000
 80084e8:	4c742400 	.word	0x4c742400
 80084ec:	4a742400 	.word	0x4a742400
 80084f0:	4af42400 	.word	0x4af42400

080084f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b089      	sub	sp, #36	@ 0x24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008506:	4b9f      	ldr	r3, [pc, #636]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	0d1b      	lsrs	r3, r3, #20
 800850c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008510:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008512:	4b9c      	ldr	r3, [pc, #624]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800851e:	4b99      	ldr	r3, [pc, #612]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8111 	beq.w	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b02      	cmp	r3, #2
 8008546:	f000 8083 	beq.w	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b02      	cmp	r3, #2
 800854e:	f200 80a1 	bhi.w	8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d056      	beq.n	800860c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800855e:	e099      	b.n	8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008560:	4b88      	ldr	r3, [pc, #544]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02d      	beq.n	80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800856c:	4b85      	ldr	r3, [pc, #532]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	4a84      	ldr	r2, [pc, #528]	@ (8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b7b      	ldr	r3, [pc, #492]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085c6:	e087      	b.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b6a      	ldr	r3, [pc, #424]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860a:	e065      	b.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b59      	ldr	r3, [pc, #356]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800864e:	e043      	b.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b48      	ldr	r3, [pc, #288]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008692:	e021      	b.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b37      	ldr	r3, [pc, #220]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086dc:	0a5b      	lsrs	r3, r3, #9
 80086de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086fe:	ee17 2a90 	vmov	r2, s15
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008706:	4b1f      	ldr	r3, [pc, #124]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008718:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800871c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008720:	edd7 6a07 	vldr	s13, [r7, #28]
 8008724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872c:	ee17 2a90 	vmov	r2, s15
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008734:	4b13      	ldr	r3, [pc, #76]	@ (8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800874a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800874e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875a:	ee17 2a90 	vmov	r2, s15
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008762:	e008      	b.n	8008776 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]
}
 8008776:	bf00      	nop
 8008778:	3724      	adds	r7, #36	@ 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	58024400 	.word	0x58024400
 8008788:	03d09000 	.word	0x03d09000
 800878c:	46000000 	.word	0x46000000
 8008790:	4c742400 	.word	0x4c742400
 8008794:	4a742400 	.word	0x4a742400
 8008798:	4af42400 	.word	0x4af42400

0800879c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	@ 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a4:	4ba0      	ldr	r3, [pc, #640]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087ae:	4b9e      	ldr	r3, [pc, #632]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	091b      	lsrs	r3, r3, #4
 80087b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087ba:	4b9b      	ldr	r3, [pc, #620]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087c4:	4b98      	ldr	r3, [pc, #608]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c8:	08db      	lsrs	r3, r3, #3
 80087ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8111 	beq.w	8008a0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	f000 8083 	beq.w	80088f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	f200 80a1 	bhi.w	800893a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d056      	beq.n	80088b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008804:	e099      	b.n	800893a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008806:	4b88      	ldr	r3, [pc, #544]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02d      	beq.n	800886e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008812:	4b85      	ldr	r3, [pc, #532]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	4a83      	ldr	r2, [pc, #524]	@ (8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883c:	4b7a      	ldr	r3, [pc, #488]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008850:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008868:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800886c:	e087      	b.n	800897e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008878:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008a34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800887c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008880:	4b69      	ldr	r3, [pc, #420]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008890:	ed97 6a03 	vldr	s12, [r7, #12]
 8008894:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b0:	e065      	b.n	800897e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008a38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80088c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c4:	4b58      	ldr	r3, [pc, #352]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f4:	e043      	b.n	800897e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008900:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008908:	4b47      	ldr	r3, [pc, #284]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008918:	ed97 6a03 	vldr	s12, [r7, #12]
 800891c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008938:	e021      	b.n	800897e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008944:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008a34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894c:	4b36      	ldr	r3, [pc, #216]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008960:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800897e:	4b2a      	ldr	r3, [pc, #168]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	0a5b      	lsrs	r3, r3, #9
 8008984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008998:	edd7 6a07 	vldr	s13, [r7, #28]
 800899c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a4:	ee17 2a90 	vmov	r2, s15
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80089ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b0:	0c1b      	lsrs	r3, r3, #16
 80089b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d2:	ee17 2a90 	vmov	r2, s15
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80089da:	4b13      	ldr	r3, [pc, #76]	@ (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	0e1b      	lsrs	r3, r3, #24
 80089e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a00:	ee17 2a90 	vmov	r2, s15
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a08:	e008      	b.n	8008a1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3724      	adds	r7, #36	@ 0x24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	03d09000 	.word	0x03d09000
 8008a30:	46000000 	.word	0x46000000
 8008a34:	4c742400 	.word	0x4c742400
 8008a38:	4a742400 	.word	0x4a742400
 8008a3c:	4af42400 	.word	0x4af42400

08008a40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a4e:	4b53      	ldr	r3, [pc, #332]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d101      	bne.n	8008a5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e099      	b.n	8008b92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a4e      	ldr	r2, [pc, #312]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008a64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6a:	f7f8 ff39 	bl	80018e0 <HAL_GetTick>
 8008a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a70:	e008      	b.n	8008a84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a72:	f7f8 ff35 	bl	80018e0 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e086      	b.n	8008b92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a84:	4b45      	ldr	r3, [pc, #276]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f0      	bne.n	8008a72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a90:	4b42      	ldr	r3, [pc, #264]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	493f      	ldr	r1, [pc, #252]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	025b      	lsls	r3, r3, #9
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ad4:	4931      	ldr	r1, [pc, #196]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ada:	4b30      	ldr	r3, [pc, #192]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ade:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	492d      	ldr	r1, [pc, #180]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008aec:	4b2b      	ldr	r3, [pc, #172]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	f023 0220 	bic.w	r2, r3, #32
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	4928      	ldr	r1, [pc, #160]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008afe:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	4a26      	ldr	r2, [pc, #152]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b0a:	4b24      	ldr	r3, [pc, #144]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ba0 <RCCEx_PLL2_Config+0x160>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	69d2      	ldr	r2, [r2, #28]
 8008b16:	00d2      	lsls	r2, r2, #3
 8008b18:	4920      	ldr	r1, [pc, #128]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	4a1e      	ldr	r2, [pc, #120]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b24:	f043 0310 	orr.w	r3, r3, #16
 8008b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b30:	4b1a      	ldr	r3, [pc, #104]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b34:	4a19      	ldr	r2, [pc, #100]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b3c:	e00f      	b.n	8008b5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d106      	bne.n	8008b52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b44:	4b15      	ldr	r3, [pc, #84]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	4a14      	ldr	r2, [pc, #80]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b50:	e005      	b.n	8008b5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b52:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	4a11      	ldr	r2, [pc, #68]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a0e      	ldr	r2, [pc, #56]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6a:	f7f8 feb9 	bl	80018e0 <HAL_GetTick>
 8008b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b70:	e008      	b.n	8008b84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b72:	f7f8 feb5 	bl	80018e0 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e006      	b.n	8008b92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b84:	4b05      	ldr	r3, [pc, #20]	@ (8008b9c <RCCEx_PLL2_Config+0x15c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0f0      	beq.n	8008b72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	58024400 	.word	0x58024400
 8008ba0:	ffff0007 	.word	0xffff0007

08008ba4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bb2:	4b53      	ldr	r3, [pc, #332]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d101      	bne.n	8008bc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e099      	b.n	8008cf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bce:	f7f8 fe87 	bl	80018e0 <HAL_GetTick>
 8008bd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd4:	e008      	b.n	8008be8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bd6:	f7f8 fe83 	bl	80018e0 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d901      	bls.n	8008be8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e086      	b.n	8008cf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008be8:	4b45      	ldr	r3, [pc, #276]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1f0      	bne.n	8008bd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bf4:	4b42      	ldr	r3, [pc, #264]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	051b      	lsls	r3, r3, #20
 8008c02:	493f      	ldr	r1, [pc, #252]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	025b      	lsls	r3, r3, #9
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	041b      	lsls	r3, r3, #16
 8008c26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	061b      	lsls	r3, r3, #24
 8008c34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c38:	4931      	ldr	r1, [pc, #196]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c3e:	4b30      	ldr	r3, [pc, #192]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	492d      	ldr	r1, [pc, #180]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c50:	4b2b      	ldr	r3, [pc, #172]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	4928      	ldr	r1, [pc, #160]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c62:	4b27      	ldr	r3, [pc, #156]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	4a26      	ldr	r2, [pc, #152]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c6e:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c72:	4b24      	ldr	r3, [pc, #144]	@ (8008d04 <RCCEx_PLL3_Config+0x160>)
 8008c74:	4013      	ands	r3, r2
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	69d2      	ldr	r2, [r2, #28]
 8008c7a:	00d2      	lsls	r2, r2, #3
 8008c7c:	4920      	ldr	r1, [pc, #128]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c82:	4b1f      	ldr	r3, [pc, #124]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c86:	4a1e      	ldr	r2, [pc, #120]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c94:	4b1a      	ldr	r3, [pc, #104]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	4a19      	ldr	r2, [pc, #100]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ca0:	e00f      	b.n	8008cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d106      	bne.n	8008cb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ca8:	4b15      	ldr	r3, [pc, #84]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cac:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008cb4:	e005      	b.n	8008cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cb6:	4b12      	ldr	r3, [pc, #72]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	4a11      	ldr	r2, [pc, #68]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cce:	f7f8 fe07 	bl	80018e0 <HAL_GetTick>
 8008cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cd6:	f7f8 fe03 	bl	80018e0 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e006      	b.n	8008cf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ce8:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <RCCEx_PLL3_Config+0x15c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	58024400 	.word	0x58024400
 8008d04:	ffff0007 	.word	0xffff0007

08008d08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	@ 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e075      	b.n	8008e06 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7f8 fa47 	bl	80011c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2204      	movs	r2, #4
 8008d36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f868 	bl	8008e10 <HAL_SD_InitCard>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e05d      	b.n	8008e06 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008d4a:	f107 0308 	add.w	r3, r7, #8
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fdaf 	bl	80098b4 <HAL_SD_GetCardStatus>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e052      	b.n	8008e06 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008d60:	7e3b      	ldrb	r3, [r7, #24]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008d66:	7e7b      	ldrb	r3, [r7, #25]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d10a      	bne.n	8008d8a <HAL_SD_Init+0x82>
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <HAL_SD_Init+0x78>
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d86:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d88:	e00b      	b.n	8008da2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d104      	bne.n	8008d9c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d98:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d9a:	e002      	b.n	8008da2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fe6d 	bl	8009a88 <HAL_SD_ConfigWideBusOperation>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e026      	b.n	8008e06 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008db8:	f7f8 fd92 	bl	80018e0 <HAL_GetTick>
 8008dbc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008dbe:	e011      	b.n	8008de4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008dc0:	f7f8 fd8e 	bl	80018e0 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d109      	bne.n	8008de4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dd6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e010      	b.n	8008e06 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 ff61 	bl	8009cac <HAL_SD_GetCardState>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d1e7      	bne.n	8008dc0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3728      	adds	r7, #40	@ 0x28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e10:	b590      	push	{r4, r7, lr}
 8008e12:	b08d      	sub	sp, #52	@ 0x34
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008e28:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	f7fe fc76 	bl	8007720 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e34:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d109      	bne.n	8008e50 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e070      	b.n	8008f32 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	4a39      	ldr	r2, [pc, #228]	@ (8008f3c <HAL_SD_InitCard+0x12c>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681c      	ldr	r4, [r3, #0]
 8008e62:	466a      	mov	r2, sp
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e76:	4620      	mov	r0, r4
 8008e78:	f003 fb82 	bl	800c580 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f003 fbc5 	bl	800c610 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008e9e:	4a28      	ldr	r2, [pc, #160]	@ (8008f40 <HAL_SD_InitCard+0x130>)
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f8 fd25 	bl	80018f8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 ffea 	bl	8009e88 <SD_PowerON>
 8008eb4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e02e      	b.n	8008f32 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 ff09 	bl	8009cec <SD_InitCard>
 8008eda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e01b      	b.n	8008f32 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f02:	4618      	mov	r0, r3
 8008f04:	f003 fc1a 	bl	800c73c <SDMMC_CmdBlockLength>
 8008f08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a0b      	ldr	r2, [pc, #44]	@ (8008f44 <HAL_SD_InitCard+0x134>)
 8008f16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e000      	b.n	8008f32 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	372c      	adds	r7, #44	@ 0x2c
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	014f8b59 	.word	0x014f8b59
 8008f40:	00012110 	.word	0x00012110
 8008f44:	1fe00fff 	.word	0x1fe00fff

08008f48 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	@ 0x30
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d107      	bne.n	8008f70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e08d      	b.n	800908c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f040 8086 	bne.w	800908a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	441a      	add	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d907      	bls.n	8008fa2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f96:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e074      	b.n	800908c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	025a      	lsls	r2, r3, #9
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d002      	beq.n	8008fce <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8008fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fca:	025b      	lsls	r3, r3, #9
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	025b      	lsls	r3, r3, #9
 8008fd8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008fda:	2390      	movs	r3, #144	@ 0x90
 8008fdc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f107 0210 	add.w	r2, r7, #16
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f003 fb75 	bl	800c6e4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009008:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2201      	movs	r2, #1
 8009018:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d90a      	bls.n	8009036 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2282      	movs	r2, #130	@ 0x82
 8009024:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800902c:	4618      	mov	r0, r3
 800902e:	f003 fbcb 	bl	800c7c8 <SDMMC_CmdReadMultiBlock>
 8009032:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009034:	e009      	b.n	800904a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2281      	movs	r2, #129	@ 0x81
 800903a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009042:	4618      	mov	r0, r3
 8009044:	f003 fb9d 	bl	800c782 <SDMMC_CmdReadSingleBlock>
 8009048:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800904a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d012      	beq.n	8009076 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a0f      	ldr	r2, [pc, #60]	@ (8009094 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009056:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800905c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905e:	431a      	orrs	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e00a      	b.n	800908c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009084:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	e000      	b.n	800908c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800908a:	2302      	movs	r3, #2
  }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	@ 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	1fe00fff 	.word	0x1fe00fff

08009098 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08c      	sub	sp, #48	@ 0x30
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d107      	bne.n	80090c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e08d      	b.n	80091dc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	f040 8086 	bne.w	80091da <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	441a      	add	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090de:	429a      	cmp	r2, r3
 80090e0:	d907      	bls.n	80090f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e074      	b.n	80091dc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2203      	movs	r2, #3
 80090f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2200      	movs	r2, #0
 8009100:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	025a      	lsls	r2, r3, #9
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009114:	2b01      	cmp	r3, #1
 8009116:	d002      	beq.n	800911e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8009118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911a:	025b      	lsls	r3, r3, #9
 800911c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	025b      	lsls	r3, r3, #9
 8009128:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800912a:	2390      	movs	r3, #144	@ 0x90
 800912c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009132:	2300      	movs	r3, #0
 8009134:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f107 0210 	add.w	r2, r7, #16
 8009142:	4611      	mov	r1, r2
 8009144:	4618      	mov	r0, r3
 8009146:	f003 facd 	bl	800c6e4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009158:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2201      	movs	r2, #1
 8009168:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d90a      	bls.n	8009186 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	22a0      	movs	r2, #160	@ 0xa0
 8009174:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800917c:	4618      	mov	r0, r3
 800917e:	f003 fb69 	bl	800c854 <SDMMC_CmdWriteMultiBlock>
 8009182:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009184:	e009      	b.n	800919a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2290      	movs	r2, #144	@ 0x90
 800918a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009192:	4618      	mov	r0, r3
 8009194:	f003 fb3b 	bl	800c80e <SDMMC_CmdWriteSingleBlock>
 8009198:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800919a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d012      	beq.n	80091c6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a0f      	ldr	r2, [pc, #60]	@ (80091e4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80091a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	431a      	orrs	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e00a      	b.n	80091dc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80091d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	e000      	b.n	80091dc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80091da:	2302      	movs	r3, #2
  }
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3730      	adds	r7, #48	@ 0x30
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	1fe00fff 	.word	0x1fe00fff

080091e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_SD_IRQHandler+0x2e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f003 0308 	and.w	r3, r3, #8
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f926 	bl	800a460 <SD_Read_IT>
 8009214:	e19a      	b.n	800954c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800921c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 80ac 	beq.w	800937e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800922e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b59      	ldr	r3, [pc, #356]	@ (80093a0 <HAL_SD_IRQHandler+0x1b8>)
 800923c:	400b      	ands	r3, r1
 800923e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800924e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800925e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d038      	beq.n	80092dc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <HAL_SD_IRQHandler+0x96>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d011      	beq.n	80092a2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f003 fb0a 	bl	800c89c <SDMMC_CmdStopTransfer>
 8009288:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d008      	beq.n	80092a2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f95b 	bl	8009558 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a3f      	ldr	r2, [pc, #252]	@ (80093a4 <HAL_SD_IRQHandler+0x1bc>)
 80092a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d104      	bne.n	80092cc <HAL_SD_IRQHandler+0xe4>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f003 ffbd 	bl	800d24c <HAL_SD_RxCpltCallback>
 80092d2:	e13b      	b.n	800954c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f003 ffaf 	bl	800d238 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092da:	e137      	b.n	800954c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8132 	beq.w	800954c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2200      	movs	r2, #0
 80092ee:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2200      	movs	r2, #0
 80092fe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <HAL_SD_IRQHandler+0x12c>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f003 fabf 	bl	800c89c <SDMMC_CmdStopTransfer>
 800931e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f910 	bl	8009558 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <HAL_SD_IRQHandler+0x172>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f003 ff6c 	bl	800d238 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d105      	bne.n	8009376 <HAL_SD_IRQHandler+0x18e>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 80eb 	beq.w	800954c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f003 ff68 	bl	800d24c <HAL_SD_RxCpltCallback>
}
 800937c:	e0e6      	b.n	800954c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00d      	beq.n	80093a8 <HAL_SD_IRQHandler+0x1c0>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f8a8 	bl	800a4ec <SD_Write_IT>
 800939c:	e0d6      	b.n	800954c <HAL_SD_IRQHandler+0x364>
 800939e:	bf00      	nop
 80093a0:	ffff3ec5 	.word	0xffff3ec5
 80093a4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ae:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 809d 	beq.w	80094f2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ca:	f043 0202 	orr.w	r2, r3, #2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e4:	f043 0208 	orr.w	r2, r3, #8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d005      	beq.n	8009406 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fe:	f043 0220 	orr.w	r2, r3, #32
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009418:	f043 0210 	orr.w	r2, r3, #16
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a4b      	ldr	r2, [pc, #300]	@ (8009554 <HAL_SD_IRQHandler+0x36c>)
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009436:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009446:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009456:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009466:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f003 fa15 	bl	800c89c <SDMMC_CmdStopTransfer>
 8009472:	4602      	mov	r2, r0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800948c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009496:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f851 	bl	8009558 <HAL_SD_ErrorCallback>
}
 80094b6:	e049      	b.n	800954c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d044      	beq.n	800954c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d040      	beq.n	800954c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80094d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f834 	bl	8009558 <HAL_SD_ErrorCallback>
}
 80094f0:	e02c      	b.n	800954c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d025      	beq.n	800954c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 f84a 	bl	800a5bc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009528:	e010      	b.n	800954c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 f832 	bl	800a594 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009530:	e00c      	b.n	800954c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f833 	bl	800a5a8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009542:	e003      	b.n	800954c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f81b 	bl	800a580 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800954a:	e7ff      	b.n	800954c <HAL_SD_IRQHandler+0x364>
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	18000f3a 	.word	0x18000f3a

08009558 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800957a:	0f9b      	lsrs	r3, r3, #30
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009586:	0e9b      	lsrs	r3, r3, #26
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009598:	0e1b      	lsrs	r3, r3, #24
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095cc:	0d1b      	lsrs	r3, r3, #20
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ea:	0bdb      	lsrs	r3, r3, #15
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fc:	0b9b      	lsrs	r3, r3, #14
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800960e:	0b5b      	lsrs	r3, r3, #13
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	b2da      	uxtb	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009620:	0b1b      	lsrs	r3, r3, #12
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	b2da      	uxtb	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d163      	bne.n	8009704 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009640:	009a      	lsls	r2, r3, #2
 8009642:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009646:	4013      	ands	r3, r2
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800964c:	0f92      	lsrs	r2, r2, #30
 800964e:	431a      	orrs	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009658:	0edb      	lsrs	r3, r3, #27
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	b2da      	uxtb	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800967c:	0d5b      	lsrs	r3, r3, #21
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	b2da      	uxtb	r2, r3
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800968e:	0c9b      	lsrs	r3, r3, #18
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096a0:	0bdb      	lsrs	r3, r3, #15
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	7e1b      	ldrb	r3, [r3, #24]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	3302      	adds	r3, #2
 80096c4:	2201      	movs	r2, #1
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80096ce:	fb03 f202 	mul.w	r2, r3, r2
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	7a1b      	ldrb	r3, [r3, #8]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	2201      	movs	r2, #1
 80096e2:	409a      	lsls	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80096f0:	0a52      	lsrs	r2, r2, #9
 80096f2:	fb03 f202 	mul.w	r2, r3, r2
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009700:	655a      	str	r2, [r3, #84]	@ 0x54
 8009702:	e031      	b.n	8009768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009708:	2b01      	cmp	r3, #1
 800970a:	d11d      	bne.n	8009748 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800971a:	0c1b      	lsrs	r3, r3, #16
 800971c:	431a      	orrs	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	029a      	lsls	r2, r3, #10
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800973c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	655a      	str	r2, [r3, #84]	@ 0x54
 8009746:	e00f      	b.n	8009768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a58      	ldr	r2, [pc, #352]	@ (80098b0 <HAL_SD_GetCardCSD+0x344>)
 800974e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009754:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e09d      	b.n	80098a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800976c:	0b9b      	lsrs	r3, r3, #14
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800977e:	09db      	lsrs	r3, r3, #7
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009796:	b2da      	uxtb	r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097a0:	0fdb      	lsrs	r3, r3, #31
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097ac:	0f5b      	lsrs	r3, r3, #29
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097be:	0e9b      	lsrs	r3, r3, #26
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097d0:	0d9b      	lsrs	r3, r3, #22
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097e2:	0d5b      	lsrs	r3, r3, #21
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097fe:	0c1b      	lsrs	r3, r3, #16
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009812:	0bdb      	lsrs	r3, r3, #15
 8009814:	b2db      	uxtb	r3, r3
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009826:	0b9b      	lsrs	r3, r3, #14
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	b2da      	uxtb	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800983a:	0b5b      	lsrs	r3, r3, #13
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800984e:	0b1b      	lsrs	r3, r3, #12
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009862:	0a9b      	lsrs	r3, r3, #10
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	b2da      	uxtb	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	1fe00fff 	.word	0x1fe00fff

080098b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b094      	sub	sp, #80	@ 0x50
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d101      	bne.n	80098d4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e0a7      	b.n	8009a24 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb62 	bl	8009fa4 <SD_SendSDStatus>
 80098e0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80098e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d011      	beq.n	800990c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a4f      	ldr	r2, [pc, #316]	@ (8009a2c <HAL_SD_GetCardStatus+0x178>)
 80098ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800990a:	e070      	b.n	80099ee <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	099b      	lsrs	r3, r3, #6
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	b29b      	uxth	r3, r3
 8009932:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009936:	b29a      	uxth	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	0e1b      	lsrs	r3, r3, #24
 800993c:	b29b      	uxth	r3, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	061a      	lsls	r2, r3, #24
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009952:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	0a1b      	lsrs	r3, r3, #8
 8009958:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800995c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	0e1b      	lsrs	r3, r3, #24
 8009962:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	b2da      	uxtb	r2, r3
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	0d1b      	lsrs	r3, r3, #20
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	b2da      	uxtb	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	0c1b      	lsrs	r3, r3, #16
 800998e:	b29b      	uxth	r3, r3
 8009990:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009994:	b29a      	uxth	r2, r3
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	b29b      	uxth	r3, r3
 800999a:	b2db      	uxtb	r3, r3
 800999c:	b29b      	uxth	r3, r3
 800999e:	4313      	orrs	r3, r2
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	0a9b      	lsrs	r3, r3, #10
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f003 0303 	and.w	r3, r3, #3
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	091b      	lsrs	r3, r3, #4
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 fea0 	bl	800c73c <SDMMC_CmdBlockLength>
 80099fc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80099fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00d      	beq.n	8009a20 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a08      	ldr	r2, [pc, #32]	@ (8009a2c <HAL_SD_GetCardStatus+0x178>)
 8009a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a10:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8009a20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3750      	adds	r7, #80	@ 0x50
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	1fe00fff 	.word	0x1fe00fff

08009a30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b08d      	sub	sp, #52	@ 0x34
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2203      	movs	r2, #3
 8009a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d02e      	beq.n	8009b06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aae:	d106      	bne.n	8009abe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	635a      	str	r2, [r3, #52]	@ 0x34
 8009abc:	e029      	b.n	8009b12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac4:	d10a      	bne.n	8009adc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fb64 	bl	800a194 <SD_WideBus_Enable>
 8009acc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ada:	e01a      	b.n	8009b12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fba1 	bl	800a22a <SD_WideBus_Disable>
 8009ae8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8009af6:	e00c      	b.n	8009b12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b04:	e005      	b.n	8009b12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8009c9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009b20:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b28:	e096      	b.n	8009c58 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009b2a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009b2e:	f04f 0100 	mov.w	r1, #0
 8009b32:	f7fd fdf5 	bl	8007720 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b36:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 8083 	beq.w	8009c46 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4950      	ldr	r1, [pc, #320]	@ (8009ca0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8009b62:	0e1b      	lsrs	r3, r3, #24
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d303      	bcc.n	8009b70 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	e05a      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b78:	d103      	bne.n	8009b82 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	61bb      	str	r3, [r7, #24]
 8009b80:	e051      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8a:	d126      	bne.n	8009bda <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10e      	bne.n	8009bb2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	4a43      	ldr	r2, [pc, #268]	@ (8009ca4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d906      	bls.n	8009baa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4a40      	ldr	r2, [pc, #256]	@ (8009ca0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba4:	0e5b      	lsrs	r3, r3, #25
 8009ba6:	61bb      	str	r3, [r7, #24]
 8009ba8:	e03d      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	e039      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbe:	4a39      	ldr	r2, [pc, #228]	@ (8009ca4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d906      	bls.n	8009bd2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	4a36      	ldr	r2, [pc, #216]	@ (8009ca0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bcc:	0e5b      	lsrs	r3, r3, #25
 8009bce:	61bb      	str	r3, [r7, #24]
 8009bd0:	e029      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e025      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10e      	bne.n	8009c00 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4a30      	ldr	r2, [pc, #192]	@ (8009ca8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d906      	bls.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4a2c      	ldr	r2, [pc, #176]	@ (8009ca0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	0e1b      	lsrs	r3, r3, #24
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	e016      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	61bb      	str	r3, [r7, #24]
 8009bfe:	e012      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0c:	4a26      	ldr	r2, [pc, #152]	@ (8009ca8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d906      	bls.n	8009c20 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4a22      	ldr	r2, [pc, #136]	@ (8009ca0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009c16:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1a:	0e1b      	lsrs	r3, r3, #24
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	e002      	b.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	466a      	mov	r2, sp
 8009c2c:	f107 0314 	add.w	r3, r7, #20
 8009c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c34:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f002 fc9e 	bl	800c580 <SDMMC_Init>
 8009c44:	e008      	b.n	8009c58 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 fd6b 	bl	800c73c <SDMMC_CmdBlockLength>
 8009c66:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00c      	beq.n	8009c88 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a0a      	ldr	r2, [pc, #40]	@ (8009c9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009c74:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	372c      	adds	r7, #44	@ 0x2c
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd90      	pop	{r4, r7, pc}
 8009c9c:	1fe00fff 	.word	0x1fe00fff
 8009ca0:	55e63b89 	.word	0x55e63b89
 8009ca4:	02faf080 	.word	0x02faf080
 8009ca8:	017d7840 	.word	0x017d7840

08009cac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa40 	bl	800a144 <SD_SendStatus>
 8009cc4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	0a5b      	lsrs	r3, r3, #9
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ce2:	693b      	ldr	r3, [r7, #16]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b090      	sub	sp, #64	@ 0x40
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009cf8:	f7f7 fdf2 	bl	80018e0 <HAL_GetTick>
 8009cfc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fc95 	bl	800c632 <SDMMC_GetPowerState>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009d12:	e0b5      	b.n	8009e80 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d02e      	beq.n	8009d7a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 fee0 	bl	800cae6 <SDMMC_CmdSendCID>
 8009d26:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <SD_InitCard+0x46>
    {
      return errorstate;
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	e0a6      	b.n	8009e80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2100      	movs	r1, #0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fcc0 	bl	800c6be <SDMMC_GetResponse>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2104      	movs	r1, #4
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f002 fcb7 	bl	800c6be <SDMMC_GetResponse>
 8009d50:	4602      	mov	r2, r0
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2108      	movs	r1, #8
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f002 fcae 	bl	800c6be <SDMMC_GetResponse>
 8009d62:	4602      	mov	r2, r0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	210c      	movs	r1, #12
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f002 fca5 	bl	800c6be <SDMMC_GetResponse>
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d01d      	beq.n	8009dbe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009d82:	e019      	b.n	8009db8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f107 020a 	add.w	r2, r7, #10
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 fee8 	bl	800cb64 <SDMMC_CmdSetRelAdd>
 8009d94:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9e:	e06f      	b.n	8009e80 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009da0:	f7f7 fd9e 	bl	80018e0 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d902      	bls.n	8009db8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009db2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009db6:	e063      	b.n	8009e80 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009db8:	897b      	ldrh	r3, [r7, #10]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0e2      	beq.n	8009d84 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d036      	beq.n	8009e34 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009dc6:	897b      	ldrh	r3, [r7, #10]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f002 fea2 	bl	800cb24 <SDMMC_CmdSendCSD>
 8009de0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <SD_InitCard+0x100>
    {
      return errorstate;
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	e049      	b.n	8009e80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2100      	movs	r1, #0
 8009df2:	4618      	mov	r0, r3
 8009df4:	f002 fc63 	bl	800c6be <SDMMC_GetResponse>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2104      	movs	r1, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f002 fc5a 	bl	800c6be <SDMMC_GetResponse>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2108      	movs	r1, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f002 fc51 	bl	800c6be <SDMMC_GetResponse>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	210c      	movs	r1, #12
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f002 fc48 	bl	800c6be <SDMMC_GetResponse>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2104      	movs	r1, #4
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f002 fc3f 	bl	800c6be <SDMMC_GetResponse>
 8009e40:	4603      	mov	r3, r0
 8009e42:	0d1a      	lsrs	r2, r3, #20
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e48:	f107 030c 	add.w	r3, r7, #12
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fb8c 	bl	800956c <HAL_SD_GetCardCSD>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009e5e:	e00f      	b.n	8009e80 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e68:	041b      	lsls	r3, r3, #16
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f002 fd51 	bl	800c914 <SDMMC_CmdSelDesel>
 8009e72:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <SD_InitCard+0x192>
  {
    return errorstate;
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7c:	e000      	b.n	8009e80 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3740      	adds	r7, #64	@ 0x40
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fd5a 	bl	800c95a <SDMMC_CmdGoIdleState>
 8009ea6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	e072      	b.n	8009f98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 fd6d 	bl	800c996 <SDMMC_CmdOperCond>
 8009ebc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ec4:	d10d      	bne.n	8009ee2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 fd42 	bl	800c95a <SDMMC_CmdGoIdleState>
 8009ed6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	e05a      	b.n	8009f98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d137      	bne.n	8009f60 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 fd6d 	bl	800c9d6 <SDMMC_CmdAppCommand>
 8009efc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02d      	beq.n	8009f60 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f08:	e046      	b.n	8009f98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4618      	mov	r0, r3
 8009f12:	f002 fd60 	bl	800c9d6 <SDMMC_CmdAppCommand>
 8009f16:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	e03a      	b.n	8009f98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	491e      	ldr	r1, [pc, #120]	@ (8009fa0 <SD_PowerON+0x118>)
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f002 fd77 	bl	800ca1c <SDMMC_CmdAppOperCommand>
 8009f2e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f3a:	e02d      	b.n	8009f98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 fbbb 	bl	800c6be <SDMMC_GetResponse>
 8009f48:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	0fdb      	lsrs	r3, r3, #31
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <SD_PowerON+0xce>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <SD_PowerON+0xd0>
 8009f56:	2300      	movs	r3, #0
 8009f58:	613b      	str	r3, [r7, #16]

    count++;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d802      	bhi.n	8009f70 <SD_PowerON+0xe8>
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0cc      	beq.n	8009f0a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d902      	bls.n	8009f80 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f7e:	e00b      	b.n	8009f98 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	c1100000 	.word	0xc1100000

08009fa4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	@ 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fae:	f7f7 fc97 	bl	80018e0 <HAL_GetTick>
 8009fb2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f002 fb7d 	bl	800c6be <SDMMC_GetResponse>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fce:	d102      	bne.n	8009fd6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009fd4:	e0b0      	b.n	800a138 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2140      	movs	r1, #64	@ 0x40
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f002 fbad 	bl	800c73c <SDMMC_CmdBlockLength>
 8009fe2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	e0a0      	b.n	800a138 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f002 fce7 	bl	800c9d6 <SDMMC_CmdAppCommand>
 800a008:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	e08d      	b.n	800a138 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a01c:	f04f 33ff 	mov.w	r3, #4294967295
 800a020:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a022:	2340      	movs	r3, #64	@ 0x40
 800a024:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a026:	2360      	movs	r3, #96	@ 0x60
 800a028:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a02a:	2302      	movs	r3, #2
 800a02c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a032:	2301      	movs	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f107 0208 	add.w	r2, r7, #8
 800a03e:	4611      	mov	r1, r2
 800a040:	4618      	mov	r0, r3
 800a042:	f002 fb4f 	bl	800c6e4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f002 fdcf 	bl	800cbee <SDMMC_CmdStatusRegister>
 800a050:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02b      	beq.n	800a0b0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	e069      	b.n	800a138 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d013      	beq.n	800a09a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a072:	2300      	movs	r3, #0
 800a074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a076:	e00d      	b.n	800a094 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f002 faa9 	bl	800c5d4 <SDMMC_ReadFIFO>
 800a082:	4602      	mov	r2, r0
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	601a      	str	r2, [r3, #0]
        pData++;
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	3304      	adds	r3, #4
 800a08c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	3301      	adds	r3, #1
 800a092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	2b07      	cmp	r3, #7
 800a098:	d9ee      	bls.n	800a078 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a09a:	f7f7 fc21 	bl	80018e0 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d102      	bne.n	800a0b0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0ae:	e043      	b.n	800a138 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0d2      	beq.n	800a064 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c4:	f003 0308 	and.w	r3, r3, #8
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	e033      	b.n	800a138 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	e02a      	b.n	800a138 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d017      	beq.n	800a120 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	e021      	b.n	800a138 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f002 fa6b 	bl	800c5d4 <SDMMC_ReadFIFO>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	601a      	str	r2, [r3, #0]
    pData++;
 800a104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a106:	3304      	adds	r3, #4
 800a108:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a10a:	f7f7 fbe9 	bl	80018e0 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a118:	d102      	bne.n	800a120 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a11a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a11e:	e00b      	b.n	800a138 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e2      	bne.n	800a0f4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a03      	ldr	r2, [pc, #12]	@ (800a140 <SD_SendSDStatus+0x19c>)
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3730      	adds	r7, #48	@ 0x30
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	18000f3a 	.word	0x18000f3a

0800a144 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a154:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a158:	e018      	b.n	800a18c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f002 fd1e 	bl	800cba8 <SDMMC_CmdSendStatus>
 800a16c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	e009      	b.n	800a18c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f002 fa9d 	bl	800c6be <SDMMC_GetResponse>
 800a184:	4602      	mov	r2, r0
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a19c:	2300      	movs	r3, #0
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f002 fa87 	bl	800c6be <SDMMC_GetResponse>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ba:	d102      	bne.n	800a1c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1c0:	e02f      	b.n	800a222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a1c2:	f107 030c 	add.w	r3, r7, #12
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f879 	bl	800a2c0 <SD_FindSCR>
 800a1ce:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	e023      	b.n	800a222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01c      	beq.n	800a21e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ec:	041b      	lsls	r3, r3, #16
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	f002 fbf0 	bl	800c9d6 <SDMMC_CmdAppCommand>
 800a1f6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	e00f      	b.n	800a222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2102      	movs	r1, #2
 800a208:	4618      	mov	r0, r3
 800a20a:	f002 fc27 	bl	800ca5c <SDMMC_CmdBusWidth>
 800a20e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	e003      	b.n	800a222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e001      	b.n	800a222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a21e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	2300      	movs	r3, #0
 800a238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f002 fa3c 	bl	800c6be <SDMMC_GetResponse>
 800a246:	4603      	mov	r3, r0
 800a248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a24c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a250:	d102      	bne.n	800a258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a256:	e02f      	b.n	800a2b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a258:	f107 030c 	add.w	r3, r7, #12
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f82e 	bl	800a2c0 <SD_FindSCR>
 800a264:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	e023      	b.n	800a2b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01c      	beq.n	800a2b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a282:	041b      	lsls	r3, r3, #16
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f002 fba5 	bl	800c9d6 <SDMMC_CmdAppCommand>
 800a28c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	e00f      	b.n	800a2b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2100      	movs	r1, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f002 fbdc 	bl	800ca5c <SDMMC_CmdBusWidth>
 800a2a4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	e003      	b.n	800a2b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e001      	b.n	800a2b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a2ca:	f7f7 fb09 	bl	80018e0 <HAL_GetTick>
 800a2ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60bb      	str	r3, [r7, #8]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2108      	movs	r1, #8
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 fa28 	bl	800c73c <SDMMC_CmdBlockLength>
 800a2ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f6:	e0ad      	b.n	800a454 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a300:	041b      	lsls	r3, r3, #16
 800a302:	4619      	mov	r1, r3
 800a304:	4610      	mov	r0, r2
 800a306:	f002 fb66 	bl	800c9d6 <SDMMC_CmdAppCommand>
 800a30a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	e09e      	b.n	800a454 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a316:	f04f 33ff 	mov.w	r3, #4294967295
 800a31a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a31c:	2308      	movs	r3, #8
 800a31e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a320:	2330      	movs	r3, #48	@ 0x30
 800a322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a324:	2302      	movs	r3, #2
 800a326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a328:	2300      	movs	r3, #0
 800a32a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f107 0210 	add.w	r2, r7, #16
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f002 f9d2 	bl	800c6e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f002 fbac 	bl	800caa2 <SDMMC_CmdSendSCR>
 800a34a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d027      	beq.n	800a3a2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	e07e      	b.n	800a454 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d113      	bne.n	800a38c <SD_FindSCR+0xcc>
 800a364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a366:	2b00      	cmp	r3, #0
 800a368:	d110      	bne.n	800a38c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 f930 	bl	800c5d4 <SDMMC_ReadFIFO>
 800a374:	4603      	mov	r3, r0
 800a376:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f002 f929 	bl	800c5d4 <SDMMC_ReadFIFO>
 800a382:	4603      	mov	r3, r0
 800a384:	60fb      	str	r3, [r7, #12]
      index++;
 800a386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a388:	3301      	adds	r3, #1
 800a38a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a38c:	f7f7 faa8 	bl	80018e0 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39a:	d102      	bne.n	800a3a2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a39c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3a0:	e058      	b.n	800a454 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3a8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0d1      	beq.n	800a356 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	e043      	b.n	800a454 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d005      	beq.n	800a3e6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e036      	b.n	800a454 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	e029      	b.n	800a454 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a15      	ldr	r2, [pc, #84]	@ (800a45c <SD_FindSCR+0x19c>)
 800a406:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	061a      	lsls	r2, r3, #24
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	021b      	lsls	r3, r3, #8
 800a410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a414:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	0a1b      	lsrs	r3, r3, #8
 800a41a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a41e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	0e1b      	lsrs	r3, r3, #24
 800a424:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a428:	601a      	str	r2, [r3, #0]
    scr++;
 800a42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42c:	3304      	adds	r3, #4
 800a42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	061a      	lsls	r2, r3, #24
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a43c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	0a1b      	lsrs	r3, r3, #8
 800a442:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a446:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	0e1b      	lsrs	r3, r3, #24
 800a44c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a450:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3738      	adds	r7, #56	@ 0x38
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	18000f3a 	.word	0x18000f3a

0800a460 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a472:	2b1f      	cmp	r3, #31
 800a474:	d936      	bls.n	800a4e4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a476:	2300      	movs	r3, #0
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	e027      	b.n	800a4cc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f002 f8a7 	bl	800c5d4 <SDMMC_ReadFIFO>
 800a486:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	3301      	adds	r3, #1
 800a494:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	0a1b      	lsrs	r3, r3, #8
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	0c1b      	lsrs	r3, r3, #16
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	0e1b      	lsrs	r3, r3, #24
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b07      	cmp	r3, #7
 800a4d0:	d9d4      	bls.n	800a47c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	f1a3 0220 	sub.w	r2, r3, #32
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	2b1f      	cmp	r3, #31
 800a500:	d93a      	bls.n	800a578 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]
 800a506:	e02b      	b.n	800a560 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	021a      	lsls	r2, r3, #8
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	3301      	adds	r3, #1
 800a524:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	041a      	lsls	r2, r3, #16
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3301      	adds	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	061a      	lsls	r2, r3, #24
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	3301      	adds	r3, #1
 800a548:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f107 020c 	add.w	r2, r7, #12
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f002 f84a 	bl	800c5ee <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	3301      	adds	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2b07      	cmp	r3, #7
 800a564:	d9d0      	bls.n	800a508 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	f1a3 0220 	sub.w	r2, r3, #32
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	621a      	str	r2, [r3, #32]
  }
}
 800a578:	bf00      	nop
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e049      	b.n	800a676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7f6 fe78 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f000 f8ce 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b01      	cmp	r3, #1
 800a692:	d001      	beq.n	800a698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e04c      	b.n	800a732 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <HAL_TIM_Base_Start+0xc0>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d022      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b2:	d01d      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a22      	ldr	r2, [pc, #136]	@ (800a744 <HAL_TIM_Base_Start+0xc4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d018      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a21      	ldr	r2, [pc, #132]	@ (800a748 <HAL_TIM_Base_Start+0xc8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d013      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a74c <HAL_TIM_Base_Start+0xcc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00e      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a750 <HAL_TIM_Base_Start+0xd0>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d009      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a754 <HAL_TIM_Base_Start+0xd4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIM_Base_Start+0x70>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a758 <HAL_TIM_Base_Start+0xd8>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d115      	bne.n	800a71c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	4b19      	ldr	r3, [pc, #100]	@ (800a75c <HAL_TIM_Base_Start+0xdc>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b06      	cmp	r3, #6
 800a700:	d015      	beq.n	800a72e <HAL_TIM_Base_Start+0xae>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a708:	d011      	beq.n	800a72e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f042 0201 	orr.w	r2, r2, #1
 800a718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71a:	e008      	b.n	800a72e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f042 0201 	orr.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	e000      	b.n	800a730 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40010000 	.word	0x40010000
 800a744:	40000400 	.word	0x40000400
 800a748:	40000800 	.word	0x40000800
 800a74c:	40000c00 	.word	0x40000c00
 800a750:	40010400 	.word	0x40010400
 800a754:	40001800 	.word	0x40001800
 800a758:	40014000 	.word	0x40014000
 800a75c:	00010007 	.word	0x00010007

0800a760 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a772:	4013      	ands	r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10f      	bne.n	800a798 <HAL_TIM_Base_Stop+0x38>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6a1a      	ldr	r2, [r3, #32]
 800a77e:	f240 4344 	movw	r3, #1092	@ 0x444
 800a782:	4013      	ands	r3, r2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d107      	bne.n	800a798 <HAL_TIM_Base_Stop+0x38>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
	...

0800a7b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a43      	ldr	r2, [pc, #268]	@ (800a8d0 <TIM_Base_SetConfig+0x120>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d013      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ce:	d00f      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a40      	ldr	r2, [pc, #256]	@ (800a8d4 <TIM_Base_SetConfig+0x124>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00b      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3f      	ldr	r2, [pc, #252]	@ (800a8d8 <TIM_Base_SetConfig+0x128>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d007      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a3e      	ldr	r2, [pc, #248]	@ (800a8dc <TIM_Base_SetConfig+0x12c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d003      	beq.n	800a7f0 <TIM_Base_SetConfig+0x40>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a3d      	ldr	r2, [pc, #244]	@ (800a8e0 <TIM_Base_SetConfig+0x130>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d108      	bne.n	800a802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a32      	ldr	r2, [pc, #200]	@ (800a8d0 <TIM_Base_SetConfig+0x120>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d01f      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a810:	d01b      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2f      	ldr	r2, [pc, #188]	@ (800a8d4 <TIM_Base_SetConfig+0x124>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d017      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a2e      	ldr	r2, [pc, #184]	@ (800a8d8 <TIM_Base_SetConfig+0x128>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d013      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a2d      	ldr	r2, [pc, #180]	@ (800a8dc <TIM_Base_SetConfig+0x12c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00f      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a2c      	ldr	r2, [pc, #176]	@ (800a8e0 <TIM_Base_SetConfig+0x130>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00b      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a2b      	ldr	r2, [pc, #172]	@ (800a8e4 <TIM_Base_SetConfig+0x134>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d007      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a2a      	ldr	r2, [pc, #168]	@ (800a8e8 <TIM_Base_SetConfig+0x138>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d003      	beq.n	800a84a <TIM_Base_SetConfig+0x9a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a29      	ldr	r2, [pc, #164]	@ (800a8ec <TIM_Base_SetConfig+0x13c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d108      	bne.n	800a85c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a14      	ldr	r2, [pc, #80]	@ (800a8d0 <TIM_Base_SetConfig+0x120>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00f      	beq.n	800a8a2 <TIM_Base_SetConfig+0xf2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a16      	ldr	r2, [pc, #88]	@ (800a8e0 <TIM_Base_SetConfig+0x130>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d00b      	beq.n	800a8a2 <TIM_Base_SetConfig+0xf2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a15      	ldr	r2, [pc, #84]	@ (800a8e4 <TIM_Base_SetConfig+0x134>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d007      	beq.n	800a8a2 <TIM_Base_SetConfig+0xf2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a14      	ldr	r2, [pc, #80]	@ (800a8e8 <TIM_Base_SetConfig+0x138>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d003      	beq.n	800a8a2 <TIM_Base_SetConfig+0xf2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a13      	ldr	r2, [pc, #76]	@ (800a8ec <TIM_Base_SetConfig+0x13c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d103      	bne.n	800a8aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	691a      	ldr	r2, [r3, #16]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f043 0204 	orr.w	r2, r3, #4
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	601a      	str	r2, [r3, #0]
}
 800a8c2:	bf00      	nop
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40010000 	.word	0x40010000
 800a8d4:	40000400 	.word	0x40000400
 800a8d8:	40000800 	.word	0x40000800
 800a8dc:	40000c00 	.word	0x40000c00
 800a8e0:	40010400 	.word	0x40010400
 800a8e4:	40014000 	.word	0x40014000
 800a8e8:	40014400 	.word	0x40014400
 800a8ec:	40014800 	.word	0x40014800

0800a8f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a900:	2b01      	cmp	r3, #1
 800a902:	d101      	bne.n	800a908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a904:	2302      	movs	r3, #2
 800a906:	e06d      	b.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a30      	ldr	r2, [pc, #192]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d004      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a2f      	ldr	r2, [pc, #188]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d108      	bne.n	800a94e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a942:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a954:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a20      	ldr	r2, [pc, #128]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d022      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a97a:	d01d      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d018      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a1c      	ldr	r2, [pc, #112]	@ (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d013      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a1a      	ldr	r2, [pc, #104]	@ (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d00e      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a15      	ldr	r2, [pc, #84]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d009      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a16      	ldr	r2, [pc, #88]	@ (800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d004      	beq.n	800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a15      	ldr	r2, [pc, #84]	@ (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d10c      	bne.n	800a9d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40010400 	.word	0x40010400
 800a9f8:	40000400 	.word	0x40000400
 800a9fc:	40000800 	.word	0x40000800
 800aa00:	40000c00 	.word	0x40000c00
 800aa04:	40001800 	.word	0x40001800
 800aa08:	40014000 	.word	0x40014000

0800aa0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e042      	b.n	800aaa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d106      	bne.n	800aa36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7f6 fc7d 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2224      	movs	r2, #36	@ 0x24
 800aa3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 0201 	bic.w	r2, r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 fa14 	bl	800be84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fca9 	bl	800b3b4 <UART_SetConfig>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d101      	bne.n	800aa6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e01b      	b.n	800aaa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fa93 	bl	800bfc8 <UART_CheckIdleState>
 800aaa2:	4603      	mov	r3, r0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	@ 0x28
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	4613      	mov	r3, r2
 800aaba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d17b      	bne.n	800abbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <HAL_UART_Transmit+0x26>
 800aacc:	88fb      	ldrh	r3, [r7, #6]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e074      	b.n	800abc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2221      	movs	r2, #33	@ 0x21
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aae6:	f7f6 fefb 	bl	80018e0 <HAL_GetTick>
 800aaea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	88fa      	ldrh	r2, [r7, #6]
 800aaf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	88fa      	ldrh	r2, [r7, #6]
 800aaf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab04:	d108      	bne.n	800ab18 <HAL_UART_Transmit+0x6c>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	e003      	b.n	800ab20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab20:	e030      	b.n	800ab84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2180      	movs	r1, #128	@ 0x80
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f001 faf5 	bl	800c11c <UART_WaitOnFlagUntilTimeout>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d005      	beq.n	800ab44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e03d      	b.n	800abc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10b      	bne.n	800ab62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	3302      	adds	r3, #2
 800ab5e:	61bb      	str	r3, [r7, #24]
 800ab60:	e007      	b.n	800ab72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1c8      	bne.n	800ab22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2200      	movs	r2, #0
 800ab98:	2140      	movs	r1, #64	@ 0x40
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f001 fabe 	bl	800c11c <UART_WaitOnFlagUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d005      	beq.n	800abb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e006      	b.n	800abc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	e000      	b.n	800abc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800abbe:	2302      	movs	r3, #2
  }
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b0ba      	sub	sp, #232	@ 0xe8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800abee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800abf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800abf6:	4013      	ands	r3, r2
 800abf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800abfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11b      	bne.n	800ac3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d015      	beq.n	800ac3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8393 	beq.w	800b358 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
      }
      return;
 800ac3a:	e38d      	b.n	800b358 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8123 	beq.w	800ae8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ae80 <HAL_UART_IRQHandler+0x2b8>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ac56:	4b8b      	ldr	r3, [pc, #556]	@ (800ae84 <HAL_UART_IRQHandler+0x2bc>)
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8116 	beq.w	800ae8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d011      	beq.n	800ac90 <HAL_UART_IRQHandler+0xc8>
 800ac6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac86:	f043 0201 	orr.w	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d011      	beq.n	800acc0 <HAL_UART_IRQHandler+0xf8>
 800ac9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2202      	movs	r2, #2
 800acae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb6:	f043 0204 	orr.w	r2, r3, #4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d011      	beq.n	800acf0 <HAL_UART_IRQHandler+0x128>
 800accc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2204      	movs	r2, #4
 800acde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace6:	f043 0202 	orr.w	r2, r3, #2
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800acf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d017      	beq.n	800ad2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d105      	bne.n	800ad14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae80 <HAL_UART_IRQHandler+0x2b8>)
 800ad0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2208      	movs	r2, #8
 800ad1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad22:	f043 0208 	orr.w	r2, r3, #8
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d012      	beq.n	800ad5e <HAL_UART_IRQHandler+0x196>
 800ad38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad54:	f043 0220 	orr.w	r2, r3, #32
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 82f9 	beq.w	800b35c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad6e:	f003 0320 	and.w	r3, r3, #32
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d013      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adb2:	2b40      	cmp	r3, #64	@ 0x40
 800adb4:	d005      	beq.n	800adc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800adb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d054      	beq.n	800ae6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 fa18 	bl	800c1f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add2:	2b40      	cmp	r3, #64	@ 0x40
 800add4:	d146      	bne.n	800ae64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ade4:	e853 3f00 	ldrex	r3, [r3]
 800ade8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800adec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800adf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3308      	adds	r3, #8
 800adfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ae0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ae1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1d9      	bne.n	800add6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d017      	beq.n	800ae5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae32:	4a15      	ldr	r2, [pc, #84]	@ (800ae88 <HAL_UART_IRQHandler+0x2c0>)
 800ae34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7f8 fb0b 	bl	8003458 <HAL_DMA_Abort_IT>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d019      	beq.n	800ae7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ae56:	4610      	mov	r0, r2
 800ae58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae5a:	e00f      	b.n	800ae7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fa93 	bl	800b388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae62:	e00b      	b.n	800ae7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fa8f 	bl	800b388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6a:	e007      	b.n	800ae7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fa8b 	bl	800b388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ae7a:	e26f      	b.n	800b35c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7c:	bf00      	nop
    return;
 800ae7e:	e26d      	b.n	800b35c <HAL_UART_IRQHandler+0x794>
 800ae80:	10000001 	.word	0x10000001
 800ae84:	04000120 	.word	0x04000120
 800ae88:	0800c2c5 	.word	0x0800c2c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	f040 8203 	bne.w	800b29c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae9a:	f003 0310 	and.w	r3, r3, #16
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 81fc 	beq.w	800b29c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aea8:	f003 0310 	and.w	r3, r3, #16
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 81f5 	beq.w	800b29c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2210      	movs	r2, #16
 800aeb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec4:	2b40      	cmp	r3, #64	@ 0x40
 800aec6:	f040 816d 	bne.w	800b1a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4aa4      	ldr	r2, [pc, #656]	@ (800b164 <HAL_UART_IRQHandler+0x59c>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d068      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4aa1      	ldr	r2, [pc, #644]	@ (800b168 <HAL_UART_IRQHandler+0x5a0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d061      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a9f      	ldr	r2, [pc, #636]	@ (800b16c <HAL_UART_IRQHandler+0x5a4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d05a      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a9c      	ldr	r2, [pc, #624]	@ (800b170 <HAL_UART_IRQHandler+0x5a8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d053      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a9a      	ldr	r2, [pc, #616]	@ (800b174 <HAL_UART_IRQHandler+0x5ac>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d04c      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a97      	ldr	r2, [pc, #604]	@ (800b178 <HAL_UART_IRQHandler+0x5b0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d045      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a95      	ldr	r2, [pc, #596]	@ (800b17c <HAL_UART_IRQHandler+0x5b4>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d03e      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a92      	ldr	r2, [pc, #584]	@ (800b180 <HAL_UART_IRQHandler+0x5b8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d037      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a90      	ldr	r2, [pc, #576]	@ (800b184 <HAL_UART_IRQHandler+0x5bc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d030      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a8d      	ldr	r2, [pc, #564]	@ (800b188 <HAL_UART_IRQHandler+0x5c0>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d029      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a8b      	ldr	r2, [pc, #556]	@ (800b18c <HAL_UART_IRQHandler+0x5c4>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d022      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a88      	ldr	r2, [pc, #544]	@ (800b190 <HAL_UART_IRQHandler+0x5c8>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d01b      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a86      	ldr	r2, [pc, #536]	@ (800b194 <HAL_UART_IRQHandler+0x5cc>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d014      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a83      	ldr	r2, [pc, #524]	@ (800b198 <HAL_UART_IRQHandler+0x5d0>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d00d      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a81      	ldr	r2, [pc, #516]	@ (800b19c <HAL_UART_IRQHandler+0x5d4>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d006      	beq.n	800afaa <HAL_UART_IRQHandler+0x3e2>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a7e      	ldr	r2, [pc, #504]	@ (800b1a0 <HAL_UART_IRQHandler+0x5d8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d106      	bne.n	800afb8 <HAL_UART_IRQHandler+0x3f0>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	e005      	b.n	800afc4 <HAL_UART_IRQHandler+0x3fc>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 80ad 	beq.w	800b12c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800afdc:	429a      	cmp	r2, r3
 800afde:	f080 80a5 	bcs.w	800b12c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800afe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aff8:	f000 8087 	beq.w	800b10a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b02a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b036:	e841 2300 	strex	r3, r2, [r1]
 800b03a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1da      	bne.n	800affc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b058:	f023 0301 	bic.w	r3, r3, #1
 800b05c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3308      	adds	r3, #8
 800b066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b06a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b06e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b07c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e1      	bne.n	800b046 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3308      	adds	r3, #8
 800b088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b0a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e3      	bne.n	800b082 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0d8:	f023 0310 	bic.w	r3, r3, #16
 800b0dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e4      	bne.n	800b0c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b104:	4618      	mov	r0, r3
 800b106:	f7f7 fe89 	bl	8002e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2202      	movs	r2, #2
 800b10e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b29b      	uxth	r3, r3
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f939 	bl	800b39c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b12a:	e119      	b.n	800b360 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b136:	429a      	cmp	r2, r3
 800b138:	f040 8112 	bne.w	800b360 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b148:	f040 810a 	bne.w	800b360 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f91e 	bl	800b39c <HAL_UARTEx_RxEventCallback>
      return;
 800b160:	e0fe      	b.n	800b360 <HAL_UART_IRQHandler+0x798>
 800b162:	bf00      	nop
 800b164:	40020010 	.word	0x40020010
 800b168:	40020028 	.word	0x40020028
 800b16c:	40020040 	.word	0x40020040
 800b170:	40020058 	.word	0x40020058
 800b174:	40020070 	.word	0x40020070
 800b178:	40020088 	.word	0x40020088
 800b17c:	400200a0 	.word	0x400200a0
 800b180:	400200b8 	.word	0x400200b8
 800b184:	40020410 	.word	0x40020410
 800b188:	40020428 	.word	0x40020428
 800b18c:	40020440 	.word	0x40020440
 800b190:	40020458 	.word	0x40020458
 800b194:	40020470 	.word	0x40020470
 800b198:	40020488 	.word	0x40020488
 800b19c:	400204a0 	.word	0x400204a0
 800b1a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80cf 	beq.w	800b364 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b1c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80ca 	beq.w	800b364 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e4      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3308      	adds	r3, #8
 800b20c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	623b      	str	r3, [r7, #32]
   return(result);
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	4b55      	ldr	r3, [pc, #340]	@ (800b370 <HAL_UART_IRQHandler+0x7a8>)
 800b21a:	4013      	ands	r3, r2
 800b21c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3308      	adds	r3, #8
 800b226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b22a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e3      	bne.n	800b206 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 0310 	bic.w	r3, r3, #16
 800b266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b274:	61fb      	str	r3, [r7, #28]
 800b276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	69b9      	ldr	r1, [r7, #24]
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	617b      	str	r3, [r7, #20]
   return(result);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e4      	bne.n	800b252 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b28e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f881 	bl	800b39c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b29a:	e063      	b.n	800b364 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00e      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x6fe>
 800b2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b2bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 f83d 	bl	800c33e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2c4:	e051      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d014      	beq.n	800b2fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d105      	bne.n	800b2ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d008      	beq.n	800b2fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d03a      	beq.n	800b368 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4798      	blx	r3
    }
    return;
 800b2fa:	e035      	b.n	800b368 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d009      	beq.n	800b31c <HAL_UART_IRQHandler+0x754>
 800b308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 ffe7 	bl	800c2e8 <UART_EndTransmit_IT>
    return;
 800b31a:	e026      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <HAL_UART_IRQHandler+0x774>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 f816 	bl	800c366 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b33a:	e016      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d010      	beq.n	800b36a <HAL_UART_IRQHandler+0x7a2>
 800b348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da0c      	bge.n	800b36a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fffe 	bl	800c352 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b356:	e008      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800b358:	bf00      	nop
 800b35a:	e006      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
    return;
 800b35c:	bf00      	nop
 800b35e:	e004      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800b360:	bf00      	nop
 800b362:	e002      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800b364:	bf00      	nop
 800b366:	e000      	b.n	800b36a <HAL_UART_IRQHandler+0x7a2>
    return;
 800b368:	bf00      	nop
  }
}
 800b36a:	37e8      	adds	r7, #232	@ 0xe8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	effffffe 	.word	0xeffffffe

0800b374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3b8:	b092      	sub	sp, #72	@ 0x48
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	4bbe      	ldr	r3, [pc, #760]	@ (800b6dc <UART_SetConfig+0x328>)
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	6812      	ldr	r2, [r2, #0]
 800b3ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	68da      	ldr	r2, [r3, #12]
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4ab3      	ldr	r2, [pc, #716]	@ (800b6e0 <UART_SetConfig+0x32c>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d004      	beq.n	800b420 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b41c:	4313      	orrs	r3, r2
 800b41e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689a      	ldr	r2, [r3, #8]
 800b426:	4baf      	ldr	r3, [pc, #700]	@ (800b6e4 <UART_SetConfig+0x330>)
 800b428:	4013      	ands	r3, r2
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	6812      	ldr	r2, [r2, #0]
 800b42e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b430:	430b      	orrs	r3, r1
 800b432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	f023 010f 	bic.w	r1, r3, #15
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4aa6      	ldr	r2, [pc, #664]	@ (800b6e8 <UART_SetConfig+0x334>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d177      	bne.n	800b544 <UART_SetConfig+0x190>
 800b454:	4ba5      	ldr	r3, [pc, #660]	@ (800b6ec <UART_SetConfig+0x338>)
 800b456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b458:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b45c:	2b28      	cmp	r3, #40	@ 0x28
 800b45e:	d86d      	bhi.n	800b53c <UART_SetConfig+0x188>
 800b460:	a201      	add	r2, pc, #4	@ (adr r2, 800b468 <UART_SetConfig+0xb4>)
 800b462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b466:	bf00      	nop
 800b468:	0800b50d 	.word	0x0800b50d
 800b46c:	0800b53d 	.word	0x0800b53d
 800b470:	0800b53d 	.word	0x0800b53d
 800b474:	0800b53d 	.word	0x0800b53d
 800b478:	0800b53d 	.word	0x0800b53d
 800b47c:	0800b53d 	.word	0x0800b53d
 800b480:	0800b53d 	.word	0x0800b53d
 800b484:	0800b53d 	.word	0x0800b53d
 800b488:	0800b515 	.word	0x0800b515
 800b48c:	0800b53d 	.word	0x0800b53d
 800b490:	0800b53d 	.word	0x0800b53d
 800b494:	0800b53d 	.word	0x0800b53d
 800b498:	0800b53d 	.word	0x0800b53d
 800b49c:	0800b53d 	.word	0x0800b53d
 800b4a0:	0800b53d 	.word	0x0800b53d
 800b4a4:	0800b53d 	.word	0x0800b53d
 800b4a8:	0800b51d 	.word	0x0800b51d
 800b4ac:	0800b53d 	.word	0x0800b53d
 800b4b0:	0800b53d 	.word	0x0800b53d
 800b4b4:	0800b53d 	.word	0x0800b53d
 800b4b8:	0800b53d 	.word	0x0800b53d
 800b4bc:	0800b53d 	.word	0x0800b53d
 800b4c0:	0800b53d 	.word	0x0800b53d
 800b4c4:	0800b53d 	.word	0x0800b53d
 800b4c8:	0800b525 	.word	0x0800b525
 800b4cc:	0800b53d 	.word	0x0800b53d
 800b4d0:	0800b53d 	.word	0x0800b53d
 800b4d4:	0800b53d 	.word	0x0800b53d
 800b4d8:	0800b53d 	.word	0x0800b53d
 800b4dc:	0800b53d 	.word	0x0800b53d
 800b4e0:	0800b53d 	.word	0x0800b53d
 800b4e4:	0800b53d 	.word	0x0800b53d
 800b4e8:	0800b52d 	.word	0x0800b52d
 800b4ec:	0800b53d 	.word	0x0800b53d
 800b4f0:	0800b53d 	.word	0x0800b53d
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b53d 	.word	0x0800b53d
 800b4fc:	0800b53d 	.word	0x0800b53d
 800b500:	0800b53d 	.word	0x0800b53d
 800b504:	0800b53d 	.word	0x0800b53d
 800b508:	0800b535 	.word	0x0800b535
 800b50c:	2301      	movs	r3, #1
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b512:	e222      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b514:	2304      	movs	r3, #4
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e21e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b51c:	2308      	movs	r3, #8
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e21a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b524:	2310      	movs	r3, #16
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e216      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b52c:	2320      	movs	r3, #32
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e212      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b534:	2340      	movs	r3, #64	@ 0x40
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e20e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b53c:	2380      	movs	r3, #128	@ 0x80
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e20a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a69      	ldr	r2, [pc, #420]	@ (800b6f0 <UART_SetConfig+0x33c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d130      	bne.n	800b5b0 <UART_SetConfig+0x1fc>
 800b54e:	4b67      	ldr	r3, [pc, #412]	@ (800b6ec <UART_SetConfig+0x338>)
 800b550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	2b05      	cmp	r3, #5
 800b558:	d826      	bhi.n	800b5a8 <UART_SetConfig+0x1f4>
 800b55a:	a201      	add	r2, pc, #4	@ (adr r2, 800b560 <UART_SetConfig+0x1ac>)
 800b55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b560:	0800b579 	.word	0x0800b579
 800b564:	0800b581 	.word	0x0800b581
 800b568:	0800b589 	.word	0x0800b589
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b599 	.word	0x0800b599
 800b574:	0800b5a1 	.word	0x0800b5a1
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57e:	e1ec      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b580:	2304      	movs	r3, #4
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e1e8      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b588:	2308      	movs	r3, #8
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e1e4      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b590:	2310      	movs	r3, #16
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e1e0      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b598:	2320      	movs	r3, #32
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e1dc      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5a0:	2340      	movs	r3, #64	@ 0x40
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e1d8      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5a8:	2380      	movs	r3, #128	@ 0x80
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e1d4      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a4f      	ldr	r2, [pc, #316]	@ (800b6f4 <UART_SetConfig+0x340>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d130      	bne.n	800b61c <UART_SetConfig+0x268>
 800b5ba:	4b4c      	ldr	r3, [pc, #304]	@ (800b6ec <UART_SetConfig+0x338>)
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d826      	bhi.n	800b614 <UART_SetConfig+0x260>
 800b5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5cc <UART_SetConfig+0x218>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b5e5 	.word	0x0800b5e5
 800b5d0:	0800b5ed 	.word	0x0800b5ed
 800b5d4:	0800b5f5 	.word	0x0800b5f5
 800b5d8:	0800b5fd 	.word	0x0800b5fd
 800b5dc:	0800b605 	.word	0x0800b605
 800b5e0:	0800b60d 	.word	0x0800b60d
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e1b6      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e1b2      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e1ae      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e1aa      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b604:	2320      	movs	r3, #32
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e1a6      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b60c:	2340      	movs	r3, #64	@ 0x40
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e1a2      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b614:	2380      	movs	r3, #128	@ 0x80
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e19e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a35      	ldr	r2, [pc, #212]	@ (800b6f8 <UART_SetConfig+0x344>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d130      	bne.n	800b688 <UART_SetConfig+0x2d4>
 800b626:	4b31      	ldr	r3, [pc, #196]	@ (800b6ec <UART_SetConfig+0x338>)
 800b628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	2b05      	cmp	r3, #5
 800b630:	d826      	bhi.n	800b680 <UART_SetConfig+0x2cc>
 800b632:	a201      	add	r2, pc, #4	@ (adr r2, 800b638 <UART_SetConfig+0x284>)
 800b634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b638:	0800b651 	.word	0x0800b651
 800b63c:	0800b659 	.word	0x0800b659
 800b640:	0800b661 	.word	0x0800b661
 800b644:	0800b669 	.word	0x0800b669
 800b648:	0800b671 	.word	0x0800b671
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	2300      	movs	r3, #0
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b656:	e180      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b658:	2304      	movs	r3, #4
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e17c      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b660:	2308      	movs	r3, #8
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e178      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b668:	2310      	movs	r3, #16
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e174      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b670:	2320      	movs	r3, #32
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e170      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b678:	2340      	movs	r3, #64	@ 0x40
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e16c      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b680:	2380      	movs	r3, #128	@ 0x80
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e168      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a1b      	ldr	r2, [pc, #108]	@ (800b6fc <UART_SetConfig+0x348>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d142      	bne.n	800b718 <UART_SetConfig+0x364>
 800b692:	4b16      	ldr	r3, [pc, #88]	@ (800b6ec <UART_SetConfig+0x338>)
 800b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	d838      	bhi.n	800b710 <UART_SetConfig+0x35c>
 800b69e:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a4 <UART_SetConfig+0x2f0>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b6bd 	.word	0x0800b6bd
 800b6a8:	0800b6c5 	.word	0x0800b6c5
 800b6ac:	0800b6cd 	.word	0x0800b6cd
 800b6b0:	0800b6d5 	.word	0x0800b6d5
 800b6b4:	0800b701 	.word	0x0800b701
 800b6b8:	0800b709 	.word	0x0800b709
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c2:	e14a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b6c4:	2304      	movs	r3, #4
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e146      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e142      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b6d4:	2310      	movs	r3, #16
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e13e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b6dc:	cfff69f3 	.word	0xcfff69f3
 800b6e0:	58000c00 	.word	0x58000c00
 800b6e4:	11fff4ff 	.word	0x11fff4ff
 800b6e8:	40011000 	.word	0x40011000
 800b6ec:	58024400 	.word	0x58024400
 800b6f0:	40004400 	.word	0x40004400
 800b6f4:	40004800 	.word	0x40004800
 800b6f8:	40004c00 	.word	0x40004c00
 800b6fc:	40005000 	.word	0x40005000
 800b700:	2320      	movs	r3, #32
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e128      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b708:	2340      	movs	r3, #64	@ 0x40
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e124      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b710:	2380      	movs	r3, #128	@ 0x80
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e120      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4acb      	ldr	r2, [pc, #812]	@ (800ba4c <UART_SetConfig+0x698>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d176      	bne.n	800b810 <UART_SetConfig+0x45c>
 800b722:	4bcb      	ldr	r3, [pc, #812]	@ (800ba50 <UART_SetConfig+0x69c>)
 800b724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b72a:	2b28      	cmp	r3, #40	@ 0x28
 800b72c:	d86c      	bhi.n	800b808 <UART_SetConfig+0x454>
 800b72e:	a201      	add	r2, pc, #4	@ (adr r2, 800b734 <UART_SetConfig+0x380>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b7d9 	.word	0x0800b7d9
 800b738:	0800b809 	.word	0x0800b809
 800b73c:	0800b809 	.word	0x0800b809
 800b740:	0800b809 	.word	0x0800b809
 800b744:	0800b809 	.word	0x0800b809
 800b748:	0800b809 	.word	0x0800b809
 800b74c:	0800b809 	.word	0x0800b809
 800b750:	0800b809 	.word	0x0800b809
 800b754:	0800b7e1 	.word	0x0800b7e1
 800b758:	0800b809 	.word	0x0800b809
 800b75c:	0800b809 	.word	0x0800b809
 800b760:	0800b809 	.word	0x0800b809
 800b764:	0800b809 	.word	0x0800b809
 800b768:	0800b809 	.word	0x0800b809
 800b76c:	0800b809 	.word	0x0800b809
 800b770:	0800b809 	.word	0x0800b809
 800b774:	0800b7e9 	.word	0x0800b7e9
 800b778:	0800b809 	.word	0x0800b809
 800b77c:	0800b809 	.word	0x0800b809
 800b780:	0800b809 	.word	0x0800b809
 800b784:	0800b809 	.word	0x0800b809
 800b788:	0800b809 	.word	0x0800b809
 800b78c:	0800b809 	.word	0x0800b809
 800b790:	0800b809 	.word	0x0800b809
 800b794:	0800b7f1 	.word	0x0800b7f1
 800b798:	0800b809 	.word	0x0800b809
 800b79c:	0800b809 	.word	0x0800b809
 800b7a0:	0800b809 	.word	0x0800b809
 800b7a4:	0800b809 	.word	0x0800b809
 800b7a8:	0800b809 	.word	0x0800b809
 800b7ac:	0800b809 	.word	0x0800b809
 800b7b0:	0800b809 	.word	0x0800b809
 800b7b4:	0800b7f9 	.word	0x0800b7f9
 800b7b8:	0800b809 	.word	0x0800b809
 800b7bc:	0800b809 	.word	0x0800b809
 800b7c0:	0800b809 	.word	0x0800b809
 800b7c4:	0800b809 	.word	0x0800b809
 800b7c8:	0800b809 	.word	0x0800b809
 800b7cc:	0800b809 	.word	0x0800b809
 800b7d0:	0800b809 	.word	0x0800b809
 800b7d4:	0800b801 	.word	0x0800b801
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e0bc      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b7e0:	2304      	movs	r3, #4
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e6:	e0b8      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b7e8:	2308      	movs	r3, #8
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e0b4      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b7f0:	2310      	movs	r3, #16
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e0b0      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e0ac      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b800:	2340      	movs	r3, #64	@ 0x40
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e0a8      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b808:	2380      	movs	r3, #128	@ 0x80
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e0a4      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a8f      	ldr	r2, [pc, #572]	@ (800ba54 <UART_SetConfig+0x6a0>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d130      	bne.n	800b87c <UART_SetConfig+0x4c8>
 800b81a:	4b8d      	ldr	r3, [pc, #564]	@ (800ba50 <UART_SetConfig+0x69c>)
 800b81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b05      	cmp	r3, #5
 800b824:	d826      	bhi.n	800b874 <UART_SetConfig+0x4c0>
 800b826:	a201      	add	r2, pc, #4	@ (adr r2, 800b82c <UART_SetConfig+0x478>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b845 	.word	0x0800b845
 800b830:	0800b84d 	.word	0x0800b84d
 800b834:	0800b855 	.word	0x0800b855
 800b838:	0800b85d 	.word	0x0800b85d
 800b83c:	0800b865 	.word	0x0800b865
 800b840:	0800b86d 	.word	0x0800b86d
 800b844:	2300      	movs	r3, #0
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e086      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b84c:	2304      	movs	r3, #4
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b852:	e082      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b854:	2308      	movs	r3, #8
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85a:	e07e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b85c:	2310      	movs	r3, #16
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e07a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b864:	2320      	movs	r3, #32
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e076      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b86c:	2340      	movs	r3, #64	@ 0x40
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e072      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b874:	2380      	movs	r3, #128	@ 0x80
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e06e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a75      	ldr	r2, [pc, #468]	@ (800ba58 <UART_SetConfig+0x6a4>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d130      	bne.n	800b8e8 <UART_SetConfig+0x534>
 800b886:	4b72      	ldr	r3, [pc, #456]	@ (800ba50 <UART_SetConfig+0x69c>)
 800b888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88a:	f003 0307 	and.w	r3, r3, #7
 800b88e:	2b05      	cmp	r3, #5
 800b890:	d826      	bhi.n	800b8e0 <UART_SetConfig+0x52c>
 800b892:	a201      	add	r2, pc, #4	@ (adr r2, 800b898 <UART_SetConfig+0x4e4>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b8b1 	.word	0x0800b8b1
 800b89c:	0800b8b9 	.word	0x0800b8b9
 800b8a0:	0800b8c1 	.word	0x0800b8c1
 800b8a4:	0800b8c9 	.word	0x0800b8c9
 800b8a8:	0800b8d1 	.word	0x0800b8d1
 800b8ac:	0800b8d9 	.word	0x0800b8d9
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e050      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8b8:	2304      	movs	r3, #4
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8be:	e04c      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8c0:	2308      	movs	r3, #8
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c6:	e048      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ce:	e044      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8d0:	2320      	movs	r3, #32
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d6:	e040      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8d8:	2340      	movs	r3, #64	@ 0x40
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e03c      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8e0:	2380      	movs	r3, #128	@ 0x80
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e038      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a5b      	ldr	r2, [pc, #364]	@ (800ba5c <UART_SetConfig+0x6a8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d130      	bne.n	800b954 <UART_SetConfig+0x5a0>
 800b8f2:	4b57      	ldr	r3, [pc, #348]	@ (800ba50 <UART_SetConfig+0x69c>)
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b05      	cmp	r3, #5
 800b8fc:	d826      	bhi.n	800b94c <UART_SetConfig+0x598>
 800b8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b904 <UART_SetConfig+0x550>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b91d 	.word	0x0800b91d
 800b908:	0800b925 	.word	0x0800b925
 800b90c:	0800b92d 	.word	0x0800b92d
 800b910:	0800b935 	.word	0x0800b935
 800b914:	0800b93d 	.word	0x0800b93d
 800b918:	0800b945 	.word	0x0800b945
 800b91c:	2302      	movs	r3, #2
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e01a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b924:	2304      	movs	r3, #4
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e016      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b92c:	2308      	movs	r3, #8
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e012      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b934:	2310      	movs	r3, #16
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93a:	e00e      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b93c:	2320      	movs	r3, #32
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e00a      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b944:	2340      	movs	r3, #64	@ 0x40
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e006      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b94c:	2380      	movs	r3, #128	@ 0x80
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e002      	b.n	800b95a <UART_SetConfig+0x5a6>
 800b954:	2380      	movs	r3, #128	@ 0x80
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a3f      	ldr	r2, [pc, #252]	@ (800ba5c <UART_SetConfig+0x6a8>)
 800b960:	4293      	cmp	r3, r2
 800b962:	f040 80f8 	bne.w	800bb56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b966:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	dc46      	bgt.n	800b9fc <UART_SetConfig+0x648>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	f2c0 8082 	blt.w	800ba78 <UART_SetConfig+0x6c4>
 800b974:	3b02      	subs	r3, #2
 800b976:	2b1e      	cmp	r3, #30
 800b978:	d87e      	bhi.n	800ba78 <UART_SetConfig+0x6c4>
 800b97a:	a201      	add	r2, pc, #4	@ (adr r2, 800b980 <UART_SetConfig+0x5cc>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800ba03 	.word	0x0800ba03
 800b984:	0800ba79 	.word	0x0800ba79
 800b988:	0800ba0b 	.word	0x0800ba0b
 800b98c:	0800ba79 	.word	0x0800ba79
 800b990:	0800ba79 	.word	0x0800ba79
 800b994:	0800ba79 	.word	0x0800ba79
 800b998:	0800ba1b 	.word	0x0800ba1b
 800b99c:	0800ba79 	.word	0x0800ba79
 800b9a0:	0800ba79 	.word	0x0800ba79
 800b9a4:	0800ba79 	.word	0x0800ba79
 800b9a8:	0800ba79 	.word	0x0800ba79
 800b9ac:	0800ba79 	.word	0x0800ba79
 800b9b0:	0800ba79 	.word	0x0800ba79
 800b9b4:	0800ba79 	.word	0x0800ba79
 800b9b8:	0800ba2b 	.word	0x0800ba2b
 800b9bc:	0800ba79 	.word	0x0800ba79
 800b9c0:	0800ba79 	.word	0x0800ba79
 800b9c4:	0800ba79 	.word	0x0800ba79
 800b9c8:	0800ba79 	.word	0x0800ba79
 800b9cc:	0800ba79 	.word	0x0800ba79
 800b9d0:	0800ba79 	.word	0x0800ba79
 800b9d4:	0800ba79 	.word	0x0800ba79
 800b9d8:	0800ba79 	.word	0x0800ba79
 800b9dc:	0800ba79 	.word	0x0800ba79
 800b9e0:	0800ba79 	.word	0x0800ba79
 800b9e4:	0800ba79 	.word	0x0800ba79
 800b9e8:	0800ba79 	.word	0x0800ba79
 800b9ec:	0800ba79 	.word	0x0800ba79
 800b9f0:	0800ba79 	.word	0x0800ba79
 800b9f4:	0800ba79 	.word	0x0800ba79
 800b9f8:	0800ba6b 	.word	0x0800ba6b
 800b9fc:	2b40      	cmp	r3, #64	@ 0x40
 800b9fe:	d037      	beq.n	800ba70 <UART_SetConfig+0x6bc>
 800ba00:	e03a      	b.n	800ba78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba02:	f7fc fc0d 	bl	8008220 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba08:	e03c      	b.n	800ba84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fc fc1c 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba18:	e034      	b.n	800ba84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba1a:	f107 0318 	add.w	r3, r7, #24
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fc fd68 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba28:	e02c      	b.n	800ba84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba2a:	4b09      	ldr	r3, [pc, #36]	@ (800ba50 <UART_SetConfig+0x69c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0320 	and.w	r3, r3, #32
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d016      	beq.n	800ba64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba36:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <UART_SetConfig+0x69c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	08db      	lsrs	r3, r3, #3
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	4a07      	ldr	r2, [pc, #28]	@ (800ba60 <UART_SetConfig+0x6ac>)
 800ba42:	fa22 f303 	lsr.w	r3, r2, r3
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba48:	e01c      	b.n	800ba84 <UART_SetConfig+0x6d0>
 800ba4a:	bf00      	nop
 800ba4c:	40011400 	.word	0x40011400
 800ba50:	58024400 	.word	0x58024400
 800ba54:	40007800 	.word	0x40007800
 800ba58:	40007c00 	.word	0x40007c00
 800ba5c:	58000c00 	.word	0x58000c00
 800ba60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba64:	4b9d      	ldr	r3, [pc, #628]	@ (800bcdc <UART_SetConfig+0x928>)
 800ba66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba68:	e00c      	b.n	800ba84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba6a:	4b9d      	ldr	r3, [pc, #628]	@ (800bce0 <UART_SetConfig+0x92c>)
 800ba6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6e:	e009      	b.n	800ba84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba76:	e005      	b.n	800ba84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 81de 	beq.w	800be48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba90:	4a94      	ldr	r2, [pc, #592]	@ (800bce4 <UART_SetConfig+0x930>)
 800ba92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba96:	461a      	mov	r2, r3
 800ba98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba9e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	4613      	mov	r3, r2
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	4413      	add	r3, r2
 800baaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baac:	429a      	cmp	r2, r3
 800baae:	d305      	bcc.n	800babc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bab8:	429a      	cmp	r2, r3
 800baba:	d903      	bls.n	800bac4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bac2:	e1c1      	b.n	800be48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac6:	2200      	movs	r2, #0
 800bac8:	60bb      	str	r3, [r7, #8]
 800baca:	60fa      	str	r2, [r7, #12]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad0:	4a84      	ldr	r2, [pc, #528]	@ (800bce4 <UART_SetConfig+0x930>)
 800bad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	2200      	movs	r2, #0
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bae6:	f7f4 fc4b 	bl	8000380 <__aeabi_uldivmod>
 800baea:	4602      	mov	r2, r0
 800baec:	460b      	mov	r3, r1
 800baee:	4610      	mov	r0, r2
 800baf0:	4619      	mov	r1, r3
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	020b      	lsls	r3, r1, #8
 800bafc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb00:	0202      	lsls	r2, r0, #8
 800bb02:	6979      	ldr	r1, [r7, #20]
 800bb04:	6849      	ldr	r1, [r1, #4]
 800bb06:	0849      	lsrs	r1, r1, #1
 800bb08:	2000      	movs	r0, #0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	eb12 0804 	adds.w	r8, r2, r4
 800bb12:	eb43 0905 	adc.w	r9, r3, r5
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	469a      	mov	sl, r3
 800bb1e:	4693      	mov	fp, r2
 800bb20:	4652      	mov	r2, sl
 800bb22:	465b      	mov	r3, fp
 800bb24:	4640      	mov	r0, r8
 800bb26:	4649      	mov	r1, r9
 800bb28:	f7f4 fc2a 	bl	8000380 <__aeabi_uldivmod>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4613      	mov	r3, r2
 800bb32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb3a:	d308      	bcc.n	800bb4e <UART_SetConfig+0x79a>
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb42:	d204      	bcs.n	800bb4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb4a:	60da      	str	r2, [r3, #12]
 800bb4c:	e17c      	b.n	800be48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb54:	e178      	b.n	800be48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb5e:	f040 80c5 	bne.w	800bcec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bb62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	dc48      	bgt.n	800bbfc <UART_SetConfig+0x848>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	db7b      	blt.n	800bc66 <UART_SetConfig+0x8b2>
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d879      	bhi.n	800bc66 <UART_SetConfig+0x8b2>
 800bb72:	a201      	add	r2, pc, #4	@ (adr r2, 800bb78 <UART_SetConfig+0x7c4>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bc03 	.word	0x0800bc03
 800bb7c:	0800bc0b 	.word	0x0800bc0b
 800bb80:	0800bc67 	.word	0x0800bc67
 800bb84:	0800bc67 	.word	0x0800bc67
 800bb88:	0800bc13 	.word	0x0800bc13
 800bb8c:	0800bc67 	.word	0x0800bc67
 800bb90:	0800bc67 	.word	0x0800bc67
 800bb94:	0800bc67 	.word	0x0800bc67
 800bb98:	0800bc23 	.word	0x0800bc23
 800bb9c:	0800bc67 	.word	0x0800bc67
 800bba0:	0800bc67 	.word	0x0800bc67
 800bba4:	0800bc67 	.word	0x0800bc67
 800bba8:	0800bc67 	.word	0x0800bc67
 800bbac:	0800bc67 	.word	0x0800bc67
 800bbb0:	0800bc67 	.word	0x0800bc67
 800bbb4:	0800bc67 	.word	0x0800bc67
 800bbb8:	0800bc33 	.word	0x0800bc33
 800bbbc:	0800bc67 	.word	0x0800bc67
 800bbc0:	0800bc67 	.word	0x0800bc67
 800bbc4:	0800bc67 	.word	0x0800bc67
 800bbc8:	0800bc67 	.word	0x0800bc67
 800bbcc:	0800bc67 	.word	0x0800bc67
 800bbd0:	0800bc67 	.word	0x0800bc67
 800bbd4:	0800bc67 	.word	0x0800bc67
 800bbd8:	0800bc67 	.word	0x0800bc67
 800bbdc:	0800bc67 	.word	0x0800bc67
 800bbe0:	0800bc67 	.word	0x0800bc67
 800bbe4:	0800bc67 	.word	0x0800bc67
 800bbe8:	0800bc67 	.word	0x0800bc67
 800bbec:	0800bc67 	.word	0x0800bc67
 800bbf0:	0800bc67 	.word	0x0800bc67
 800bbf4:	0800bc67 	.word	0x0800bc67
 800bbf8:	0800bc59 	.word	0x0800bc59
 800bbfc:	2b40      	cmp	r3, #64	@ 0x40
 800bbfe:	d02e      	beq.n	800bc5e <UART_SetConfig+0x8aa>
 800bc00:	e031      	b.n	800bc66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc02:	f7fa fb57 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 800bc06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc08:	e033      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc0a:	f7fa fb69 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800bc0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc10:	e02f      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fc fb18 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc20:	e027      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc22:	f107 0318 	add.w	r3, r7, #24
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fc fc64 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc30:	e01f      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc32:	4b2d      	ldr	r3, [pc, #180]	@ (800bce8 <UART_SetConfig+0x934>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 0320 	and.w	r3, r3, #32
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d009      	beq.n	800bc52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bce8 <UART_SetConfig+0x934>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	08db      	lsrs	r3, r3, #3
 800bc44:	f003 0303 	and.w	r3, r3, #3
 800bc48:	4a24      	ldr	r2, [pc, #144]	@ (800bcdc <UART_SetConfig+0x928>)
 800bc4a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc50:	e00f      	b.n	800bc72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc52:	4b22      	ldr	r3, [pc, #136]	@ (800bcdc <UART_SetConfig+0x928>)
 800bc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc56:	e00c      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc58:	4b21      	ldr	r3, [pc, #132]	@ (800bce0 <UART_SetConfig+0x92c>)
 800bc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc5c:	e009      	b.n	800bc72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc64:	e005      	b.n	800bc72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc66:	2300      	movs	r3, #0
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 80e7 	beq.w	800be48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7e:	4a19      	ldr	r2, [pc, #100]	@ (800bce4 <UART_SetConfig+0x930>)
 800bc80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc84:	461a      	mov	r2, r3
 800bc86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc88:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc8c:	005a      	lsls	r2, r3, #1
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	441a      	add	r2, r3
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca2:	2b0f      	cmp	r3, #15
 800bca4:	d916      	bls.n	800bcd4 <UART_SetConfig+0x920>
 800bca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcac:	d212      	bcs.n	800bcd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f023 030f 	bic.w	r3, r3, #15
 800bcb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcba:	085b      	lsrs	r3, r3, #1
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f003 0307 	and.w	r3, r3, #7
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bcd0:	60da      	str	r2, [r3, #12]
 800bcd2:	e0b9      	b.n	800be48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcda:	e0b5      	b.n	800be48 <UART_SetConfig+0xa94>
 800bcdc:	03d09000 	.word	0x03d09000
 800bce0:	003d0900 	.word	0x003d0900
 800bce4:	08011374 	.word	0x08011374
 800bce8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bcec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	dc49      	bgt.n	800bd88 <UART_SetConfig+0x9d4>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	db7c      	blt.n	800bdf2 <UART_SetConfig+0xa3e>
 800bcf8:	2b20      	cmp	r3, #32
 800bcfa:	d87a      	bhi.n	800bdf2 <UART_SetConfig+0xa3e>
 800bcfc:	a201      	add	r2, pc, #4	@ (adr r2, 800bd04 <UART_SetConfig+0x950>)
 800bcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd02:	bf00      	nop
 800bd04:	0800bd8f 	.word	0x0800bd8f
 800bd08:	0800bd97 	.word	0x0800bd97
 800bd0c:	0800bdf3 	.word	0x0800bdf3
 800bd10:	0800bdf3 	.word	0x0800bdf3
 800bd14:	0800bd9f 	.word	0x0800bd9f
 800bd18:	0800bdf3 	.word	0x0800bdf3
 800bd1c:	0800bdf3 	.word	0x0800bdf3
 800bd20:	0800bdf3 	.word	0x0800bdf3
 800bd24:	0800bdaf 	.word	0x0800bdaf
 800bd28:	0800bdf3 	.word	0x0800bdf3
 800bd2c:	0800bdf3 	.word	0x0800bdf3
 800bd30:	0800bdf3 	.word	0x0800bdf3
 800bd34:	0800bdf3 	.word	0x0800bdf3
 800bd38:	0800bdf3 	.word	0x0800bdf3
 800bd3c:	0800bdf3 	.word	0x0800bdf3
 800bd40:	0800bdf3 	.word	0x0800bdf3
 800bd44:	0800bdbf 	.word	0x0800bdbf
 800bd48:	0800bdf3 	.word	0x0800bdf3
 800bd4c:	0800bdf3 	.word	0x0800bdf3
 800bd50:	0800bdf3 	.word	0x0800bdf3
 800bd54:	0800bdf3 	.word	0x0800bdf3
 800bd58:	0800bdf3 	.word	0x0800bdf3
 800bd5c:	0800bdf3 	.word	0x0800bdf3
 800bd60:	0800bdf3 	.word	0x0800bdf3
 800bd64:	0800bdf3 	.word	0x0800bdf3
 800bd68:	0800bdf3 	.word	0x0800bdf3
 800bd6c:	0800bdf3 	.word	0x0800bdf3
 800bd70:	0800bdf3 	.word	0x0800bdf3
 800bd74:	0800bdf3 	.word	0x0800bdf3
 800bd78:	0800bdf3 	.word	0x0800bdf3
 800bd7c:	0800bdf3 	.word	0x0800bdf3
 800bd80:	0800bdf3 	.word	0x0800bdf3
 800bd84:	0800bde5 	.word	0x0800bde5
 800bd88:	2b40      	cmp	r3, #64	@ 0x40
 800bd8a:	d02e      	beq.n	800bdea <UART_SetConfig+0xa36>
 800bd8c:	e031      	b.n	800bdf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd8e:	f7fa fa91 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 800bd92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd94:	e033      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd96:	f7fa faa3 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800bd9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd9c:	e02f      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fc fa52 	bl	800824c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdac:	e027      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdae:	f107 0318 	add.w	r3, r7, #24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fc fb9e 	bl	80084f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdbc:	e01f      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdbe:	4b2d      	ldr	r3, [pc, #180]	@ (800be74 <UART_SetConfig+0xac0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdca:	4b2a      	ldr	r3, [pc, #168]	@ (800be74 <UART_SetConfig+0xac0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	08db      	lsrs	r3, r3, #3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	4a28      	ldr	r2, [pc, #160]	@ (800be78 <UART_SetConfig+0xac4>)
 800bdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bddc:	e00f      	b.n	800bdfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bdde:	4b26      	ldr	r3, [pc, #152]	@ (800be78 <UART_SetConfig+0xac4>)
 800bde0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde2:	e00c      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bde4:	4b25      	ldr	r3, [pc, #148]	@ (800be7c <UART_SetConfig+0xac8>)
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde8:	e009      	b.n	800bdfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdf0:	e005      	b.n	800bdfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bdfc:	bf00      	nop
    }

    if (pclk != 0U)
 800bdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d021      	beq.n	800be48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	4a1d      	ldr	r2, [pc, #116]	@ (800be80 <UART_SetConfig+0xacc>)
 800be0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0e:	461a      	mov	r2, r3
 800be10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be12:	fbb3 f2f2 	udiv	r2, r3, r2
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	085b      	lsrs	r3, r3, #1
 800be1c:	441a      	add	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	fbb2 f3f3 	udiv	r3, r2, r3
 800be26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	2b0f      	cmp	r3, #15
 800be2c:	d909      	bls.n	800be42 <UART_SetConfig+0xa8e>
 800be2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be34:	d205      	bcs.n	800be42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	b29a      	uxth	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60da      	str	r2, [r3, #12]
 800be40:	e002      	b.n	800be48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2201      	movs	r2, #1
 800be54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2200      	movs	r2, #0
 800be62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be64:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3748      	adds	r7, #72	@ 0x48
 800be6c:	46bd      	mov	sp, r7
 800be6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be72:	bf00      	nop
 800be74:	58024400 	.word	0x58024400
 800be78:	03d09000 	.word	0x03d09000
 800be7c:	003d0900 	.word	0x003d0900
 800be80:	08011374 	.word	0x08011374

0800be84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be90:	f003 0308 	and.w	r3, r3, #8
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	430a      	orrs	r2, r1
 800beac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed4:	f003 0302 	and.w	r3, r3, #2
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00a      	beq.n	800bef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	430a      	orrs	r2, r1
 800bf12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf18:	f003 0310 	and.w	r3, r3, #16
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00a      	beq.n	800bf36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3a:	f003 0320 	and.w	r3, r3, #32
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00a      	beq.n	800bf58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	430a      	orrs	r2, r1
 800bf56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d01a      	beq.n	800bf9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf82:	d10a      	bne.n	800bf9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	605a      	str	r2, [r3, #4]
  }
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b098      	sub	sp, #96	@ 0x60
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfd8:	f7f5 fc82 	bl	80018e0 <HAL_GetTick>
 800bfdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0308 	and.w	r3, r3, #8
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d12f      	bne.n	800c04c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bff4:	2200      	movs	r2, #0
 800bff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f88e 	bl	800c11c <UART_WaitOnFlagUntilTimeout>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d022      	beq.n	800c04c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c01a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	461a      	mov	r2, r3
 800c022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c024:	647b      	str	r3, [r7, #68]	@ 0x44
 800c026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c02a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e6      	bne.n	800c006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2220      	movs	r2, #32
 800c03c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e063      	b.n	800c114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 0304 	and.w	r3, r3, #4
 800c056:	2b04      	cmp	r3, #4
 800c058:	d149      	bne.n	800c0ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c05a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c062:	2200      	movs	r2, #0
 800c064:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f857 	bl	800c11c <UART_WaitOnFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d03c      	beq.n	800c0ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	623b      	str	r3, [r7, #32]
   return(result);
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c092:	633b      	str	r3, [r7, #48]	@ 0x30
 800c094:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e6      	bne.n	800c074 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 0301 	bic.w	r3, r3, #1
 800c0bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0c6:	61fa      	str	r2, [r7, #28]
 800c0c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	69b9      	ldr	r1, [r7, #24]
 800c0cc:	69fa      	ldr	r2, [r7, #28]
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e5      	bne.n	800c0a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e012      	b.n	800c114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2220      	movs	r2, #32
 800c0fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3758      	adds	r7, #88	@ 0x58
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	4613      	mov	r3, r2
 800c12a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c12c:	e04f      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d04b      	beq.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c136:	f7f5 fbd3 	bl	80018e0 <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	429a      	cmp	r2, r3
 800c144:	d302      	bcc.n	800c14c <UART_WaitOnFlagUntilTimeout+0x30>
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e04e      	b.n	800c1ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 0304 	and.w	r3, r3, #4
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d037      	beq.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b80      	cmp	r3, #128	@ 0x80
 800c162:	d034      	beq.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2b40      	cmp	r3, #64	@ 0x40
 800c168:	d031      	beq.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	69db      	ldr	r3, [r3, #28]
 800c170:	f003 0308 	and.w	r3, r3, #8
 800c174:	2b08      	cmp	r3, #8
 800c176:	d110      	bne.n	800c19a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2208      	movs	r2, #8
 800c17e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f000 f839 	bl	800c1f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2208      	movs	r2, #8
 800c18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e029      	b.n	800c1ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1a8:	d111      	bne.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f81f 	bl	800c1f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	e00f      	b.n	800c1ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	69da      	ldr	r2, [r3, #28]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	bf0c      	ite	eq
 800c1de:	2301      	moveq	r3, #1
 800c1e0:	2300      	movne	r3, #0
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d0a0      	beq.n	800c12e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b095      	sub	sp, #84	@ 0x54
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c21e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c220:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c226:	e841 2300 	strex	r3, r2, [r1]
 800c22a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e6      	bne.n	800c200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3308      	adds	r3, #8
 800c238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	61fb      	str	r3, [r7, #28]
   return(result);
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	4b1e      	ldr	r3, [pc, #120]	@ (800c2c0 <UART_EndRxTransfer+0xc8>)
 800c246:	4013      	ands	r3, r2
 800c248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3308      	adds	r3, #8
 800c250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c25a:	e841 2300 	strex	r3, r2, [r1]
 800c25e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e5      	bne.n	800c232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d118      	bne.n	800c2a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f023 0310 	bic.w	r3, r3, #16
 800c282:	647b      	str	r3, [r7, #68]	@ 0x44
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6979      	ldr	r1, [r7, #20]
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	613b      	str	r3, [r7, #16]
   return(result);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e6      	bne.n	800c26e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2b4:	bf00      	nop
 800c2b6:	3754      	adds	r7, #84	@ 0x54
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	effffffe 	.word	0xeffffffe

0800c2c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff f854 	bl	800b388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2e0:	bf00      	nop
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c304:	61fb      	str	r3, [r7, #28]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	61bb      	str	r3, [r7, #24]
 800c310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6979      	ldr	r1, [r7, #20]
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	613b      	str	r3, [r7, #16]
   return(result);
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e6      	bne.n	800c2f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2220      	movs	r2, #32
 800c326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7ff f81f 	bl	800b374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c336:	bf00      	nop
 800c338:	3720      	adds	r7, #32
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c346:	bf00      	nop
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d101      	bne.n	800c390 <HAL_UARTEx_DisableFifoMode+0x16>
 800c38c:	2302      	movs	r3, #2
 800c38e:	e027      	b.n	800c3e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2224      	movs	r2, #36	@ 0x24
 800c39c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f022 0201 	bic.w	r2, r2, #1
 800c3b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d101      	bne.n	800c404 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c400:	2302      	movs	r3, #2
 800c402:	e02d      	b.n	800c460 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2224      	movs	r2, #36	@ 0x24
 800c410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f022 0201 	bic.w	r2, r2, #1
 800c42a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	430a      	orrs	r2, r1
 800c43e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f84f 	bl	800c4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e02d      	b.n	800c4dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2224      	movs	r2, #36	@ 0x24
 800c48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 0201 	bic.w	r2, r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f811 	bl	800c4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d108      	bne.n	800c506 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c504:	e031      	b.n	800c56a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c506:	2310      	movs	r3, #16
 800c508:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c50a:	2310      	movs	r3, #16
 800c50c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	0e5b      	lsrs	r3, r3, #25
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0307 	and.w	r3, r3, #7
 800c51c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	0f5b      	lsrs	r3, r3, #29
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 0307 	and.w	r3, r3, #7
 800c52c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	7b3a      	ldrb	r2, [r7, #12]
 800c532:	4911      	ldr	r1, [pc, #68]	@ (800c578 <UARTEx_SetNbDataToProcess+0x94>)
 800c534:	5c8a      	ldrb	r2, [r1, r2]
 800c536:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c53a:	7b3a      	ldrb	r2, [r7, #12]
 800c53c:	490f      	ldr	r1, [pc, #60]	@ (800c57c <UARTEx_SetNbDataToProcess+0x98>)
 800c53e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c540:	fb93 f3f2 	sdiv	r3, r3, r2
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	7b7a      	ldrb	r2, [r7, #13]
 800c550:	4909      	ldr	r1, [pc, #36]	@ (800c578 <UARTEx_SetNbDataToProcess+0x94>)
 800c552:	5c8a      	ldrb	r2, [r1, r2]
 800c554:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c558:	7b7a      	ldrb	r2, [r7, #13]
 800c55a:	4908      	ldr	r1, [pc, #32]	@ (800c57c <UARTEx_SetNbDataToProcess+0x98>)
 800c55c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c55e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c56a:	bf00      	nop
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	0801138c 	.word	0x0801138c
 800c57c:	08011394 	.word	0x08011394

0800c580 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c580:	b084      	sub	sp, #16
 800c582:	b480      	push	{r7}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	f107 001c 	add.w	r0, r7, #28
 800c58e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c596:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c598:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c59a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c59e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c5a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c5a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	4b07      	ldr	r3, [pc, #28]	@ (800c5d0 <SDMMC_Init+0x50>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	b004      	add	sp, #16
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	ffc02c00 	.word	0xffc02c00

0800c5d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f043 0203 	orr.w	r2, r3, #3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0303 	and.w	r3, r3, #3
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
	...

0800c650 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c66e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c674:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c67a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <SDMMC_SendCommand+0x50>)
 800c688:	4013      	ands	r3, r2
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	fffee0c0 	.word	0xfffee0c0

0800c6a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	b2db      	uxtb	r3, r3
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c70a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c710:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c716:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c722:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c72e:	2300      	movs	r3, #0

}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c74a:	2310      	movs	r3, #16
 800c74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c74e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c754:	2300      	movs	r3, #0
 800c756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c75c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c75e:	f107 0308 	add.w	r3, r7, #8
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff ff73 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c76a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c76e:	2110      	movs	r1, #16
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fa5f 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c778:	69fb      	ldr	r3, [r7, #28]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3720      	adds	r7, #32
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b088      	sub	sp, #32
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c790:	2311      	movs	r3, #17
 800c792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c79a:	2300      	movs	r3, #0
 800c79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a4:	f107 0308 	add.w	r3, r7, #8
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff ff50 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b4:	2111      	movs	r1, #17
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fa3c 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7be:	69fb      	ldr	r3, [r7, #28]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c7d6:	2312      	movs	r3, #18
 800c7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ea:	f107 0308 	add.w	r3, r7, #8
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff2d 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7fa:	2112      	movs	r1, #18
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fa19 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c804:	69fb      	ldr	r3, [r7, #28]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3720      	adds	r7, #32
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b088      	sub	sp, #32
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c81c:	2318      	movs	r3, #24
 800c81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c82a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c830:	f107 0308 	add.w	r3, r7, #8
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff ff0a 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c83c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c840:	2118      	movs	r1, #24
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f9f6 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c84a:	69fb      	ldr	r3, [r7, #28]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3720      	adds	r7, #32
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c862:	2319      	movs	r3, #25
 800c864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c86c:	2300      	movs	r3, #0
 800c86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c876:	f107 0308 	add.w	r3, r7, #8
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff fee7 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c882:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c886:	2119      	movs	r1, #25
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f9d3 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c890:	69fb      	ldr	r3, [r7, #28]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3720      	adds	r7, #32
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
	...

0800c89c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8ba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8d4:	f107 0308 	add.w	r3, r7, #8
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff feb8 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c8e0:	4a0b      	ldr	r2, [pc, #44]	@ (800c910 <SDMMC_CmdStopTransfer+0x74>)
 800c8e2:	210c      	movs	r1, #12
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f9a5 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c8ea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8fe:	d101      	bne.n	800c904 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c904:	69fb      	ldr	r3, [r7, #28]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3720      	adds	r7, #32
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	05f5e100 	.word	0x05f5e100

0800c914 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b088      	sub	sp, #32
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c922:	2307      	movs	r3, #7
 800c924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c926:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c92a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c92c:	2300      	movs	r3, #0
 800c92e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c936:	f107 0308 	add.w	r3, r7, #8
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff fe87 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c942:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c946:	2107      	movs	r1, #7
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f973 	bl	800cc34 <SDMMC_GetCmdResp1>
 800c94e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c950:	69fb      	ldr	r3, [r7, #28]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3720      	adds	r7, #32
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b088      	sub	sp, #32
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c96a:	2300      	movs	r3, #0
 800c96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fe66 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fb97 	bl	800d0b8 <SDMMC_GetCmdError>
 800c98a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c98c:	69fb      	ldr	r3, [r7, #28]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3720      	adds	r7, #32
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b088      	sub	sp, #32
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c99e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c9a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c9a4:	2308      	movs	r3, #8
 800c9a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7ff fe46 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fb29 	bl	800d01c <SDMMC_GetCmdResp7>
 800c9ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3720      	adds	r7, #32
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b088      	sub	sp, #32
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9e4:	2337      	movs	r3, #55	@ 0x37
 800c9e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9f8:	f107 0308 	add.w	r3, r7, #8
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff fe26 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ca04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca08:	2137      	movs	r1, #55	@ 0x37
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f912 	bl	800cc34 <SDMMC_GetCmdResp1>
 800ca10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca12:	69fb      	ldr	r3, [r7, #28]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca2a:	2329      	movs	r3, #41	@ 0x29
 800ca2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca34:	2300      	movs	r3, #0
 800ca36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff fe03 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa2e 	bl	800ceac <SDMMC_GetCmdResp3>
 800ca50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca52:	69fb      	ldr	r3, [r7, #28]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3720      	adds	r7, #32
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca6a:	2306      	movs	r3, #6
 800ca6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca7e:	f107 0308 	add.w	r3, r7, #8
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fde3 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca8e:	2106      	movs	r1, #6
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f8cf 	bl	800cc34 <SDMMC_GetCmdResp1>
 800ca96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca98:	69fb      	ldr	r3, [r7, #28]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3720      	adds	r7, #32
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b088      	sub	sp, #32
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800caae:	2333      	movs	r3, #51	@ 0x33
 800cab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cab2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cab8:	2300      	movs	r3, #0
 800caba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cabc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cac2:	f107 0308 	add.w	r3, r7, #8
 800cac6:	4619      	mov	r1, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff fdc1 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cace:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cad2:	2133      	movs	r1, #51	@ 0x33
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f8ad 	bl	800cc34 <SDMMC_GetCmdResp1>
 800cada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cadc:	69fb      	ldr	r3, [r7, #28]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3720      	adds	r7, #32
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b088      	sub	sp, #32
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800caee:	2300      	movs	r3, #0
 800caf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800caf2:	2302      	movs	r3, #2
 800caf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800caf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cafa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fd9f 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f980 	bl	800ce18 <SDMMC_GetCmdResp2>
 800cb18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb32:	2309      	movs	r3, #9
 800cb34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cb3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb46:	f107 0308 	add.w	r3, r7, #8
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fd7f 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f960 	bl	800ce18 <SDMMC_GetCmdResp2>
 800cb58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb72:	2303      	movs	r3, #3
 800cb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb86:	f107 0308 	add.w	r3, r7, #8
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff fd5f 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	2103      	movs	r1, #3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f9c8 	bl	800cf2c <SDMMC_GetCmdResp6>
 800cb9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3720      	adds	r7, #32
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cbb6:	230d      	movs	r3, #13
 800cbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbca:	f107 0308 	add.w	r3, r7, #8
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fd3d 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cbd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbda:	210d      	movs	r1, #13
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f829 	bl	800cc34 <SDMMC_GetCmdResp1>
 800cbe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b088      	sub	sp, #32
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cbfa:	230d      	movs	r3, #13
 800cbfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc0e:	f107 0308 	add.w	r3, r7, #8
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff fd1b 	bl	800c650 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cc1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1e:	210d      	movs	r1, #13
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f807 	bl	800cc34 <SDMMC_GetCmdResp1>
 800cc26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc28:	69fb      	ldr	r3, [r7, #28]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc42:	4b70      	ldr	r3, [pc, #448]	@ (800ce04 <SDMMC_GetCmdResp1+0x1d0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a70      	ldr	r2, [pc, #448]	@ (800ce08 <SDMMC_GetCmdResp1+0x1d4>)
 800cc48:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4c:	0a5a      	lsrs	r2, r3, #9
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	fb02 f303 	mul.w	r3, r2, r3
 800cc54:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	61fa      	str	r2, [r7, #28]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d102      	bne.n	800cc66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc64:	e0c9      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	4b67      	ldr	r3, [pc, #412]	@ (800ce0c <SDMMC_GetCmdResp1+0x1d8>)
 800cc70:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0ef      	beq.n	800cc56 <SDMMC_GetCmdResp1+0x22>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1ea      	bne.n	800cc56 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2204      	movs	r2, #4
 800cc90:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc92:	2304      	movs	r3, #4
 800cc94:	e0b1      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e0a6      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4a58      	ldr	r2, [pc, #352]	@ (800ce10 <SDMMC_GetCmdResp1+0x1dc>)
 800ccb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff fcf6 	bl	800c6a4 <SDMMC_GetCommandResponse>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d001      	beq.n	800ccc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e099      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff fcf8 	bl	800c6be <SDMMC_GetResponse>
 800ccce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	4b50      	ldr	r3, [pc, #320]	@ (800ce14 <SDMMC_GetCmdResp1+0x1e0>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e08d      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da02      	bge.n	800ccea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cce8:	e087      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccf4:	2340      	movs	r3, #64	@ 0x40
 800ccf6:	e080      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cd02:	2380      	movs	r3, #128	@ 0x80
 800cd04:	e079      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd14:	e071      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd24:	e069      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd34:	e061      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd44:	e059      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd54:	e051      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd64:	e049      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd74:	e041      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd84:	e039      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cd94:	e031      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cda0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cda4:	e029      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cdb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cdb4:	e021      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cdc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cdc4:	e019      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cdd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cdd4:	e011      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cde0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cde4:	e009      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdf0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cdf4:	e001      	b.n	800cdfa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3720      	adds	r7, #32
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	24000000 	.word	0x24000000
 800ce08:	10624dd3 	.word	0x10624dd3
 800ce0c:	00200045 	.word	0x00200045
 800ce10:	002000c5 	.word	0x002000c5
 800ce14:	fdffe008 	.word	0xfdffe008

0800ce18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ce20:	4b1f      	ldr	r3, [pc, #124]	@ (800cea0 <SDMMC_GetCmdResp2+0x88>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a1f      	ldr	r2, [pc, #124]	@ (800cea4 <SDMMC_GetCmdResp2+0x8c>)
 800ce26:	fba2 2303 	umull	r2, r3, r2, r3
 800ce2a:	0a5b      	lsrs	r3, r3, #9
 800ce2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce30:	fb02 f303 	mul.w	r3, r2, r3
 800ce34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	60fa      	str	r2, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce44:	e026      	b.n	800ce94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0ef      	beq.n	800ce36 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1ea      	bne.n	800ce36 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2204      	movs	r2, #4
 800ce70:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce72:	2304      	movs	r3, #4
 800ce74:	e00e      	b.n	800ce94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e003      	b.n	800ce94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a06      	ldr	r2, [pc, #24]	@ (800cea8 <SDMMC_GetCmdResp2+0x90>)
 800ce90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	24000000 	.word	0x24000000
 800cea4:	10624dd3 	.word	0x10624dd3
 800cea8:	002000c5 	.word	0x002000c5

0800ceac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ceb4:	4b1a      	ldr	r3, [pc, #104]	@ (800cf20 <SDMMC_GetCmdResp3+0x74>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a1a      	ldr	r2, [pc, #104]	@ (800cf24 <SDMMC_GetCmdResp3+0x78>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	0a5b      	lsrs	r3, r3, #9
 800cec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec4:	fb02 f303 	mul.w	r3, r2, r3
 800cec8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	1e5a      	subs	r2, r3, #1
 800cece:	60fa      	str	r2, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ced4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ced8:	e01b      	b.n	800cf12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cede:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0ef      	beq.n	800ceca <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1ea      	bne.n	800ceca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2204      	movs	r2, #4
 800cf04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf06:	2304      	movs	r3, #4
 800cf08:	e003      	b.n	800cf12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a06      	ldr	r2, [pc, #24]	@ (800cf28 <SDMMC_GetCmdResp3+0x7c>)
 800cf0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	24000000 	.word	0x24000000
 800cf24:	10624dd3 	.word	0x10624dd3
 800cf28:	002000c5 	.word	0x002000c5

0800cf2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	460b      	mov	r3, r1
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cf3a:	4b35      	ldr	r3, [pc, #212]	@ (800d010 <SDMMC_GetCmdResp6+0xe4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a35      	ldr	r2, [pc, #212]	@ (800d014 <SDMMC_GetCmdResp6+0xe8>)
 800cf40:	fba2 2303 	umull	r2, r3, r2, r3
 800cf44:	0a5b      	lsrs	r3, r3, #9
 800cf46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
 800cf4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	1e5a      	subs	r2, r3, #1
 800cf54:	61fa      	str	r2, [r7, #28]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf5e:	e052      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf64:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d0ef      	beq.n	800cf50 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1ea      	bne.n	800cf50 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf7e:	f003 0304 	and.w	r3, r3, #4
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2204      	movs	r2, #4
 800cf8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	e03a      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf94:	f003 0301 	and.w	r3, r3, #1
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d004      	beq.n	800cfa6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e02f      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff fb7c 	bl	800c6a4 <SDMMC_GetCommandResponse>
 800cfac:	4603      	mov	r3, r0
 800cfae:	461a      	mov	r2, r3
 800cfb0:	7afb      	ldrb	r3, [r7, #11]
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d001      	beq.n	800cfba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e025      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4a16      	ldr	r2, [pc, #88]	@ (800d018 <SDMMC_GetCmdResp6+0xec>)
 800cfbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7ff fb7b 	bl	800c6be <SDMMC_GetResponse>
 800cfc8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d106      	bne.n	800cfe2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	0c1b      	lsrs	r3, r3, #16
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e011      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cff0:	e009      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d000:	e001      	b.n	800d006 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d002:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d006:	4618      	mov	r0, r3
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	24000000 	.word	0x24000000
 800d014:	10624dd3 	.word	0x10624dd3
 800d018:	002000c5 	.word	0x002000c5

0800d01c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d024:	4b22      	ldr	r3, [pc, #136]	@ (800d0b0 <SDMMC_GetCmdResp7+0x94>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a22      	ldr	r2, [pc, #136]	@ (800d0b4 <SDMMC_GetCmdResp7+0x98>)
 800d02a:	fba2 2303 	umull	r2, r3, r2, r3
 800d02e:	0a5b      	lsrs	r3, r3, #9
 800d030:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d034:	fb02 f303 	mul.w	r3, r2, r3
 800d038:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	1e5a      	subs	r2, r3, #1
 800d03e:	60fa      	str	r2, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d044:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d048:	e02c      	b.n	800d0a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d04e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0ef      	beq.n	800d03a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1ea      	bne.n	800d03a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d004      	beq.n	800d07a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2204      	movs	r2, #4
 800d074:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d076:	2304      	movs	r3, #4
 800d078:	e014      	b.n	800d0a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d004      	beq.n	800d090 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e009      	b.n	800d0a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2240      	movs	r2, #64	@ 0x40
 800d0a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0a2:	2300      	movs	r3, #0

}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	24000000 	.word	0x24000000
 800d0b4:	10624dd3 	.word	0x10624dd3

0800d0b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d0c0:	4b11      	ldr	r3, [pc, #68]	@ (800d108 <SDMMC_GetCmdError+0x50>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a11      	ldr	r2, [pc, #68]	@ (800d10c <SDMMC_GetCmdError+0x54>)
 800d0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ca:	0a5b      	lsrs	r3, r3, #9
 800d0cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0d0:	fb02 f303 	mul.w	r3, r2, r3
 800d0d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	1e5a      	subs	r2, r3, #1
 800d0da:	60fa      	str	r2, [r7, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0e4:	e009      	b.n	800d0fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0f1      	beq.n	800d0d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a06      	ldr	r2, [pc, #24]	@ (800d110 <SDMMC_GetCmdError+0x58>)
 800d0f6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	24000000 	.word	0x24000000
 800d10c:	10624dd3 	.word	0x10624dd3
 800d110:	002000c5 	.word	0x002000c5

0800d114 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d118:	4904      	ldr	r1, [pc, #16]	@ (800d12c <MX_FATFS_Init+0x18>)
 800d11a:	4805      	ldr	r0, [pc, #20]	@ (800d130 <MX_FATFS_Init+0x1c>)
 800d11c:	f003 f834 	bl	8010188 <FATFS_LinkDriver>
 800d120:	4603      	mov	r3, r0
 800d122:	461a      	mov	r2, r3
 800d124:	4b03      	ldr	r3, [pc, #12]	@ (800d134 <MX_FATFS_Init+0x20>)
 800d126:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d128:	bf00      	nop
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	24075614 	.word	0x24075614
 800d130:	0801139c 	.word	0x0801139c
 800d134:	24075610 	.word	0x24075610

0800d138 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d138:	b480      	push	{r7}
 800d13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d13c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d13e:	4618      	mov	r0, r3
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d152:	f000 f885 	bl	800d260 <BSP_SD_IsDetected>
 800d156:	4603      	mov	r3, r0
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d001      	beq.n	800d160 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d15c:	2302      	movs	r3, #2
 800d15e:	e012      	b.n	800d186 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d160:	480b      	ldr	r0, [pc, #44]	@ (800d190 <BSP_SD_Init+0x48>)
 800d162:	f7fb fdd1 	bl	8008d08 <HAL_SD_Init>
 800d166:	4603      	mov	r3, r0
 800d168:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d109      	bne.n	800d184 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d170:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d174:	4806      	ldr	r0, [pc, #24]	@ (800d190 <BSP_SD_Init+0x48>)
 800d176:	f7fc fc87 	bl	8009a88 <HAL_SD_ConfigWideBusOperation>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d184:	79fb      	ldrb	r3, [r7, #7]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	2400018c 	.word	0x2400018c

0800d194 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	4806      	ldr	r0, [pc, #24]	@ (800d1c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d1ac:	f7fb fecc 	bl	8008f48 <HAL_SD_ReadBlocks_DMA>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	2400018c 	.word	0x2400018c

0800d1c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	68f9      	ldr	r1, [r7, #12]
 800d1de:	4806      	ldr	r0, [pc, #24]	@ (800d1f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d1e0:	f7fb ff5a 	bl	8009098 <HAL_SD_WriteBlocks_DMA>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	2400018c 	.word	0x2400018c

0800d1fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d200:	4805      	ldr	r0, [pc, #20]	@ (800d218 <BSP_SD_GetCardState+0x1c>)
 800d202:	f7fc fd53 	bl	8009cac <HAL_SD_GetCardState>
 800d206:	4603      	mov	r3, r0
 800d208:	2b04      	cmp	r3, #4
 800d20a:	bf14      	ite	ne
 800d20c:	2301      	movne	r3, #1
 800d20e:	2300      	moveq	r3, #0
 800d210:	b2db      	uxtb	r3, r3
}
 800d212:	4618      	mov	r0, r3
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	2400018c 	.word	0x2400018c

0800d21c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d224:	6879      	ldr	r1, [r7, #4]
 800d226:	4803      	ldr	r0, [pc, #12]	@ (800d234 <BSP_SD_GetCardInfo+0x18>)
 800d228:	f7fc fc02 	bl	8009a30 <HAL_SD_GetCardInfo>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	2400018c 	.word	0x2400018c

0800d238 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d240:	f000 f9a0 	bl	800d584 <BSP_SD_WriteCpltCallback>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d254:	f000 f9a2 	bl	800d59c <BSP_SD_ReadCpltCallback>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d266:	2301      	movs	r3, #1
 800d268:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d26a:	f000 f80b 	bl	800d284 <BSP_PlatformIsDetected>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d274:	2300      	movs	r3, #0
 800d276:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	b2db      	uxtb	r3, r3
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d28a:	2301      	movs	r3, #1
 800d28c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d28e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d292:	4806      	ldr	r0, [pc, #24]	@ (800d2ac <BSP_PlatformIsDetected+0x28>)
 800d294:	f7f7 ffe8 	bl	8005268 <HAL_GPIO_ReadPin>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	58020400 	.word	0x58020400

0800d2b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d2b8:	f7f4 fb12 	bl	80018e0 <HAL_GetTick>
 800d2bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d2be:	e006      	b.n	800d2ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d2c0:	f7ff ff9c 	bl	800d1fc <BSP_SD_GetCardState>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e009      	b.n	800d2e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d2ce:	f7f4 fb07 	bl	80018e0 <HAL_GetTick>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d8f0      	bhi.n	800d2c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d2de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
	...

0800d2ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d324 <SD_CheckStatus+0x38>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d2fc:	f7ff ff7e 	bl	800d1fc <BSP_SD_GetCardState>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d107      	bne.n	800d316 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d306:	4b07      	ldr	r3, [pc, #28]	@ (800d324 <SD_CheckStatus+0x38>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f023 0301 	bic.w	r3, r3, #1
 800d310:	b2da      	uxtb	r2, r3
 800d312:	4b04      	ldr	r3, [pc, #16]	@ (800d324 <SD_CheckStatus+0x38>)
 800d314:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d316:	4b03      	ldr	r3, [pc, #12]	@ (800d324 <SD_CheckStatus+0x38>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	b2db      	uxtb	r3, r3
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	2400000d 	.word	0x2400000d

0800d328 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d332:	f7ff ff09 	bl	800d148 <BSP_SD_Init>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff ffd4 	bl	800d2ec <SD_CheckStatus>
 800d344:	4603      	mov	r3, r0
 800d346:	461a      	mov	r2, r3
 800d348:	4b04      	ldr	r3, [pc, #16]	@ (800d35c <SD_initialize+0x34>)
 800d34a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d34c:	4b03      	ldr	r3, [pc, #12]	@ (800d35c <SD_initialize+0x34>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	b2db      	uxtb	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	2400000d 	.word	0x2400000d

0800d360 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7ff ffbd 	bl	800d2ec <SD_CheckStatus>
 800d372:	4603      	mov	r3, r0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
 800d386:	603b      	str	r3, [r7, #0]
 800d388:	4603      	mov	r3, r0
 800d38a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d390:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d394:	f7ff ff8c 	bl	800d2b0 <SD_CheckStatusWithTimeout>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	da01      	bge.n	800d3a2 <SD_read+0x26>
  {
    return res;
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	e03b      	b.n	800d41a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	68b8      	ldr	r0, [r7, #8]
 800d3a8:	f7ff fef4 	bl	800d194 <BSP_SD_ReadBlocks_DMA>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d132      	bne.n	800d418 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d3b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d424 <SD_read+0xa8>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d3b8:	f7f4 fa92 	bl	80018e0 <HAL_GetTick>
 800d3bc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d3be:	bf00      	nop
 800d3c0:	4b18      	ldr	r3, [pc, #96]	@ (800d424 <SD_read+0xa8>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d108      	bne.n	800d3da <SD_read+0x5e>
 800d3c8:	f7f4 fa8a 	bl	80018e0 <HAL_GetTick>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d9f2      	bls.n	800d3c0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d3da:	4b12      	ldr	r3, [pc, #72]	@ (800d424 <SD_read+0xa8>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d102      	bne.n	800d3e8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	75fb      	strb	r3, [r7, #23]
 800d3e6:	e017      	b.n	800d418 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d424 <SD_read+0xa8>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d3ee:	f7f4 fa77 	bl	80018e0 <HAL_GetTick>
 800d3f2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d3f4:	e007      	b.n	800d406 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3f6:	f7ff ff01 	bl	800d1fc <BSP_SD_GetCardState>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d102      	bne.n	800d406 <SD_read+0x8a>
          {
            res = RES_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d404:	e008      	b.n	800d418 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d406:	f7f4 fa6b 	bl	80018e0 <HAL_GetTick>
 800d40a:	4602      	mov	r2, r0
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d414:	4293      	cmp	r3, r2
 800d416:	d9ee      	bls.n	800d3f6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d418:	7dfb      	ldrb	r3, [r7, #23]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	24075a80 	.word	0x24075a80

0800d428 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	603b      	str	r3, [r7, #0]
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d43c:	4b24      	ldr	r3, [pc, #144]	@ (800d4d0 <SD_write+0xa8>)
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d442:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d446:	f7ff ff33 	bl	800d2b0 <SD_CheckStatusWithTimeout>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	da01      	bge.n	800d454 <SD_write+0x2c>
  {
    return res;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	e038      	b.n	800d4c6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d454:	683a      	ldr	r2, [r7, #0]
 800d456:	6879      	ldr	r1, [r7, #4]
 800d458:	68b8      	ldr	r0, [r7, #8]
 800d45a:	f7ff feb5 	bl	800d1c8 <BSP_SD_WriteBlocks_DMA>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d12f      	bne.n	800d4c4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d464:	f7f4 fa3c 	bl	80018e0 <HAL_GetTick>
 800d468:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d46a:	bf00      	nop
 800d46c:	4b18      	ldr	r3, [pc, #96]	@ (800d4d0 <SD_write+0xa8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d108      	bne.n	800d486 <SD_write+0x5e>
 800d474:	f7f4 fa34 	bl	80018e0 <HAL_GetTick>
 800d478:	4602      	mov	r2, r0
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d482:	4293      	cmp	r3, r2
 800d484:	d9f2      	bls.n	800d46c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d486:	4b12      	ldr	r3, [pc, #72]	@ (800d4d0 <SD_write+0xa8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d102      	bne.n	800d494 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e017      	b.n	800d4c4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d494:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d0 <SD_write+0xa8>)
 800d496:	2200      	movs	r2, #0
 800d498:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d49a:	f7f4 fa21 	bl	80018e0 <HAL_GetTick>
 800d49e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4a0:	e007      	b.n	800d4b2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4a2:	f7ff feab 	bl	800d1fc <BSP_SD_GetCardState>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <SD_write+0x8a>
          {
            res = RES_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	75fb      	strb	r3, [r7, #23]
            break;
 800d4b0:	e008      	b.n	800d4c4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4b2:	f7f4 fa15 	bl	80018e0 <HAL_GetTick>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	1ad3      	subs	r3, r2, r3
 800d4bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d9ee      	bls.n	800d4a2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	24075a7c 	.word	0x24075a7c

0800d4d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	@ 0x30
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	603a      	str	r2, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d4ea:	4b25      	ldr	r3, [pc, #148]	@ (800d580 <SD_ioctl+0xac>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <SD_ioctl+0x28>
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e03c      	b.n	800d576 <SD_ioctl+0xa2>

  switch (cmd)
 800d4fc:	79bb      	ldrb	r3, [r7, #6]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d834      	bhi.n	800d56c <SD_ioctl+0x98>
 800d502:	a201      	add	r2, pc, #4	@ (adr r2, 800d508 <SD_ioctl+0x34>)
 800d504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d521 	.word	0x0800d521
 800d510:	0800d539 	.word	0x0800d539
 800d514:	0800d553 	.word	0x0800d553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d51e:	e028      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d520:	f107 0308 	add.w	r3, r7, #8
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff fe79 	bl	800d21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d52a:	6a3a      	ldr	r2, [r7, #32]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d530:	2300      	movs	r3, #0
 800d532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d536:	e01c      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d538:	f107 0308 	add.w	r3, r7, #8
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7ff fe6d 	bl	800d21c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	b29a      	uxth	r2, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d550:	e00f      	b.n	800d572 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d552:	f107 0308 	add.w	r3, r7, #8
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fe60 	bl	800d21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	0a5a      	lsrs	r2, r3, #9
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d56a:	e002      	b.n	800d572 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d56c:	2304      	movs	r3, #4
 800d56e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d576:	4618      	mov	r0, r3
 800d578:	3730      	adds	r7, #48	@ 0x30
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	2400000d 	.word	0x2400000d

0800d584 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d588:	4b03      	ldr	r3, [pc, #12]	@ (800d598 <BSP_SD_WriteCpltCallback+0x14>)
 800d58a:	2201      	movs	r2, #1
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	bf00      	nop
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	24075a7c 	.word	0x24075a7c

0800d59c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d5a0:	4b03      	ldr	r3, [pc, #12]	@ (800d5b0 <BSP_SD_ReadCpltCallback+0x14>)
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	601a      	str	r2, [r3, #0]
}
 800d5a6:	bf00      	nop
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	24075a80 	.word	0x24075a80

0800d5b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	4a08      	ldr	r2, [pc, #32]	@ (800d5e4 <disk_status+0x30>)
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	79fa      	ldrb	r2, [r7, #7]
 800d5cc:	4905      	ldr	r1, [pc, #20]	@ (800d5e4 <disk_status+0x30>)
 800d5ce:	440a      	add	r2, r1
 800d5d0:	7a12      	ldrb	r2, [r2, #8]
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	4798      	blx	r3
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	24075cac 	.word	0x24075cac

0800d5e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
 800d5f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d634 <disk_initialize+0x4c>)
 800d5fa:	5cd3      	ldrb	r3, [r2, r3]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d114      	bne.n	800d62a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	4a0c      	ldr	r2, [pc, #48]	@ (800d634 <disk_initialize+0x4c>)
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	79fa      	ldrb	r2, [r7, #7]
 800d60e:	4909      	ldr	r1, [pc, #36]	@ (800d634 <disk_initialize+0x4c>)
 800d610:	440a      	add	r2, r1
 800d612:	7a12      	ldrb	r2, [r2, #8]
 800d614:	4610      	mov	r0, r2
 800d616:	4798      	blx	r3
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	4a03      	ldr	r2, [pc, #12]	@ (800d634 <disk_initialize+0x4c>)
 800d626:	2101      	movs	r1, #1
 800d628:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	24075cac 	.word	0x24075cac

0800d638 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d638:	b590      	push	{r4, r7, lr}
 800d63a:	b087      	sub	sp, #28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	607a      	str	r2, [r7, #4]
 800d642:	603b      	str	r3, [r7, #0]
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	4a0a      	ldr	r2, [pc, #40]	@ (800d674 <disk_read+0x3c>)
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	689c      	ldr	r4, [r3, #8]
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4a07      	ldr	r2, [pc, #28]	@ (800d674 <disk_read+0x3c>)
 800d658:	4413      	add	r3, r2
 800d65a:	7a18      	ldrb	r0, [r3, #8]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	68b9      	ldr	r1, [r7, #8]
 800d662:	47a0      	blx	r4
 800d664:	4603      	mov	r3, r0
 800d666:	75fb      	strb	r3, [r7, #23]
  return res;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd90      	pop	{r4, r7, pc}
 800d672:	bf00      	nop
 800d674:	24075cac 	.word	0x24075cac

0800d678 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	603b      	str	r3, [r7, #0]
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b4 <disk_write+0x3c>)
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	68dc      	ldr	r4, [r3, #12]
 800d694:	7bfb      	ldrb	r3, [r7, #15]
 800d696:	4a07      	ldr	r2, [pc, #28]	@ (800d6b4 <disk_write+0x3c>)
 800d698:	4413      	add	r3, r2
 800d69a:	7a18      	ldrb	r0, [r3, #8]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	47a0      	blx	r4
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd90      	pop	{r4, r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	24075cac 	.word	0x24075cac

0800d6b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d6c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	b21a      	sxth	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b21b      	sxth	r3, r3
 800d6da:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6dc:	89fb      	ldrh	r3, [r7, #14]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3303      	adds	r3, #3
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	021b      	lsls	r3, r3, #8
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	3202      	adds	r2, #2
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	4313      	orrs	r3, r2
 800d706:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	021b      	lsls	r3, r3, #8
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	3201      	adds	r2, #1
 800d710:	7812      	ldrb	r2, [r2, #0]
 800d712:	4313      	orrs	r3, r2
 800d714:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	021b      	lsls	r3, r3, #8
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	7812      	ldrb	r2, [r2, #0]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
	return rv;
 800d722:	68fb      	ldr	r3, [r7, #12]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	460b      	mov	r3, r1
 800d73a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	887a      	ldrh	r2, [r7, #2]
 800d744:	b2d2      	uxtb	r2, r2
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	887b      	ldrh	r3, [r7, #2]
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	887a      	ldrh	r2, [r7, #2]
 800d756:	b2d2      	uxtb	r2, r2
 800d758:	701a      	strb	r2, [r3, #0]
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	1c5a      	adds	r2, r3, #1
 800d774:	607a      	str	r2, [r7, #4]
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	0a1b      	lsrs	r3, r3, #8
 800d780:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	b2d2      	uxtb	r2, r2
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	0a1b      	lsrs	r3, r3, #8
 800d792:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	b2d2      	uxtb	r2, r2
 800d79e:	701a      	strb	r2, [r3, #0]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	0a1b      	lsrs	r3, r3, #8
 800d7a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	701a      	strb	r2, [r3, #0]
}
 800d7b2:	bf00      	nop
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d7be:	b480      	push	{r7}
 800d7c0:	b087      	sub	sp, #28
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	60f8      	str	r0, [r7, #12]
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00d      	beq.n	800d7f4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	1c53      	adds	r3, r2, #1
 800d7dc:	613b      	str	r3, [r7, #16]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	1c59      	adds	r1, r3, #1
 800d7e2:	6179      	str	r1, [r7, #20]
 800d7e4:	7812      	ldrb	r2, [r2, #0]
 800d7e6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1f1      	bne.n	800d7d8 <mem_cpy+0x1a>
	}
}
 800d7f4:	bf00      	nop
 800d7f6:	371c      	adds	r7, #28
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	617a      	str	r2, [r7, #20]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	b2d2      	uxtb	r2, r2
 800d81a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3b01      	subs	r3, #1
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1f3      	bne.n	800d810 <mem_set+0x10>
}
 800d828:	bf00      	nop
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d836:	b480      	push	{r7}
 800d838:	b089      	sub	sp, #36	@ 0x24
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	60f8      	str	r0, [r7, #12]
 800d83e:	60b9      	str	r1, [r7, #8]
 800d840:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	61fb      	str	r3, [r7, #28]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	61fa      	str	r2, [r7, #28]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	4619      	mov	r1, r3
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	61ba      	str	r2, [r7, #24]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	1acb      	subs	r3, r1, r3
 800d862:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3b01      	subs	r3, #1
 800d868:	607b      	str	r3, [r7, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <mem_cmp+0x40>
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0eb      	beq.n	800d84e <mem_cmp+0x18>

	return r;
 800d876:	697b      	ldr	r3, [r7, #20]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3724      	adds	r7, #36	@ 0x24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d88e:	e002      	b.n	800d896 <chk_chr+0x12>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3301      	adds	r3, #1
 800d894:	607b      	str	r3, [r7, #4]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d005      	beq.n	800d8aa <chk_chr+0x26>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d1f2      	bne.n	800d890 <chk_chr+0xc>
	return *str;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	370c      	adds	r7, #12
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
	...

0800d8bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60bb      	str	r3, [r7, #8]
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	e029      	b.n	800d924 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d8d0:	4a27      	ldr	r2, [pc, #156]	@ (800d970 <chk_lock+0xb4>)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	011b      	lsls	r3, r3, #4
 800d8d6:	4413      	add	r3, r2
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d01d      	beq.n	800d91a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8de:	4a24      	ldr	r2, [pc, #144]	@ (800d970 <chk_lock+0xb4>)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	4413      	add	r3, r2
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d116      	bne.n	800d91e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d8f0:	4a1f      	ldr	r2, [pc, #124]	@ (800d970 <chk_lock+0xb4>)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	011b      	lsls	r3, r3, #4
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d900:	429a      	cmp	r2, r3
 800d902:	d10c      	bne.n	800d91e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d904:	4a1a      	ldr	r2, [pc, #104]	@ (800d970 <chk_lock+0xb4>)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	4413      	add	r3, r2
 800d90c:	3308      	adds	r3, #8
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d914:	429a      	cmp	r2, r3
 800d916:	d102      	bne.n	800d91e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d918:	e007      	b.n	800d92a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d91a:	2301      	movs	r3, #1
 800d91c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3301      	adds	r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d9d2      	bls.n	800d8d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d109      	bne.n	800d944 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <chk_lock+0x80>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d101      	bne.n	800d940 <chk_lock+0x84>
 800d93c:	2300      	movs	r3, #0
 800d93e:	e010      	b.n	800d962 <chk_lock+0xa6>
 800d940:	2312      	movs	r3, #18
 800d942:	e00e      	b.n	800d962 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d108      	bne.n	800d95c <chk_lock+0xa0>
 800d94a:	4a09      	ldr	r2, [pc, #36]	@ (800d970 <chk_lock+0xb4>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	011b      	lsls	r3, r3, #4
 800d950:	4413      	add	r3, r2
 800d952:	330c      	adds	r3, #12
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d95a:	d101      	bne.n	800d960 <chk_lock+0xa4>
 800d95c:	2310      	movs	r3, #16
 800d95e:	e000      	b.n	800d962 <chk_lock+0xa6>
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	24075a8c 	.word	0x24075a8c

0800d974 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d97a:	2300      	movs	r3, #0
 800d97c:	607b      	str	r3, [r7, #4]
 800d97e:	e002      	b.n	800d986 <enq_lock+0x12>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3301      	adds	r3, #1
 800d984:	607b      	str	r3, [r7, #4]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d806      	bhi.n	800d99a <enq_lock+0x26>
 800d98c:	4a09      	ldr	r2, [pc, #36]	@ (800d9b4 <enq_lock+0x40>)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	011b      	lsls	r3, r3, #4
 800d992:	4413      	add	r3, r2
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1f2      	bne.n	800d980 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	bf14      	ite	ne
 800d9a0:	2301      	movne	r3, #1
 800d9a2:	2300      	moveq	r3, #0
 800d9a4:	b2db      	uxtb	r3, r3
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	24075a8c 	.word	0x24075a8c

0800d9b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	e01f      	b.n	800da08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d9c8:	4a41      	ldr	r2, [pc, #260]	@ (800dad0 <inc_lock+0x118>)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	011b      	lsls	r3, r3, #4
 800d9ce:	4413      	add	r3, r2
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d113      	bne.n	800da02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d9da:	4a3d      	ldr	r2, [pc, #244]	@ (800dad0 <inc_lock+0x118>)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	4413      	add	r3, r2
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d109      	bne.n	800da02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d9ee:	4a38      	ldr	r2, [pc, #224]	@ (800dad0 <inc_lock+0x118>)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	4413      	add	r3, r2
 800d9f6:	3308      	adds	r3, #8
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d006      	beq.n	800da10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3301      	adds	r3, #1
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d9dc      	bls.n	800d9c8 <inc_lock+0x10>
 800da0e:	e000      	b.n	800da12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800da10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b02      	cmp	r3, #2
 800da16:	d132      	bne.n	800da7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	e002      	b.n	800da24 <inc_lock+0x6c>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3301      	adds	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d806      	bhi.n	800da38 <inc_lock+0x80>
 800da2a:	4a29      	ldr	r2, [pc, #164]	@ (800dad0 <inc_lock+0x118>)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	011b      	lsls	r3, r3, #4
 800da30:	4413      	add	r3, r2
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1f2      	bne.n	800da1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d101      	bne.n	800da42 <inc_lock+0x8a>
 800da3e:	2300      	movs	r3, #0
 800da40:	e040      	b.n	800dac4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4922      	ldr	r1, [pc, #136]	@ (800dad0 <inc_lock+0x118>)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	440b      	add	r3, r1
 800da4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	491e      	ldr	r1, [pc, #120]	@ (800dad0 <inc_lock+0x118>)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	011b      	lsls	r3, r3, #4
 800da5a:	440b      	add	r3, r1
 800da5c:	3304      	adds	r3, #4
 800da5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	695a      	ldr	r2, [r3, #20]
 800da64:	491a      	ldr	r1, [pc, #104]	@ (800dad0 <inc_lock+0x118>)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	011b      	lsls	r3, r3, #4
 800da6a:	440b      	add	r3, r1
 800da6c:	3308      	adds	r3, #8
 800da6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da70:	4a17      	ldr	r2, [pc, #92]	@ (800dad0 <inc_lock+0x118>)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	011b      	lsls	r3, r3, #4
 800da76:	4413      	add	r3, r2
 800da78:	330c      	adds	r3, #12
 800da7a:	2200      	movs	r2, #0
 800da7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d009      	beq.n	800da98 <inc_lock+0xe0>
 800da84:	4a12      	ldr	r2, [pc, #72]	@ (800dad0 <inc_lock+0x118>)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	011b      	lsls	r3, r3, #4
 800da8a:	4413      	add	r3, r2
 800da8c:	330c      	adds	r3, #12
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d001      	beq.n	800da98 <inc_lock+0xe0>
 800da94:	2300      	movs	r3, #0
 800da96:	e015      	b.n	800dac4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d108      	bne.n	800dab0 <inc_lock+0xf8>
 800da9e:	4a0c      	ldr	r2, [pc, #48]	@ (800dad0 <inc_lock+0x118>)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	011b      	lsls	r3, r3, #4
 800daa4:	4413      	add	r3, r2
 800daa6:	330c      	adds	r3, #12
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	b29a      	uxth	r2, r3
 800daae:	e001      	b.n	800dab4 <inc_lock+0xfc>
 800dab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dab4:	4906      	ldr	r1, [pc, #24]	@ (800dad0 <inc_lock+0x118>)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	011b      	lsls	r3, r3, #4
 800daba:	440b      	add	r3, r1
 800dabc:	330c      	adds	r3, #12
 800dabe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3301      	adds	r3, #1
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	24075a8c 	.word	0x24075a8c

0800dad4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dadc:	2300      	movs	r3, #0
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	e010      	b.n	800db04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dae2:	4a0d      	ldr	r2, [pc, #52]	@ (800db18 <clear_lock+0x44>)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	011b      	lsls	r3, r3, #4
 800dae8:	4413      	add	r3, r2
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d105      	bne.n	800dafe <clear_lock+0x2a>
 800daf2:	4a09      	ldr	r2, [pc, #36]	@ (800db18 <clear_lock+0x44>)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	011b      	lsls	r3, r3, #4
 800daf8:	4413      	add	r3, r2
 800dafa:	2200      	movs	r2, #0
 800dafc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3301      	adds	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d9eb      	bls.n	800dae2 <clear_lock+0xe>
	}
}
 800db0a:	bf00      	nop
 800db0c:	bf00      	nop
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	24075a8c 	.word	0x24075a8c

0800db1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d034      	beq.n	800db9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7858      	ldrb	r0, [r3, #1]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800db40:	2301      	movs	r3, #1
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	f7ff fd98 	bl	800d678 <disk_write>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <sync_window+0x38>
			res = FR_DISK_ERR;
 800db4e:	2301      	movs	r3, #1
 800db50:	73fb      	strb	r3, [r7, #15]
 800db52:	e022      	b.n	800db9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	1ad2      	subs	r2, r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	69db      	ldr	r3, [r3, #28]
 800db66:	429a      	cmp	r2, r3
 800db68:	d217      	bcs.n	800db9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	789b      	ldrb	r3, [r3, #2]
 800db6e:	613b      	str	r3, [r7, #16]
 800db70:	e010      	b.n	800db94 <sync_window+0x78>
					wsect += fs->fsize;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	4413      	add	r3, r2
 800db7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7858      	ldrb	r0, [r3, #1]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800db86:	2301      	movs	r3, #1
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	f7ff fd75 	bl	800d678 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	3b01      	subs	r3, #1
 800db92:	613b      	str	r3, [r7, #16]
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d8eb      	bhi.n	800db72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d01b      	beq.n	800dbf4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ffad 	bl	800db1c <sync_window>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d113      	bne.n	800dbf4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	7858      	ldrb	r0, [r3, #1]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	f7ff fd2d 	bl	800d638 <disk_read>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dbe4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	3b02      	subs	r3, #2
 800dc0c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	3b02      	subs	r3, #2
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d301      	bcc.n	800dc1e <clust2sect+0x20>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e008      	b.n	800dc30 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	895b      	ldrh	r3, [r3, #10]
 800dc22:	461a      	mov	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	fb03 f202 	mul.w	r2, r3, r2
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2e:	4413      	add	r3, r2
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d904      	bls.n	800dc5c <get_fat+0x20>
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d302      	bcc.n	800dc62 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e08e      	b.n	800dd80 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295
 800dc66:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d061      	beq.n	800dd34 <get_fat+0xf8>
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	dc7b      	bgt.n	800dd6c <get_fat+0x130>
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d002      	beq.n	800dc7e <get_fat+0x42>
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d041      	beq.n	800dd00 <get_fat+0xc4>
 800dc7c:	e076      	b.n	800dd6c <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	085b      	lsrs	r3, r3, #1
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	4413      	add	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	0a5b      	lsrs	r3, r3, #9
 800dc94:	4413      	add	r3, r2
 800dc96:	4619      	mov	r1, r3
 800dc98:	6938      	ldr	r0, [r7, #16]
 800dc9a:	f7ff ff83 	bl	800dba4 <move_window>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d166      	bne.n	800dd72 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	60fa      	str	r2, [r7, #12]
 800dcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcb6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	0a5b      	lsrs	r3, r3, #9
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f7ff ff6d 	bl	800dba4 <move_window>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d152      	bne.n	800dd76 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	4413      	add	r3, r2
 800dcda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcde:	021b      	lsls	r3, r3, #8
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	f003 0301 	and.w	r3, r3, #1
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <get_fat+0xba>
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	091b      	lsrs	r3, r3, #4
 800dcf4:	e002      	b.n	800dcfc <get_fat+0xc0>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcfc:	617b      	str	r3, [r7, #20]
			break;
 800dcfe:	e03f      	b.n	800dd80 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	0a1b      	lsrs	r3, r3, #8
 800dd08:	4413      	add	r3, r2
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6938      	ldr	r0, [r7, #16]
 800dd0e:	f7ff ff49 	bl	800dba4 <move_window>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d130      	bne.n	800dd7a <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dd26:	4413      	add	r3, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff fcc5 	bl	800d6b8 <ld_word>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	617b      	str	r3, [r7, #20]
			break;
 800dd32:	e025      	b.n	800dd80 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	09db      	lsrs	r3, r3, #7
 800dd3c:	4413      	add	r3, r2
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6938      	ldr	r0, [r7, #16]
 800dd42:	f7ff ff2f 	bl	800dba4 <move_window>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d118      	bne.n	800dd7e <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dd5a:	4413      	add	r3, r2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fcc4 	bl	800d6ea <ld_dword>
 800dd62:	4603      	mov	r3, r0
 800dd64:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dd68:	617b      	str	r3, [r7, #20]
			break;
 800dd6a:	e009      	b.n	800dd80 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	617b      	str	r3, [r7, #20]
 800dd70:	e006      	b.n	800dd80 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd72:	bf00      	nop
 800dd74:	e004      	b.n	800dd80 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd76:	bf00      	nop
 800dd78:	e002      	b.n	800dd80 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd7a:	bf00      	nop
 800dd7c:	e000      	b.n	800dd80 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd7e:	bf00      	nop
		}
	}

	return val;
 800dd80:	697b      	ldr	r3, [r7, #20]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd8a:	b590      	push	{r4, r7, lr}
 800dd8c:	b089      	sub	sp, #36	@ 0x24
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd96:	2302      	movs	r3, #2
 800dd98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	f240 80d9 	bls.w	800df54 <put_fat+0x1ca>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	f080 80d3 	bcs.w	800df54 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	f000 8096 	beq.w	800dee4 <put_fat+0x15a>
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	f300 80cb 	bgt.w	800df54 <put_fat+0x1ca>
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d002      	beq.n	800ddc8 <put_fat+0x3e>
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d06e      	beq.n	800dea4 <put_fat+0x11a>
 800ddc6:	e0c5      	b.n	800df54 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	61bb      	str	r3, [r7, #24]
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	085b      	lsrs	r3, r3, #1
 800ddd0:	69ba      	ldr	r2, [r7, #24]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	0a5b      	lsrs	r3, r3, #9
 800ddde:	4413      	add	r3, r2
 800dde0:	4619      	mov	r1, r3
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f7ff fede 	bl	800dba4 <move_window>
 800dde8:	4603      	mov	r3, r0
 800ddea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddec:	7ffb      	ldrb	r3, [r7, #31]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f040 80a9 	bne.w	800df46 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	1c59      	adds	r1, r3, #1
 800ddfe:	61b9      	str	r1, [r7, #24]
 800de00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de04:	4413      	add	r3, r2
 800de06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00d      	beq.n	800de2e <put_fat+0xa4>
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	b25b      	sxtb	r3, r3
 800de18:	f003 030f 	and.w	r3, r3, #15
 800de1c:	b25a      	sxtb	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	b25b      	sxtb	r3, r3
 800de22:	011b      	lsls	r3, r3, #4
 800de24:	b25b      	sxtb	r3, r3
 800de26:	4313      	orrs	r3, r2
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	e001      	b.n	800de32 <put_fat+0xa8>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	b2db      	uxtb	r3, r3
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2201      	movs	r2, #1
 800de3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	0a5b      	lsrs	r3, r3, #9
 800de44:	4413      	add	r3, r2
 800de46:	4619      	mov	r1, r3
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff feab 	bl	800dba4 <move_window>
 800de4e:	4603      	mov	r3, r0
 800de50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de52:	7ffb      	ldrb	r3, [r7, #31]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d178      	bne.n	800df4a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de64:	4413      	add	r3, r2
 800de66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <put_fat+0xf0>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	091b      	lsrs	r3, r3, #4
 800de76:	b2db      	uxtb	r3, r3
 800de78:	e00e      	b.n	800de98 <put_fat+0x10e>
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	b25b      	sxtb	r3, r3
 800de80:	f023 030f 	bic.w	r3, r3, #15
 800de84:	b25a      	sxtb	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	0a1b      	lsrs	r3, r3, #8
 800de8a:	b25b      	sxtb	r3, r3
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	b25b      	sxtb	r3, r3
 800de92:	4313      	orrs	r3, r2
 800de94:	b25b      	sxtb	r3, r3
 800de96:	b2db      	uxtb	r3, r3
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2201      	movs	r2, #1
 800dea0:	70da      	strb	r2, [r3, #3]
			break;
 800dea2:	e057      	b.n	800df54 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	0a1b      	lsrs	r3, r3, #8
 800deac:	4413      	add	r3, r2
 800deae:	4619      	mov	r1, r3
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff fe77 	bl	800dba4 <move_window>
 800deb6:	4603      	mov	r3, r0
 800deb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800deba:	7ffb      	ldrb	r3, [r7, #31]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d146      	bne.n	800df4e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dece:	4413      	add	r3, r2
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	b292      	uxth	r2, r2
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7ff fc2a 	bl	800d730 <st_word>
			fs->wflag = 1;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2201      	movs	r2, #1
 800dee0:	70da      	strb	r2, [r3, #3]
			break;
 800dee2:	e037      	b.n	800df54 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	09db      	lsrs	r3, r3, #7
 800deec:	4413      	add	r3, r2
 800deee:	4619      	mov	r1, r3
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f7ff fe57 	bl	800dba4 <move_window>
 800def6:	4603      	mov	r3, r0
 800def8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800defa:	7ffb      	ldrb	r3, [r7, #31]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d128      	bne.n	800df52 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800df14:	4413      	add	r3, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff fbe7 	bl	800d6ea <ld_dword>
 800df1c:	4603      	mov	r3, r0
 800df1e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800df22:	4323      	orrs	r3, r4
 800df24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800df34:	4413      	add	r3, r2
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fc14 	bl	800d766 <st_dword>
			fs->wflag = 1;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	70da      	strb	r2, [r3, #3]
			break;
 800df44:	e006      	b.n	800df54 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800df46:	bf00      	nop
 800df48:	e004      	b.n	800df54 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800df4a:	bf00      	nop
 800df4c:	e002      	b.n	800df54 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800df4e:	bf00      	nop
 800df50:	e000      	b.n	800df54 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800df52:	bf00      	nop
		}
	}
	return res;
 800df54:	7ffb      	ldrb	r3, [r7, #31]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3724      	adds	r7, #36	@ 0x24
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd90      	pop	{r4, r7, pc}

0800df5e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b088      	sub	sp, #32
 800df62:	af00      	add	r7, sp, #0
 800df64:	60f8      	str	r0, [r7, #12]
 800df66:	60b9      	str	r1, [r7, #8]
 800df68:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d904      	bls.n	800df84 <remove_chain+0x26>
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	429a      	cmp	r2, r3
 800df82:	d301      	bcc.n	800df88 <remove_chain+0x2a>
 800df84:	2302      	movs	r3, #2
 800df86:	e04b      	b.n	800e020 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00c      	beq.n	800dfa8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800df8e:	f04f 32ff 	mov.w	r2, #4294967295
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	69b8      	ldr	r0, [r7, #24]
 800df96:	f7ff fef8 	bl	800dd8a <put_fat>
 800df9a:	4603      	mov	r3, r0
 800df9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800df9e:	7ffb      	ldrb	r3, [r7, #31]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <remove_chain+0x4a>
 800dfa4:	7ffb      	ldrb	r3, [r7, #31]
 800dfa6:	e03b      	b.n	800e020 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dfa8:	68b9      	ldr	r1, [r7, #8]
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fe46 	bl	800dc3c <get_fat>
 800dfb0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d031      	beq.n	800e01c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d101      	bne.n	800dfc2 <remove_chain+0x64>
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e02e      	b.n	800e020 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d101      	bne.n	800dfce <remove_chain+0x70>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e028      	b.n	800e020 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dfce:	2200      	movs	r2, #0
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f7ff fed9 	bl	800dd8a <put_fat>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dfdc:	7ffb      	ldrb	r3, [r7, #31]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <remove_chain+0x88>
 800dfe2:	7ffb      	ldrb	r3, [r7, #31]
 800dfe4:	e01c      	b.n	800e020 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	695a      	ldr	r2, [r3, #20]
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	3b02      	subs	r3, #2
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d20b      	bcs.n	800e00c <remove_chain+0xae>
			fs->free_clst++;
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	695b      	ldr	r3, [r3, #20]
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	791b      	ldrb	r3, [r3, #4]
 800e002:	f043 0301 	orr.w	r3, r3, #1
 800e006:	b2da      	uxtb	r2, r3
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	429a      	cmp	r2, r3
 800e018:	d3c6      	bcc.n	800dfa8 <remove_chain+0x4a>
 800e01a:	e000      	b.n	800e01e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e01c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10d      	bne.n	800e05a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d004      	beq.n	800e054 <create_chain+0x2c>
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	69ba      	ldr	r2, [r7, #24]
 800e050:	429a      	cmp	r2, r3
 800e052:	d31b      	bcc.n	800e08c <create_chain+0x64>
 800e054:	2301      	movs	r3, #1
 800e056:	61bb      	str	r3, [r7, #24]
 800e058:	e018      	b.n	800e08c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fded 	bl	800dc3c <get_fat>
 800e062:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d801      	bhi.n	800e06e <create_chain+0x46>
 800e06a:	2301      	movs	r3, #1
 800e06c:	e070      	b.n	800e150 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e074:	d101      	bne.n	800e07a <create_chain+0x52>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	e06a      	b.n	800e150 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	429a      	cmp	r2, r3
 800e082:	d201      	bcs.n	800e088 <create_chain+0x60>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	e063      	b.n	800e150 <create_chain+0x128>
		scl = clst;
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	3301      	adds	r3, #1
 800e094:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d307      	bcc.n	800e0b0 <create_chain+0x88>
				ncl = 2;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e0a4:	69fa      	ldr	r2, [r7, #28]
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d901      	bls.n	800e0b0 <create_chain+0x88>
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e04f      	b.n	800e150 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e0b0:	69f9      	ldr	r1, [r7, #28]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff fdc2 	bl	800dc3c <get_fat>
 800e0b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00e      	beq.n	800e0de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d003      	beq.n	800e0ce <create_chain+0xa6>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0cc:	d101      	bne.n	800e0d2 <create_chain+0xaa>
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	e03e      	b.n	800e150 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d1da      	bne.n	800e090 <create_chain+0x68>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e038      	b.n	800e150 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e0de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e4:	69f9      	ldr	r1, [r7, #28]
 800e0e6:	6938      	ldr	r0, [r7, #16]
 800e0e8:	f7ff fe4f 	bl	800dd8a <put_fat>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d109      	bne.n	800e10a <create_chain+0xe2>
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d006      	beq.n	800e10a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e0fc:	69fa      	ldr	r2, [r7, #28]
 800e0fe:	6839      	ldr	r1, [r7, #0]
 800e100:	6938      	ldr	r0, [r7, #16]
 800e102:	f7ff fe42 	bl	800dd8a <put_fat>
 800e106:	4603      	mov	r3, r0
 800e108:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e10a:	7dfb      	ldrb	r3, [r7, #23]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d116      	bne.n	800e13e <create_chain+0x116>
		fs->last_clst = ncl;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	69fa      	ldr	r2, [r7, #28]
 800e114:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	695a      	ldr	r2, [r3, #20]
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	3b02      	subs	r3, #2
 800e120:	429a      	cmp	r2, r3
 800e122:	d804      	bhi.n	800e12e <create_chain+0x106>
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	1e5a      	subs	r2, r3, #1
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	791b      	ldrb	r3, [r3, #4]
 800e132:	f043 0301 	orr.w	r3, r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	711a      	strb	r2, [r3, #4]
 800e13c:	e007      	b.n	800e14e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d102      	bne.n	800e14a <create_chain+0x122>
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	e000      	b.n	800e14c <create_chain+0x124>
 800e14a:	2301      	movs	r3, #1
 800e14c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e14e:	69fb      	ldr	r3, [r7, #28]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3720      	adds	r7, #32
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e158:	b480      	push	{r7}
 800e15a:	b087      	sub	sp, #28
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16c:	3304      	adds	r3, #4
 800e16e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	0a5b      	lsrs	r3, r3, #9
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	8952      	ldrh	r2, [r2, #10]
 800e178:	fbb3 f3f2 	udiv	r3, r3, r2
 800e17c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	1d1a      	adds	r2, r3, #4
 800e182:	613a      	str	r2, [r7, #16]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <clmt_clust+0x3a>
 800e18e:	2300      	movs	r3, #0
 800e190:	e010      	b.n	800e1b4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	429a      	cmp	r2, r3
 800e198:	d307      	bcc.n	800e1aa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1a8:	e7e9      	b.n	800e17e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e1aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	4413      	add	r3, r2
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	371c      	adds	r7, #28
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1d6:	d204      	bcs.n	800e1e2 <dir_sdi+0x22>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	f003 031f 	and.w	r3, r3, #31
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e063      	b.n	800e2ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <dir_sdi+0x46>
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d902      	bls.n	800e206 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e204:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10c      	bne.n	800e226 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	095b      	lsrs	r3, r3, #5
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	8912      	ldrh	r2, [r2, #8]
 800e214:	4293      	cmp	r3, r2
 800e216:	d301      	bcc.n	800e21c <dir_sdi+0x5c>
 800e218:	2302      	movs	r3, #2
 800e21a:	e048      	b.n	800e2ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	61da      	str	r2, [r3, #28]
 800e224:	e029      	b.n	800e27a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	025b      	lsls	r3, r3, #9
 800e22c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e22e:	e019      	b.n	800e264 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6979      	ldr	r1, [r7, #20]
 800e234:	4618      	mov	r0, r3
 800e236:	f7ff fd01 	bl	800dc3c <get_fat>
 800e23a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e242:	d101      	bne.n	800e248 <dir_sdi+0x88>
 800e244:	2301      	movs	r3, #1
 800e246:	e032      	b.n	800e2ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d904      	bls.n	800e258 <dir_sdi+0x98>
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d301      	bcc.n	800e25c <dir_sdi+0x9c>
 800e258:	2302      	movs	r3, #2
 800e25a:	e028      	b.n	800e2ae <dir_sdi+0xee>
			ofs -= csz;
 800e25c:	683a      	ldr	r2, [r7, #0]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d2e1      	bcs.n	800e230 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e26c:	6979      	ldr	r1, [r7, #20]
 800e26e:	6938      	ldr	r0, [r7, #16]
 800e270:	f7ff fcc5 	bl	800dbfe <clust2sect>
 800e274:	4602      	mov	r2, r0
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	69db      	ldr	r3, [r3, #28]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <dir_sdi+0xcc>
 800e288:	2302      	movs	r3, #2
 800e28a:	e010      	b.n	800e2ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	69da      	ldr	r2, [r3, #28]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	0a5b      	lsrs	r3, r3, #9
 800e294:	441a      	add	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2a6:	441a      	add	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b086      	sub	sp, #24
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	3320      	adds	r3, #32
 800e2cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d003      	beq.n	800e2de <dir_next+0x28>
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2dc:	d301      	bcc.n	800e2e2 <dir_next+0x2c>
 800e2de:	2304      	movs	r3, #4
 800e2e0:	e0aa      	b.n	800e438 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f040 8098 	bne.w	800e41e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	69db      	ldr	r3, [r3, #28]
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10b      	bne.n	800e318 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	095b      	lsrs	r3, r3, #5
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	8912      	ldrh	r2, [r2, #8]
 800e308:	4293      	cmp	r3, r2
 800e30a:	f0c0 8088 	bcc.w	800e41e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	61da      	str	r2, [r3, #28]
 800e314:	2304      	movs	r3, #4
 800e316:	e08f      	b.n	800e438 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	0a5b      	lsrs	r3, r3, #9
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	8952      	ldrh	r2, [r2, #10]
 800e320:	3a01      	subs	r2, #1
 800e322:	4013      	ands	r3, r2
 800e324:	2b00      	cmp	r3, #0
 800e326:	d17a      	bne.n	800e41e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	4619      	mov	r1, r3
 800e330:	4610      	mov	r0, r2
 800e332:	f7ff fc83 	bl	800dc3c <get_fat>
 800e336:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d801      	bhi.n	800e342 <dir_next+0x8c>
 800e33e:	2302      	movs	r3, #2
 800e340:	e07a      	b.n	800e438 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e348:	d101      	bne.n	800e34e <dir_next+0x98>
 800e34a:	2301      	movs	r3, #1
 800e34c:	e074      	b.n	800e438 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	429a      	cmp	r2, r3
 800e356:	d358      	bcc.n	800e40a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d104      	bne.n	800e368 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	61da      	str	r2, [r3, #28]
 800e364:	2304      	movs	r3, #4
 800e366:	e067      	b.n	800e438 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f7ff fe59 	bl	800e028 <create_chain>
 800e376:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <dir_next+0xcc>
 800e37e:	2307      	movs	r3, #7
 800e380:	e05a      	b.n	800e438 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <dir_next+0xd6>
 800e388:	2302      	movs	r3, #2
 800e38a:	e055      	b.n	800e438 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e392:	d101      	bne.n	800e398 <dir_next+0xe2>
 800e394:	2301      	movs	r3, #1
 800e396:	e04f      	b.n	800e438 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f7ff fbbf 	bl	800db1c <sync_window>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <dir_next+0xf2>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e047      	b.n	800e438 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3334      	adds	r3, #52	@ 0x34
 800e3ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff fa24 	bl	800d800 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	613b      	str	r3, [r7, #16]
 800e3bc:	6979      	ldr	r1, [r7, #20]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff fc1d 	bl	800dbfe <clust2sect>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e3ca:	e012      	b.n	800e3f2 <dir_next+0x13c>
						fs->wflag = 1;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff fba2 	bl	800db1c <sync_window>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <dir_next+0x12c>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e02a      	b.n	800e438 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	613b      	str	r3, [r7, #16]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	895b      	ldrh	r3, [r3, #10]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d3e6      	bcc.n	800e3cc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	1ad2      	subs	r2, r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	697a      	ldr	r2, [r7, #20]
 800e40e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e410:	6979      	ldr	r1, [r7, #20]
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f7ff fbf3 	bl	800dbfe <clust2sect>
 800e418:	4602      	mov	r2, r0
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e430:	441a      	add	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e450:	2100      	movs	r1, #0
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff feb4 	bl	800e1c0 <dir_sdi>
 800e458:	4603      	mov	r3, r0
 800e45a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d12b      	bne.n	800e4ba <dir_alloc+0x7a>
		n = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	69db      	ldr	r3, [r3, #28]
 800e46a:	4619      	mov	r1, r3
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7ff fb99 	bl	800dba4 <move_window>
 800e472:	4603      	mov	r3, r0
 800e474:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e476:	7dfb      	ldrb	r3, [r7, #23]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d11d      	bne.n	800e4b8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6a1b      	ldr	r3, [r3, #32]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	2be5      	cmp	r3, #229	@ 0xe5
 800e484:	d004      	beq.n	800e490 <dir_alloc+0x50>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d107      	bne.n	800e4a0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	3301      	adds	r3, #1
 800e494:	613b      	str	r3, [r7, #16]
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d102      	bne.n	800e4a4 <dir_alloc+0x64>
 800e49e:	e00c      	b.n	800e4ba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7ff ff05 	bl	800e2b6 <dir_next>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d0d7      	beq.n	800e466 <dir_alloc+0x26>
 800e4b6:	e000      	b.n	800e4ba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e4b8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d101      	bne.n	800e4c4 <dir_alloc+0x84>
 800e4c0:	2307      	movs	r3, #7
 800e4c2:	75fb      	strb	r3, [r7, #23]
	return res;
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3718      	adds	r7, #24
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	331a      	adds	r3, #26
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff f8eb 	bl	800d6b8 <ld_word>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d109      	bne.n	800e502 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	3314      	adds	r3, #20
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff f8e0 	bl	800d6b8 <ld_word>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	041b      	lsls	r3, r3, #16
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	4313      	orrs	r3, r2
 800e500:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e502:	68fb      	ldr	r3, [r7, #12]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	331a      	adds	r3, #26
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	b292      	uxth	r2, r2
 800e520:	4611      	mov	r1, r2
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff f904 	bl	800d730 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	2b03      	cmp	r3, #3
 800e52e:	d109      	bne.n	800e544 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	f103 0214 	add.w	r2, r3, #20
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	0c1b      	lsrs	r3, r3, #16
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f7ff f8f6 	bl	800d730 <st_word>
	}
}
 800e544:	bf00      	nop
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e54c:	b590      	push	{r4, r7, lr}
 800e54e:	b087      	sub	sp, #28
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	331a      	adds	r3, #26
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff f8ac 	bl	800d6b8 <ld_word>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <cmp_lfn+0x1e>
 800e566:	2300      	movs	r3, #0
 800e568:	e059      	b.n	800e61e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e572:	1e5a      	subs	r2, r3, #1
 800e574:	4613      	mov	r3, r2
 800e576:	005b      	lsls	r3, r3, #1
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e580:	2301      	movs	r3, #1
 800e582:	81fb      	strh	r3, [r7, #14]
 800e584:	2300      	movs	r3, #0
 800e586:	613b      	str	r3, [r7, #16]
 800e588:	e033      	b.n	800e5f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e58a:	4a27      	ldr	r2, [pc, #156]	@ (800e628 <cmp_lfn+0xdc>)
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	4413      	add	r3, r2
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	4413      	add	r3, r2
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff f88d 	bl	800d6b8 <ld_word>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e5a2:	89fb      	ldrh	r3, [r7, #14]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01a      	beq.n	800e5de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800e5ac:	d812      	bhi.n	800e5d4 <cmp_lfn+0x88>
 800e5ae:	89bb      	ldrh	r3, [r7, #12]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 fe35 	bl	8010220 <ff_wtoupper>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461c      	mov	r4, r3
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	617a      	str	r2, [r7, #20]
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f001 fe29 	bl	8010220 <ff_wtoupper>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	429c      	cmp	r4, r3
 800e5d2:	d001      	beq.n	800e5d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e022      	b.n	800e61e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	81fb      	strh	r3, [r7, #14]
 800e5dc:	e006      	b.n	800e5ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e5de:	89bb      	ldrh	r3, [r7, #12]
 800e5e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d001      	beq.n	800e5ec <cmp_lfn+0xa0>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	e018      	b.n	800e61e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	613b      	str	r3, [r7, #16]
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	2b0c      	cmp	r3, #12
 800e5f6:	d9c8      	bls.n	800e58a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <cmp_lfn+0xd0>
 800e604:	89fb      	ldrh	r3, [r7, #14]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d008      	beq.n	800e61c <cmp_lfn+0xd0>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	4413      	add	r3, r2
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <cmp_lfn+0xd0>
 800e618:	2300      	movs	r3, #0
 800e61a:	e000      	b.n	800e61e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e61c:	2301      	movs	r3, #1
}
 800e61e:	4618      	mov	r0, r3
 800e620:	371c      	adds	r7, #28
 800e622:	46bd      	mov	sp, r7
 800e624:	bd90      	pop	{r4, r7, pc}
 800e626:	bf00      	nop
 800e628:	08011430 	.word	0x08011430

0800e62c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4611      	mov	r1, r2
 800e638:	461a      	mov	r2, r3
 800e63a:	460b      	mov	r3, r1
 800e63c:	71fb      	strb	r3, [r7, #7]
 800e63e:	4613      	mov	r3, r2
 800e640:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	330d      	adds	r3, #13
 800e646:	79ba      	ldrb	r2, [r7, #6]
 800e648:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	330b      	adds	r3, #11
 800e64e:	220f      	movs	r2, #15
 800e650:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	330c      	adds	r3, #12
 800e656:	2200      	movs	r2, #0
 800e658:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	331a      	adds	r3, #26
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f7ff f865 	bl	800d730 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	1e5a      	subs	r2, r3, #1
 800e66a:	4613      	mov	r3, r2
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	4413      	add	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	82fb      	strh	r3, [r7, #22]
 800e67a:	2300      	movs	r3, #0
 800e67c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e67e:	8afb      	ldrh	r3, [r7, #22]
 800e680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e684:	4293      	cmp	r3, r2
 800e686:	d007      	beq.n	800e698 <put_lfn+0x6c>
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	61fa      	str	r2, [r7, #28]
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	4413      	add	r3, r2
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e698:	4a17      	ldr	r2, [pc, #92]	@ (800e6f8 <put_lfn+0xcc>)
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	4413      	add	r3, r2
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	8afa      	ldrh	r2, [r7, #22]
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff f840 	bl	800d730 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e6b0:	8afb      	ldrh	r3, [r7, #22]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d102      	bne.n	800e6bc <put_lfn+0x90>
 800e6b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e6ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	61bb      	str	r3, [r7, #24]
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	2b0c      	cmp	r3, #12
 800e6c6:	d9da      	bls.n	800e67e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e6c8:	8afb      	ldrh	r3, [r7, #22]
 800e6ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d006      	beq.n	800e6e0 <put_lfn+0xb4>
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	4413      	add	r3, r2
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d103      	bne.n	800e6e8 <put_lfn+0xbc>
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	79fa      	ldrb	r2, [r7, #7]
 800e6ec:	701a      	strb	r2, [r3, #0]
}
 800e6ee:	bf00      	nop
 800e6f0:	3720      	adds	r7, #32
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	08011430 	.word	0x08011430

0800e6fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08c      	sub	sp, #48	@ 0x30
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e70a:	220b      	movs	r2, #11
 800e70c:	68b9      	ldr	r1, [r7, #8]
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff f855 	bl	800d7be <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b05      	cmp	r3, #5
 800e718:	d929      	bls.n	800e76e <gen_numname+0x72>
		sr = seq;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e71e:	e020      	b.n	800e762 <gen_numname+0x66>
			wc = *lfn++;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	1c9a      	adds	r2, r3, #2
 800e724:	607a      	str	r2, [r7, #4]
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e72a:	2300      	movs	r3, #0
 800e72c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e72e:	e015      	b.n	800e75c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	005a      	lsls	r2, r3, #1
 800e734:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	4413      	add	r3, r2
 800e73c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e73e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e740:	085b      	lsrs	r3, r3, #1
 800e742:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d003      	beq.n	800e756 <gen_numname+0x5a>
 800e74e:	69fa      	ldr	r2, [r7, #28]
 800e750:	4b30      	ldr	r3, [pc, #192]	@ (800e814 <gen_numname+0x118>)
 800e752:	4053      	eors	r3, r2
 800e754:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e758:	3301      	adds	r3, #1
 800e75a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75e:	2b0f      	cmp	r3, #15
 800e760:	d9e6      	bls.n	800e730 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1da      	bne.n	800e720 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e76e:	2307      	movs	r3, #7
 800e770:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	b2db      	uxtb	r3, r3
 800e776:	f003 030f 	and.w	r3, r3, #15
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	3330      	adds	r3, #48	@ 0x30
 800e77e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e786:	2b39      	cmp	r3, #57	@ 0x39
 800e788:	d904      	bls.n	800e794 <gen_numname+0x98>
 800e78a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e78e:	3307      	adds	r3, #7
 800e790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e79a:	3330      	adds	r3, #48	@ 0x30
 800e79c:	443b      	add	r3, r7
 800e79e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e7a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	091b      	lsrs	r3, r3, #4
 800e7aa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1df      	bne.n	800e772 <gen_numname+0x76>
	ns[i] = '~';
 800e7b2:	f107 0214 	add.w	r2, r7, #20
 800e7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b8:	4413      	add	r3, r2
 800e7ba:	227e      	movs	r2, #126	@ 0x7e
 800e7bc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e7be:	2300      	movs	r3, #0
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7c2:	e002      	b.n	800e7ca <gen_numname+0xce>
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d205      	bcs.n	800e7de <gen_numname+0xe2>
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	4413      	add	r3, r2
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	2b20      	cmp	r3, #32
 800e7dc:	d1f2      	bne.n	800e7c4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e0:	2b07      	cmp	r3, #7
 800e7e2:	d807      	bhi.n	800e7f4 <gen_numname+0xf8>
 800e7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e7ea:	3330      	adds	r3, #48	@ 0x30
 800e7ec:	443b      	add	r3, r7
 800e7ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e7f2:	e000      	b.n	800e7f6 <gen_numname+0xfa>
 800e7f4:	2120      	movs	r1, #32
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	460a      	mov	r2, r1
 800e802:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e806:	2b07      	cmp	r3, #7
 800e808:	d9e9      	bls.n	800e7de <gen_numname+0xe2>
}
 800e80a:	bf00      	nop
 800e80c:	bf00      	nop
 800e80e:	3730      	adds	r7, #48	@ 0x30
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	00011021 	.word	0x00011021

0800e818 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e824:	230b      	movs	r3, #11
 800e826:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e828:	7bfb      	ldrb	r3, [r7, #15]
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	0852      	lsrs	r2, r2, #1
 800e82e:	01db      	lsls	r3, r3, #7
 800e830:	4313      	orrs	r3, r2
 800e832:	b2da      	uxtb	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	1c59      	adds	r1, r3, #1
 800e838:	6079      	str	r1, [r7, #4]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	4413      	add	r3, r2
 800e83e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	3b01      	subs	r3, #1
 800e844:	60bb      	str	r3, [r7, #8]
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d1ed      	bne.n	800e828 <sum_sfn+0x10>
	return sum;
 800e84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e868:	2100      	movs	r1, #0
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff fca8 	bl	800e1c0 <dir_sdi>
 800e870:	4603      	mov	r3, r0
 800e872:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <dir_find+0x24>
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
 800e87c:	e0a9      	b.n	800e9d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e87e:	23ff      	movs	r3, #255	@ 0xff
 800e880:	753b      	strb	r3, [r7, #20]
 800e882:	7d3b      	ldrb	r3, [r7, #20]
 800e884:	757b      	strb	r3, [r7, #21]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f04f 32ff 	mov.w	r2, #4294967295
 800e88c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	69db      	ldr	r3, [r3, #28]
 800e892:	4619      	mov	r1, r3
 800e894:	6938      	ldr	r0, [r7, #16]
 800e896:	f7ff f985 	bl	800dba4 <move_window>
 800e89a:	4603      	mov	r3, r0
 800e89c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e89e:	7dfb      	ldrb	r3, [r7, #23]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 8090 	bne.w	800e9c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e8ae:	7dbb      	ldrb	r3, [r7, #22]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <dir_find+0x60>
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	75fb      	strb	r3, [r7, #23]
 800e8b8:	e08a      	b.n	800e9d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	330b      	adds	r3, #11
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8c6:	73fb      	strb	r3, [r7, #15]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	7bfa      	ldrb	r2, [r7, #15]
 800e8cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e8ce:	7dbb      	ldrb	r3, [r7, #22]
 800e8d0:	2be5      	cmp	r3, #229	@ 0xe5
 800e8d2:	d007      	beq.n	800e8e4 <dir_find+0x8a>
 800e8d4:	7bfb      	ldrb	r3, [r7, #15]
 800e8d6:	f003 0308 	and.w	r3, r3, #8
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d009      	beq.n	800e8f2 <dir_find+0x98>
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	2b0f      	cmp	r3, #15
 800e8e2:	d006      	beq.n	800e8f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8e4:	23ff      	movs	r3, #255	@ 0xff
 800e8e6:	757b      	strb	r3, [r7, #21]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800e8f0:	e05e      	b.n	800e9b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b0f      	cmp	r3, #15
 800e8f6:	d136      	bne.n	800e966 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e902:	2b00      	cmp	r3, #0
 800e904:	d154      	bne.n	800e9b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e906:	7dbb      	ldrb	r3, [r7, #22]
 800e908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00d      	beq.n	800e92c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	7b5b      	ldrb	r3, [r3, #13]
 800e916:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e918:	7dbb      	ldrb	r3, [r7, #22]
 800e91a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e91e:	75bb      	strb	r3, [r7, #22]
 800e920:	7dbb      	ldrb	r3, [r7, #22]
 800e922:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	695a      	ldr	r2, [r3, #20]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e92c:	7dba      	ldrb	r2, [r7, #22]
 800e92e:	7d7b      	ldrb	r3, [r7, #21]
 800e930:	429a      	cmp	r2, r3
 800e932:	d115      	bne.n	800e960 <dir_find+0x106>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	330d      	adds	r3, #13
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	7d3a      	ldrb	r2, [r7, #20]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d10e      	bne.n	800e960 <dir_find+0x106>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	4619      	mov	r1, r3
 800e94c:	4610      	mov	r0, r2
 800e94e:	f7ff fdfd 	bl	800e54c <cmp_lfn>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <dir_find+0x106>
 800e958:	7d7b      	ldrb	r3, [r7, #21]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	e000      	b.n	800e962 <dir_find+0x108>
 800e960:	23ff      	movs	r3, #255	@ 0xff
 800e962:	757b      	strb	r3, [r7, #21]
 800e964:	e024      	b.n	800e9b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e966:	7d7b      	ldrb	r3, [r7, #21]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <dir_find+0x126>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	4618      	mov	r0, r3
 800e972:	f7ff ff51 	bl	800e818 <sum_sfn>
 800e976:	4603      	mov	r3, r0
 800e978:	461a      	mov	r2, r3
 800e97a:	7d3b      	ldrb	r3, [r7, #20]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d024      	beq.n	800e9ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e986:	f003 0301 	and.w	r3, r3, #1
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10a      	bne.n	800e9a4 <dir_find+0x14a>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a18      	ldr	r0, [r3, #32]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3324      	adds	r3, #36	@ 0x24
 800e996:	220b      	movs	r2, #11
 800e998:	4619      	mov	r1, r3
 800e99a:	f7fe ff4c 	bl	800d836 <mem_cmp>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d014      	beq.n	800e9ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9a4:	23ff      	movs	r3, #255	@ 0xff
 800e9a6:	757b      	strb	r3, [r7, #21]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ae:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7ff fc7f 	bl	800e2b6 <dir_next>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f43f af65 	beq.w	800e88e <dir_find+0x34>
 800e9c4:	e004      	b.n	800e9d0 <dir_find+0x176>
		if (res != FR_OK) break;
 800e9c6:	bf00      	nop
 800e9c8:	e002      	b.n	800e9d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e9ca:	bf00      	nop
 800e9cc:	e000      	b.n	800e9d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e9ce:	bf00      	nop

	return res;
 800e9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08c      	sub	sp, #48	@ 0x30
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e9f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <dir_register+0x20>
 800e9f8:	2306      	movs	r3, #6
 800e9fa:	e0e0      	b.n	800ebbe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea00:	e002      	b.n	800ea08 <dir_register+0x2c>
 800ea02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea04:	3301      	adds	r3, #1
 800ea06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	68da      	ldr	r2, [r3, #12]
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	4413      	add	r3, r2
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1f4      	bne.n	800ea02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ea1e:	f107 030c 	add.w	r3, r7, #12
 800ea22:	220c      	movs	r2, #12
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fe feca 	bl	800d7be <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d032      	beq.n	800ea9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2240      	movs	r2, #64	@ 0x40
 800ea38:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea40:	e016      	b.n	800ea70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	f107 010c 	add.w	r1, r7, #12
 800ea50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea52:	f7ff fe53 	bl	800e6fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff feff 	bl	800e85a <dir_find>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ea62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d106      	bne.n	800ea78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ea6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea72:	2b63      	cmp	r3, #99	@ 0x63
 800ea74:	d9e5      	bls.n	800ea42 <dir_register+0x66>
 800ea76:	e000      	b.n	800ea7a <dir_register+0x9e>
			if (res != FR_OK) break;
 800ea78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ea7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7c:	2b64      	cmp	r3, #100	@ 0x64
 800ea7e:	d101      	bne.n	800ea84 <dir_register+0xa8>
 800ea80:	2307      	movs	r3, #7
 800ea82:	e09c      	b.n	800ebbe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ea84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea88:	2b04      	cmp	r3, #4
 800ea8a:	d002      	beq.n	800ea92 <dir_register+0xb6>
 800ea8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea90:	e095      	b.n	800ebbe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ea92:	7dfa      	ldrb	r2, [r7, #23]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea9a:	7dfb      	ldrb	r3, [r7, #23]
 800ea9c:	f003 0302 	and.w	r3, r3, #2
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d007      	beq.n	800eab4 <dir_register+0xd8>
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	330c      	adds	r3, #12
 800eaa8:	4a47      	ldr	r2, [pc, #284]	@ (800ebc8 <dir_register+0x1ec>)
 800eaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eaae:	089b      	lsrs	r3, r3, #2
 800eab0:	3301      	adds	r3, #1
 800eab2:	e000      	b.n	800eab6 <dir_register+0xda>
 800eab4:	2301      	movs	r3, #1
 800eab6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eab8:	6a39      	ldr	r1, [r7, #32]
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7ff fcc0 	bl	800e440 <dir_alloc>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d148      	bne.n	800eb60 <dir_register+0x184>
 800eace:	6a3b      	ldr	r3, [r7, #32]
 800ead0:	3b01      	subs	r3, #1
 800ead2:	623b      	str	r3, [r7, #32]
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d042      	beq.n	800eb60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	695a      	ldr	r2, [r3, #20]
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	015b      	lsls	r3, r3, #5
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	4619      	mov	r1, r3
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff fb6a 	bl	800e1c0 <dir_sdi>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800eaf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d132      	bne.n	800eb60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3324      	adds	r3, #36	@ 0x24
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fe8a 	bl	800e818 <sum_sfn>
 800eb04:	4603      	mov	r3, r0
 800eb06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	69db      	ldr	r3, [r3, #28]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	69f8      	ldr	r0, [r7, #28]
 800eb10:	f7ff f848 	bl	800dba4 <move_window>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800eb1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d11d      	bne.n	800eb5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	68d8      	ldr	r0, [r3, #12]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a19      	ldr	r1, [r3, #32]
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	7efb      	ldrb	r3, [r7, #27]
 800eb30:	f7ff fd7c 	bl	800e62c <put_lfn>
				fs->wflag = 1;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	2201      	movs	r2, #1
 800eb38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff fbba 	bl	800e2b6 <dir_next>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800eb48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d107      	bne.n	800eb60 <dir_register+0x184>
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	623b      	str	r3, [r7, #32]
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1d5      	bne.n	800eb08 <dir_register+0x12c>
 800eb5c:	e000      	b.n	800eb60 <dir_register+0x184>
				if (res != FR_OK) break;
 800eb5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eb60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d128      	bne.n	800ebba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	69db      	ldr	r3, [r3, #28]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	69f8      	ldr	r0, [r7, #28]
 800eb70:	f7ff f818 	bl	800dba4 <move_window>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800eb7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d11b      	bne.n	800ebba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	2220      	movs	r2, #32
 800eb88:	2100      	movs	r1, #0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fe38 	bl	800d800 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a18      	ldr	r0, [r3, #32]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	3324      	adds	r3, #36	@ 0x24
 800eb98:	220b      	movs	r2, #11
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	f7fe fe0f 	bl	800d7be <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	330c      	adds	r3, #12
 800ebac:	f002 0218 	and.w	r2, r2, #24
 800ebb0:	b2d2      	uxtb	r2, r2
 800ebb2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ebba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3730      	adds	r7, #48	@ 0x30
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	4ec4ec4f 	.word	0x4ec4ec4f

0800ebcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b08a      	sub	sp, #40	@ 0x28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	613b      	str	r3, [r7, #16]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	61ba      	str	r2, [r7, #24]
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ebfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebfc:	2b1f      	cmp	r3, #31
 800ebfe:	d940      	bls.n	800ec82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ec00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec02:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec04:	d006      	beq.n	800ec14 <create_name+0x48>
 800ec06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec08:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec0a:	d110      	bne.n	800ec2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec0c:	e002      	b.n	800ec14 <create_name+0x48>
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	3301      	adds	r3, #1
 800ec12:	61bb      	str	r3, [r7, #24]
 800ec14:	693a      	ldr	r2, [r7, #16]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	4413      	add	r3, r2
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec1e:	d0f6      	beq.n	800ec0e <create_name+0x42>
 800ec20:	693a      	ldr	r2, [r7, #16]
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	4413      	add	r3, r2
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec2a:	d0f0      	beq.n	800ec0e <create_name+0x42>
			break;
 800ec2c:	e02a      	b.n	800ec84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	2bfe      	cmp	r3, #254	@ 0xfe
 800ec32:	d901      	bls.n	800ec38 <create_name+0x6c>
 800ec34:	2306      	movs	r3, #6
 800ec36:	e17d      	b.n	800ef34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ec38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ec3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec40:	2101      	movs	r1, #1
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 fab0 	bl	80101a8 <ff_convert>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ec4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d101      	bne.n	800ec56 <create_name+0x8a>
 800ec52:	2306      	movs	r3, #6
 800ec54:	e16e      	b.n	800ef34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec58:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec5a:	d809      	bhi.n	800ec70 <create_name+0xa4>
 800ec5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec5e:	4619      	mov	r1, r3
 800ec60:	488d      	ldr	r0, [pc, #564]	@ (800ee98 <create_name+0x2cc>)
 800ec62:	f7fe fe0f 	bl	800d884 <chk_chr>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <create_name+0xa4>
 800ec6c:	2306      	movs	r3, #6
 800ec6e:	e161      	b.n	800ef34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	617a      	str	r2, [r7, #20]
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ec80:	e7b4      	b.n	800ebec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ec82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	441a      	add	r2, r3
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ec8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec90:	2b1f      	cmp	r3, #31
 800ec92:	d801      	bhi.n	800ec98 <create_name+0xcc>
 800ec94:	2304      	movs	r3, #4
 800ec96:	e000      	b.n	800ec9a <create_name+0xce>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ec9e:	e011      	b.n	800ecc4 <create_name+0xf8>
		w = lfn[di - 1];
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eca6:	4413      	add	r3, r2
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	4413      	add	r3, r2
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ecb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecb4:	2b20      	cmp	r3, #32
 800ecb6:	d002      	beq.n	800ecbe <create_name+0xf2>
 800ecb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecba:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecbc:	d106      	bne.n	800eccc <create_name+0x100>
		di--;
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1ea      	bne.n	800eca0 <create_name+0xd4>
 800ecca:	e000      	b.n	800ecce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800eccc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <create_name+0x118>
 800ece0:	2306      	movs	r3, #6
 800ece2:	e127      	b.n	800ef34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3324      	adds	r3, #36	@ 0x24
 800ece8:	220b      	movs	r2, #11
 800ecea:	2120      	movs	r1, #32
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fe fd87 	bl	800d800 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	61bb      	str	r3, [r7, #24]
 800ecf6:	e002      	b.n	800ecfe <create_name+0x132>
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	61bb      	str	r3, [r7, #24]
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	005b      	lsls	r3, r3, #1
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	4413      	add	r3, r2
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	2b20      	cmp	r3, #32
 800ed0a:	d0f5      	beq.n	800ecf8 <create_name+0x12c>
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	4413      	add	r3, r2
 800ed14:	881b      	ldrh	r3, [r3, #0]
 800ed16:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed18:	d0ee      	beq.n	800ecf8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d009      	beq.n	800ed34 <create_name+0x168>
 800ed20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed24:	f043 0303 	orr.w	r3, r3, #3
 800ed28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed2c:	e002      	b.n	800ed34 <create_name+0x168>
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	617b      	str	r3, [r7, #20]
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d009      	beq.n	800ed4e <create_name+0x182>
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ed40:	4413      	add	r3, r2
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	4413      	add	r3, r2
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed4c:	d1ef      	bne.n	800ed2e <create_name+0x162>

	i = b = 0; ni = 8;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed54:	2300      	movs	r3, #0
 800ed56:	623b      	str	r3, [r7, #32]
 800ed58:	2308      	movs	r3, #8
 800ed5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	61ba      	str	r2, [r7, #24]
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	4413      	add	r3, r2
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 8090 	beq.w	800ee94 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ed74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed76:	2b20      	cmp	r3, #32
 800ed78:	d006      	beq.n	800ed88 <create_name+0x1bc>
 800ed7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed7e:	d10a      	bne.n	800ed96 <create_name+0x1ca>
 800ed80:	69ba      	ldr	r2, [r7, #24]
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d006      	beq.n	800ed96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ed88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed8c:	f043 0303 	orr.w	r3, r3, #3
 800ed90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed94:	e07d      	b.n	800ee92 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ed96:	6a3a      	ldr	r2, [r7, #32]
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d203      	bcs.n	800eda6 <create_name+0x1da>
 800ed9e:	69ba      	ldr	r2, [r7, #24]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d123      	bne.n	800edee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	2b0b      	cmp	r3, #11
 800edaa:	d106      	bne.n	800edba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800edac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edb0:	f043 0303 	orr.w	r3, r3, #3
 800edb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800edb8:	e075      	b.n	800eea6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800edba:	69ba      	ldr	r2, [r7, #24]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d005      	beq.n	800edce <create_name+0x202>
 800edc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edc6:	f043 0303 	orr.w	r3, r3, #3
 800edca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d866      	bhi.n	800eea4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	61bb      	str	r3, [r7, #24]
 800edda:	2308      	movs	r3, #8
 800eddc:	623b      	str	r3, [r7, #32]
 800edde:	230b      	movs	r3, #11
 800ede0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ede2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800edec:	e051      	b.n	800ee92 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800edee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edf0:	2b7f      	cmp	r3, #127	@ 0x7f
 800edf2:	d914      	bls.n	800ee1e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800edf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edf6:	2100      	movs	r1, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f001 f9d5 	bl	80101a8 <ff_convert>
 800edfe:	4603      	mov	r3, r0
 800ee00:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ee02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <create_name+0x246>
 800ee08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee0a:	3b80      	subs	r3, #128	@ 0x80
 800ee0c:	4a23      	ldr	r2, [pc, #140]	@ (800ee9c <create_name+0x2d0>)
 800ee0e:	5cd3      	ldrb	r3, [r2, r3]
 800ee10:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ee12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee16:	f043 0302 	orr.w	r3, r3, #2
 800ee1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d007      	beq.n	800ee34 <create_name+0x268>
 800ee24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee26:	4619      	mov	r1, r3
 800ee28:	481d      	ldr	r0, [pc, #116]	@ (800eea0 <create_name+0x2d4>)
 800ee2a:	f7fe fd2b 	bl	800d884 <chk_chr>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d008      	beq.n	800ee46 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee34:	235f      	movs	r3, #95	@ 0x5f
 800ee36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ee38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee3c:	f043 0303 	orr.w	r3, r3, #3
 800ee40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee44:	e01b      	b.n	800ee7e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee48:	2b40      	cmp	r3, #64	@ 0x40
 800ee4a:	d909      	bls.n	800ee60 <create_name+0x294>
 800ee4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee4e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ee50:	d806      	bhi.n	800ee60 <create_name+0x294>
					b |= 2;
 800ee52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee56:	f043 0302 	orr.w	r3, r3, #2
 800ee5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee5e:	e00e      	b.n	800ee7e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee62:	2b60      	cmp	r3, #96	@ 0x60
 800ee64:	d90b      	bls.n	800ee7e <create_name+0x2b2>
 800ee66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee68:	2b7a      	cmp	r3, #122	@ 0x7a
 800ee6a:	d808      	bhi.n	800ee7e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ee6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee70:	f043 0301 	orr.w	r3, r3, #1
 800ee74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee7a:	3b20      	subs	r3, #32
 800ee7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ee7e:	6a3b      	ldr	r3, [r7, #32]
 800ee80:	1c5a      	adds	r2, r3, #1
 800ee82:	623a      	str	r2, [r7, #32]
 800ee84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee86:	b2d1      	uxtb	r1, r2
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	460a      	mov	r2, r1
 800ee8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ee92:	e763      	b.n	800ed5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ee94:	bf00      	nop
 800ee96:	e006      	b.n	800eea6 <create_name+0x2da>
 800ee98:	08011314 	.word	0x08011314
 800ee9c:	080113b0 	.word	0x080113b0
 800eea0:	08011320 	.word	0x08011320
			if (si > di) break;			/* No extension */
 800eea4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eeac:	2be5      	cmp	r3, #229	@ 0xe5
 800eeae:	d103      	bne.n	800eeb8 <create_name+0x2ec>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2205      	movs	r2, #5
 800eeb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	2b08      	cmp	r3, #8
 800eebc:	d104      	bne.n	800eec8 <create_name+0x2fc>
 800eebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eecc:	f003 030c 	and.w	r3, r3, #12
 800eed0:	2b0c      	cmp	r3, #12
 800eed2:	d005      	beq.n	800eee0 <create_name+0x314>
 800eed4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eed8:	f003 0303 	and.w	r3, r3, #3
 800eedc:	2b03      	cmp	r3, #3
 800eede:	d105      	bne.n	800eeec <create_name+0x320>
 800eee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eee4:	f043 0302 	orr.w	r3, r3, #2
 800eee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eeec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eef0:	f003 0302 	and.w	r3, r3, #2
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d117      	bne.n	800ef28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eefc:	f003 0303 	and.w	r3, r3, #3
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d105      	bne.n	800ef10 <create_name+0x344>
 800ef04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef08:	f043 0310 	orr.w	r3, r3, #16
 800ef0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ef10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ef14:	f003 030c 	and.w	r3, r3, #12
 800ef18:	2b04      	cmp	r3, #4
 800ef1a:	d105      	bne.n	800ef28 <create_name+0x35c>
 800ef1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef20:	f043 0308 	orr.w	r3, r3, #8
 800ef24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ef2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ef32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3728      	adds	r7, #40	@ 0x28
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef50:	e002      	b.n	800ef58 <follow_path+0x1c>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	3301      	adds	r3, #1
 800ef56:	603b      	str	r3, [r7, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef5e:	d0f8      	beq.n	800ef52 <follow_path+0x16>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef66:	d0f4      	beq.n	800ef52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b1f      	cmp	r3, #31
 800ef74:	d80a      	bhi.n	800ef8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2280      	movs	r2, #128	@ 0x80
 800ef7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ef7e:	2100      	movs	r1, #0
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7ff f91d 	bl	800e1c0 <dir_sdi>
 800ef86:	4603      	mov	r3, r0
 800ef88:	75fb      	strb	r3, [r7, #23]
 800ef8a:	e043      	b.n	800f014 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef8c:	463b      	mov	r3, r7
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff fe1b 	bl	800ebcc <create_name>
 800ef96:	4603      	mov	r3, r0
 800ef98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d134      	bne.n	800f00a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff fc5a 	bl	800e85a <dir_find>
 800efa6:	4603      	mov	r3, r0
 800efa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800efb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800efb2:	7dfb      	ldrb	r3, [r7, #23]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00a      	beq.n	800efce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	2b04      	cmp	r3, #4
 800efbc:	d127      	bne.n	800f00e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800efbe:	7afb      	ldrb	r3, [r7, #11]
 800efc0:	f003 0304 	and.w	r3, r3, #4
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d122      	bne.n	800f00e <follow_path+0xd2>
 800efc8:	2305      	movs	r3, #5
 800efca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800efcc:	e01f      	b.n	800f00e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efce:	7afb      	ldrb	r3, [r7, #11]
 800efd0:	f003 0304 	and.w	r3, r3, #4
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d11c      	bne.n	800f012 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	799b      	ldrb	r3, [r3, #6]
 800efdc:	f003 0310 	and.w	r3, r3, #16
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d102      	bne.n	800efea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800efe4:	2305      	movs	r3, #5
 800efe6:	75fb      	strb	r3, [r7, #23]
 800efe8:	e014      	b.n	800f014 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	695b      	ldr	r3, [r3, #20]
 800eff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eff8:	4413      	add	r3, r2
 800effa:	4619      	mov	r1, r3
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f7ff fa66 	bl	800e4ce <ld_clust>
 800f002:	4602      	mov	r2, r0
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f008:	e7c0      	b.n	800ef8c <follow_path+0x50>
			if (res != FR_OK) break;
 800f00a:	bf00      	nop
 800f00c:	e002      	b.n	800f014 <follow_path+0xd8>
				break;
 800f00e:	bf00      	nop
 800f010:	e000      	b.n	800f014 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f012:	bf00      	nop
			}
		}
	}

	return res;
 800f014:	7dfb      	ldrb	r3, [r7, #23]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3718      	adds	r7, #24
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f01e:	b480      	push	{r7}
 800f020:	b087      	sub	sp, #28
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f026:	f04f 33ff 	mov.w	r3, #4294967295
 800f02a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d031      	beq.n	800f098 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	e002      	b.n	800f042 <get_ldnumber+0x24>
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	3301      	adds	r3, #1
 800f040:	617b      	str	r3, [r7, #20]
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	2b1f      	cmp	r3, #31
 800f048:	d903      	bls.n	800f052 <get_ldnumber+0x34>
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f050:	d1f4      	bne.n	800f03c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b3a      	cmp	r3, #58	@ 0x3a
 800f058:	d11c      	bne.n	800f094 <get_ldnumber+0x76>
			tp = *path;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	60fa      	str	r2, [r7, #12]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	3b30      	subs	r3, #48	@ 0x30
 800f06a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d80e      	bhi.n	800f090 <get_ldnumber+0x72>
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	429a      	cmp	r2, r3
 800f078:	d10a      	bne.n	800f090 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d107      	bne.n	800f090 <get_ldnumber+0x72>
					vol = (int)i;
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	3301      	adds	r3, #1
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	e002      	b.n	800f09a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f094:	2300      	movs	r3, #0
 800f096:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f098:	693b      	ldr	r3, [r7, #16]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	371c      	adds	r7, #28
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
	...

0800f0a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	70da      	strb	r2, [r3, #3]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f0be:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7fe fd6e 	bl	800dba4 <move_window>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <check_fs+0x2a>
 800f0ce:	2304      	movs	r3, #4
 800f0d0:	e038      	b.n	800f144 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3334      	adds	r3, #52	@ 0x34
 800f0d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe faec 	bl	800d6b8 <ld_word>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d001      	beq.n	800f0f0 <check_fs+0x48>
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e029      	b.n	800f144 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f0f6:	2be9      	cmp	r3, #233	@ 0xe9
 800f0f8:	d009      	beq.n	800f10e <check_fs+0x66>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f100:	2beb      	cmp	r3, #235	@ 0xeb
 800f102:	d11e      	bne.n	800f142 <check_fs+0x9a>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f10a:	2b90      	cmp	r3, #144	@ 0x90
 800f10c:	d119      	bne.n	800f142 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	3334      	adds	r3, #52	@ 0x34
 800f112:	3336      	adds	r3, #54	@ 0x36
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe fae8 	bl	800d6ea <ld_dword>
 800f11a:	4603      	mov	r3, r0
 800f11c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f120:	4a0a      	ldr	r2, [pc, #40]	@ (800f14c <check_fs+0xa4>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d101      	bne.n	800f12a <check_fs+0x82>
 800f126:	2300      	movs	r3, #0
 800f128:	e00c      	b.n	800f144 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3334      	adds	r3, #52	@ 0x34
 800f12e:	3352      	adds	r3, #82	@ 0x52
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe fada 	bl	800d6ea <ld_dword>
 800f136:	4603      	mov	r3, r0
 800f138:	4a05      	ldr	r2, [pc, #20]	@ (800f150 <check_fs+0xa8>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d101      	bne.n	800f142 <check_fs+0x9a>
 800f13e:	2300      	movs	r3, #0
 800f140:	e000      	b.n	800f144 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f142:	2302      	movs	r3, #2
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	00544146 	.word	0x00544146
 800f150:	33544146 	.word	0x33544146

0800f154 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b096      	sub	sp, #88	@ 0x58
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	4613      	mov	r3, r2
 800f160:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2200      	movs	r2, #0
 800f166:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7ff ff58 	bl	800f01e <get_ldnumber>
 800f16e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f172:	2b00      	cmp	r3, #0
 800f174:	da01      	bge.n	800f17a <find_volume+0x26>
 800f176:	230b      	movs	r3, #11
 800f178:	e230      	b.n	800f5dc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f17a:	4aa1      	ldr	r2, [pc, #644]	@ (800f400 <find_volume+0x2ac>)
 800f17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f182:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <find_volume+0x3a>
 800f18a:	230c      	movs	r3, #12
 800f18c:	e226      	b.n	800f5dc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f192:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	f023 0301 	bic.w	r3, r3, #1
 800f19a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01a      	beq.n	800f1da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a6:	785b      	ldrb	r3, [r3, #1]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fe fa03 	bl	800d5b4 <disk_status>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1b8:	f003 0301 	and.w	r3, r3, #1
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10c      	bne.n	800f1da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d007      	beq.n	800f1d6 <find_volume+0x82>
 800f1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1ca:	f003 0304 	and.w	r3, r3, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	e202      	b.n	800f5dc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e200      	b.n	800f5dc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1dc:	2200      	movs	r2, #0
 800f1de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	785b      	ldrb	r3, [r3, #1]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe f9fb 	bl	800d5e8 <disk_initialize>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f1f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f204:	2303      	movs	r3, #3
 800f206:	e1e9      	b.n	800f5dc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f208:	79fb      	ldrb	r3, [r7, #7]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d007      	beq.n	800f21e <find_volume+0xca>
 800f20e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f212:	f003 0304 	and.w	r3, r3, #4
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f21a:	230a      	movs	r3, #10
 800f21c:	e1de      	b.n	800f5dc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f21e:	2300      	movs	r3, #0
 800f220:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f222:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f226:	f7ff ff3f 	bl	800f0a8 <check_fs>
 800f22a:	4603      	mov	r3, r0
 800f22c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f234:	2b02      	cmp	r3, #2
 800f236:	d149      	bne.n	800f2cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f238:	2300      	movs	r3, #0
 800f23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f23c:	e01e      	b.n	800f27c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f240:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f246:	011b      	lsls	r3, r3, #4
 800f248:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f24c:	4413      	add	r3, r2
 800f24e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f252:	3304      	adds	r3, #4
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d006      	beq.n	800f268 <find_volume+0x114>
 800f25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25c:	3308      	adds	r3, #8
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe fa43 	bl	800d6ea <ld_dword>
 800f264:	4602      	mov	r2, r0
 800f266:	e000      	b.n	800f26a <find_volume+0x116>
 800f268:	2200      	movs	r2, #0
 800f26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	3358      	adds	r3, #88	@ 0x58
 800f270:	443b      	add	r3, r7
 800f272:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f278:	3301      	adds	r3, #1
 800f27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d9dd      	bls.n	800f23e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f282:	2300      	movs	r3, #0
 800f284:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <find_volume+0x13e>
 800f28c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f28e:	3b01      	subs	r3, #1
 800f290:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	3358      	adds	r3, #88	@ 0x58
 800f298:	443b      	add	r3, r7
 800f29a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f29e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d005      	beq.n	800f2b2 <find_volume+0x15e>
 800f2a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f2a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f2aa:	f7ff fefd 	bl	800f0a8 <check_fs>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e000      	b.n	800f2b4 <find_volume+0x160>
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d905      	bls.n	800f2cc <find_volume+0x178>
 800f2c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	d9e2      	bls.n	800f292 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2d0:	2b04      	cmp	r3, #4
 800f2d2:	d101      	bne.n	800f2d8 <find_volume+0x184>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e181      	b.n	800f5dc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f2d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d901      	bls.n	800f2e4 <find_volume+0x190>
 800f2e0:	230d      	movs	r3, #13
 800f2e2:	e17b      	b.n	800f5dc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e6:	3334      	adds	r3, #52	@ 0x34
 800f2e8:	330b      	adds	r3, #11
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fe f9e4 	bl	800d6b8 <ld_word>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2f6:	d001      	beq.n	800f2fc <find_volume+0x1a8>
 800f2f8:	230d      	movs	r3, #13
 800f2fa:	e16f      	b.n	800f5dc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fe:	3334      	adds	r3, #52	@ 0x34
 800f300:	3316      	adds	r3, #22
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe f9d8 	bl	800d6b8 <ld_word>
 800f308:	4603      	mov	r3, r0
 800f30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f30c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <find_volume+0x1cc>
 800f312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f314:	3334      	adds	r3, #52	@ 0x34
 800f316:	3324      	adds	r3, #36	@ 0x24
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fe f9e6 	bl	800d6ea <ld_dword>
 800f31e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f322:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f324:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f328:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f332:	789b      	ldrb	r3, [r3, #2]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d005      	beq.n	800f344 <find_volume+0x1f0>
 800f338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33a:	789b      	ldrb	r3, [r3, #2]
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d001      	beq.n	800f344 <find_volume+0x1f0>
 800f340:	230d      	movs	r3, #13
 800f342:	e14b      	b.n	800f5dc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f346:	789b      	ldrb	r3, [r3, #2]
 800f348:	461a      	mov	r2, r3
 800f34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f34c:	fb02 f303 	mul.w	r3, r2, r3
 800f350:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f358:	461a      	mov	r2, r3
 800f35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	895b      	ldrh	r3, [r3, #10]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d008      	beq.n	800f378 <find_volume+0x224>
 800f366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f368:	895b      	ldrh	r3, [r3, #10]
 800f36a:	461a      	mov	r2, r3
 800f36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36e:	895b      	ldrh	r3, [r3, #10]
 800f370:	3b01      	subs	r3, #1
 800f372:	4013      	ands	r3, r2
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <find_volume+0x228>
 800f378:	230d      	movs	r3, #13
 800f37a:	e12f      	b.n	800f5dc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37e:	3334      	adds	r3, #52	@ 0x34
 800f380:	3311      	adds	r3, #17
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe f998 	bl	800d6b8 <ld_word>
 800f388:	4603      	mov	r3, r0
 800f38a:	461a      	mov	r2, r3
 800f38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f392:	891b      	ldrh	r3, [r3, #8]
 800f394:	f003 030f 	and.w	r3, r3, #15
 800f398:	b29b      	uxth	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <find_volume+0x24e>
 800f39e:	230d      	movs	r3, #13
 800f3a0:	e11c      	b.n	800f5dc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a4:	3334      	adds	r3, #52	@ 0x34
 800f3a6:	3313      	adds	r3, #19
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fe f985 	bl	800d6b8 <ld_word>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <find_volume+0x272>
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ba:	3334      	adds	r3, #52	@ 0x34
 800f3bc:	3320      	adds	r3, #32
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe f993 	bl	800d6ea <ld_dword>
 800f3c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c8:	3334      	adds	r3, #52	@ 0x34
 800f3ca:	330e      	adds	r3, #14
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7fe f973 	bl	800d6b8 <ld_word>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f3d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <find_volume+0x28c>
 800f3dc:	230d      	movs	r3, #13
 800f3de:	e0fd      	b.n	800f5dc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f3e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3e4:	4413      	add	r3, r2
 800f3e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3e8:	8912      	ldrh	r2, [r2, #8]
 800f3ea:	0912      	lsrs	r2, r2, #4
 800f3ec:	b292      	uxth	r2, r2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f3f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d204      	bcs.n	800f404 <find_volume+0x2b0>
 800f3fa:	230d      	movs	r3, #13
 800f3fc:	e0ee      	b.n	800f5dc <find_volume+0x488>
 800f3fe:	bf00      	nop
 800f400:	24075a84 	.word	0x24075a84
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f404:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f40c:	8952      	ldrh	r2, [r2, #10]
 800f40e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f412:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <find_volume+0x2ca>
 800f41a:	230d      	movs	r3, #13
 800f41c:	e0de      	b.n	800f5dc <find_volume+0x488>
		fmt = FS_FAT32;
 800f41e:	2303      	movs	r3, #3
 800f420:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d802      	bhi.n	800f434 <find_volume+0x2e0>
 800f42e:	2302      	movs	r3, #2
 800f430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f436:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d802      	bhi.n	800f444 <find_volume+0x2f0>
 800f43e:	2301      	movs	r3, #1
 800f440:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f446:	1c9a      	adds	r2, r3, #2
 800f448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f450:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f452:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f456:	441a      	add	r2, r3
 800f458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f45c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f460:	441a      	add	r2, r3
 800f462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f464:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800f466:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f46a:	2b03      	cmp	r3, #3
 800f46c:	d11e      	bne.n	800f4ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f470:	3334      	adds	r3, #52	@ 0x34
 800f472:	332a      	adds	r3, #42	@ 0x2a
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe f91f 	bl	800d6b8 <ld_word>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <find_volume+0x330>
 800f480:	230d      	movs	r3, #13
 800f482:	e0ab      	b.n	800f5dc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f486:	891b      	ldrh	r3, [r3, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <find_volume+0x33c>
 800f48c:	230d      	movs	r3, #13
 800f48e:	e0a5      	b.n	800f5dc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f492:	3334      	adds	r3, #52	@ 0x34
 800f494:	332c      	adds	r3, #44	@ 0x2c
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe f927 	bl	800d6ea <ld_dword>
 800f49c:	4602      	mov	r2, r0
 800f49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a4:	699b      	ldr	r3, [r3, #24]
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4aa:	e01f      	b.n	800f4ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ae:	891b      	ldrh	r3, [r3, #8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <find_volume+0x364>
 800f4b4:	230d      	movs	r3, #13
 800f4b6:	e091      	b.n	800f5dc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4be:	441a      	add	r2, r3
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f4c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d103      	bne.n	800f4d4 <find_volume+0x380>
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	699b      	ldr	r3, [r3, #24]
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	e00a      	b.n	800f4ea <find_volume+0x396>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	699a      	ldr	r2, [r3, #24]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	4413      	add	r3, r2
 800f4de:	085a      	lsrs	r2, r3, #1
 800f4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e2:	699b      	ldr	r3, [r3, #24]
 800f4e4:	f003 0301 	and.w	r3, r3, #1
 800f4e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f4ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ee:	69da      	ldr	r2, [r3, #28]
 800f4f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f4f6:	0a5b      	lsrs	r3, r3, #9
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d201      	bcs.n	800f500 <find_volume+0x3ac>
 800f4fc:	230d      	movs	r3, #13
 800f4fe:	e06d      	b.n	800f5dc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	615a      	str	r2, [r3, #20]
 800f508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50a:	695a      	ldr	r2, [r3, #20]
 800f50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f512:	2280      	movs	r2, #128	@ 0x80
 800f514:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f516:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d149      	bne.n	800f5b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f520:	3334      	adds	r3, #52	@ 0x34
 800f522:	3330      	adds	r3, #48	@ 0x30
 800f524:	4618      	mov	r0, r3
 800f526:	f7fe f8c7 	bl	800d6b8 <ld_word>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d140      	bne.n	800f5b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f532:	3301      	adds	r3, #1
 800f534:	4619      	mov	r1, r3
 800f536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f538:	f7fe fb34 	bl	800dba4 <move_window>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d137      	bne.n	800f5b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f544:	2200      	movs	r2, #0
 800f546:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f54a:	3334      	adds	r3, #52	@ 0x34
 800f54c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f550:	4618      	mov	r0, r3
 800f552:	f7fe f8b1 	bl	800d6b8 <ld_word>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f55e:	429a      	cmp	r2, r3
 800f560:	d127      	bne.n	800f5b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f564:	3334      	adds	r3, #52	@ 0x34
 800f566:	4618      	mov	r0, r3
 800f568:	f7fe f8bf 	bl	800d6ea <ld_dword>
 800f56c:	4603      	mov	r3, r0
 800f56e:	4a1d      	ldr	r2, [pc, #116]	@ (800f5e4 <find_volume+0x490>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d11e      	bne.n	800f5b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f576:	3334      	adds	r3, #52	@ 0x34
 800f578:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fe f8b4 	bl	800d6ea <ld_dword>
 800f582:	4603      	mov	r3, r0
 800f584:	4a18      	ldr	r2, [pc, #96]	@ (800f5e8 <find_volume+0x494>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d113      	bne.n	800f5b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58c:	3334      	adds	r3, #52	@ 0x34
 800f58e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe f8a9 	bl	800d6ea <ld_dword>
 800f598:	4602      	mov	r2, r0
 800f59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a0:	3334      	adds	r3, #52	@ 0x34
 800f5a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe f89f 	bl	800d6ea <ld_dword>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f5b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f5ec <find_volume+0x498>)
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ec <find_volume+0x498>)
 800f5c4:	801a      	strh	r2, [r3, #0]
 800f5c6:	4b09      	ldr	r3, [pc, #36]	@ (800f5ec <find_volume+0x498>)
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5cc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d0:	4a07      	ldr	r2, [pc, #28]	@ (800f5f0 <find_volume+0x49c>)
 800f5d2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f5d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f5d6:	f7fe fa7d 	bl	800dad4 <clear_lock>
#endif
	return FR_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3758      	adds	r7, #88	@ 0x58
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	41615252 	.word	0x41615252
 800f5e8:	61417272 	.word	0x61417272
 800f5ec:	24075a88 	.word	0x24075a88
 800f5f0:	24075aac 	.word	0x24075aac

0800f5f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f5fe:	2309      	movs	r3, #9
 800f600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01c      	beq.n	800f642 <validate+0x4e>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d018      	beq.n	800f642 <validate+0x4e>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d013      	beq.n	800f642 <validate+0x4e>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	889a      	ldrh	r2, [r3, #4]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	88db      	ldrh	r3, [r3, #6]
 800f624:	429a      	cmp	r2, r3
 800f626:	d10c      	bne.n	800f642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	785b      	ldrb	r3, [r3, #1]
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fd ffc0 	bl	800d5b4 <disk_status>
 800f634:	4603      	mov	r3, r0
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <validate+0x4e>
			res = FR_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f642:	7bfb      	ldrb	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d102      	bne.n	800f64e <validate+0x5a>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	e000      	b.n	800f650 <validate+0x5c>
 800f64e:	2300      	movs	r3, #0
 800f650:	683a      	ldr	r2, [r7, #0]
 800f652:	6013      	str	r3, [r2, #0]
	return res;
 800f654:	7bfb      	ldrb	r3, [r7, #15]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	4613      	mov	r3, r2
 800f66c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f672:	f107 0310 	add.w	r3, r7, #16
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff fcd1 	bl	800f01e <get_ldnumber>
 800f67c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	2b00      	cmp	r3, #0
 800f682:	da01      	bge.n	800f688 <f_mount+0x28>
 800f684:	230b      	movs	r3, #11
 800f686:	e02b      	b.n	800f6e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f688:	4a17      	ldr	r2, [pc, #92]	@ (800f6e8 <f_mount+0x88>)
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d005      	beq.n	800f6a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f698:	69b8      	ldr	r0, [r7, #24]
 800f69a:	f7fe fa1b 	bl	800dad4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	490d      	ldr	r1, [pc, #52]	@ (800f6e8 <f_mount+0x88>)
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d002      	beq.n	800f6c6 <f_mount+0x66>
 800f6c0:	79fb      	ldrb	r3, [r7, #7]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d001      	beq.n	800f6ca <f_mount+0x6a>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e00a      	b.n	800f6e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f6ca:	f107 010c 	add.w	r1, r7, #12
 800f6ce:	f107 0308 	add.w	r3, r7, #8
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7ff fd3d 	bl	800f154 <find_volume>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3720      	adds	r7, #32
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	24075a84 	.word	0x24075a84

0800f6ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b09a      	sub	sp, #104	@ 0x68
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <f_open+0x18>
 800f700:	2309      	movs	r3, #9
 800f702:	e1a9      	b.n	800fa58 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f70a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f70c:	79fa      	ldrb	r2, [r7, #7]
 800f70e:	f107 0114 	add.w	r1, r7, #20
 800f712:	f107 0308 	add.w	r3, r7, #8
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff fd1c 	bl	800f154 <find_volume>
 800f71c:	4603      	mov	r3, r0
 800f71e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f722:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f726:	2b00      	cmp	r3, #0
 800f728:	f040 818d 	bne.w	800fa46 <f_open+0x35a>
		dj.obj.fs = fs;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f730:	68ba      	ldr	r2, [r7, #8]
 800f732:	f107 0318 	add.w	r3, r7, #24
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fbff 	bl	800ef3c <follow_path>
 800f73e:	4603      	mov	r3, r0
 800f740:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f744:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d118      	bne.n	800f77e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f74c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f750:	b25b      	sxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	da03      	bge.n	800f75e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f756:	2306      	movs	r3, #6
 800f758:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f75c:	e00f      	b.n	800f77e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	2b01      	cmp	r3, #1
 800f762:	bf8c      	ite	hi
 800f764:	2301      	movhi	r3, #1
 800f766:	2300      	movls	r3, #0
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	461a      	mov	r2, r3
 800f76c:	f107 0318 	add.w	r3, r7, #24
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe f8a2 	bl	800d8bc <chk_lock>
 800f778:	4603      	mov	r3, r0
 800f77a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f77e:	79fb      	ldrb	r3, [r7, #7]
 800f780:	f003 031c 	and.w	r3, r3, #28
 800f784:	2b00      	cmp	r3, #0
 800f786:	d07f      	beq.n	800f888 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f788:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d017      	beq.n	800f7c0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f790:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f794:	2b04      	cmp	r3, #4
 800f796:	d10e      	bne.n	800f7b6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f798:	f7fe f8ec 	bl	800d974 <enq_lock>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d006      	beq.n	800f7b0 <f_open+0xc4>
 800f7a2:	f107 0318 	add.w	r3, r7, #24
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7ff f918 	bl	800e9dc <dir_register>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	e000      	b.n	800f7b2 <f_open+0xc6>
 800f7b0:	2312      	movs	r3, #18
 800f7b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	f043 0308 	orr.w	r3, r3, #8
 800f7bc:	71fb      	strb	r3, [r7, #7]
 800f7be:	e010      	b.n	800f7e2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f7c0:	7fbb      	ldrb	r3, [r7, #30]
 800f7c2:	f003 0311 	and.w	r3, r3, #17
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <f_open+0xe6>
					res = FR_DENIED;
 800f7ca:	2307      	movs	r3, #7
 800f7cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f7d0:	e007      	b.n	800f7e2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <f_open+0xf6>
 800f7dc:	2308      	movs	r3, #8
 800f7de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f7e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d168      	bne.n	800f8bc <f_open+0x1d0>
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	f003 0308 	and.w	r3, r3, #8
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d063      	beq.n	800f8bc <f_open+0x1d0>
				dw = GET_FATTIME();
 800f7f4:	f7fd fca0 	bl	800d138 <get_fattime>
 800f7f8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	330e      	adds	r3, #14
 800f7fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f800:	4618      	mov	r0, r3
 800f802:	f7fd ffb0 	bl	800d766 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	3316      	adds	r3, #22
 800f80a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fd ffaa 	bl	800d766 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f814:	330b      	adds	r3, #11
 800f816:	2220      	movs	r2, #32
 800f818:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f81e:	4611      	mov	r1, r2
 800f820:	4618      	mov	r0, r3
 800f822:	f7fe fe54 	bl	800e4ce <ld_clust>
 800f826:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f82c:	2200      	movs	r2, #0
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fe6c 	bl	800e50c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f836:	331c      	adds	r3, #28
 800f838:	2100      	movs	r1, #0
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fd ff93 	bl	800d766 <st_dword>
					fs->wflag = 1;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2201      	movs	r2, #1
 800f844:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d037      	beq.n	800f8bc <f_open+0x1d0>
						dw = fs->winsect;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f850:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f852:	f107 0318 	add.w	r3, r7, #24
 800f856:	2200      	movs	r2, #0
 800f858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fb7f 	bl	800df5e <remove_chain>
 800f860:	4603      	mov	r3, r0
 800f862:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f866:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d126      	bne.n	800f8bc <f_open+0x1d0>
							res = move_window(fs, dw);
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f872:	4618      	mov	r0, r3
 800f874:	f7fe f996 	bl	800dba4 <move_window>
 800f878:	4603      	mov	r3, r0
 800f87a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f882:	3a01      	subs	r2, #1
 800f884:	611a      	str	r2, [r3, #16]
 800f886:	e019      	b.n	800f8bc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f888:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d115      	bne.n	800f8bc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f890:	7fbb      	ldrb	r3, [r7, #30]
 800f892:	f003 0310 	and.w	r3, r3, #16
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800f89a:	2304      	movs	r3, #4
 800f89c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f8a0:	e00c      	b.n	800f8bc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	f003 0302 	and.w	r3, r3, #2
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d007      	beq.n	800f8bc <f_open+0x1d0>
 800f8ac:	7fbb      	ldrb	r3, [r7, #30]
 800f8ae:	f003 0301 	and.w	r3, r3, #1
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <f_open+0x1d0>
						res = FR_DENIED;
 800f8b6:	2307      	movs	r3, #7
 800f8b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d126      	bne.n	800f912 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f8c4:	79fb      	ldrb	r3, [r7, #7]
 800f8c6:	f003 0308 	and.w	r3, r3, #8
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f8de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	bf8c      	ite	hi
 800f8ea:	2301      	movhi	r3, #1
 800f8ec:	2300      	movls	r3, #0
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	f107 0318 	add.w	r3, r7, #24
 800f8f6:	4611      	mov	r1, r2
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe f85d 	bl	800d9b8 <inc_lock>
 800f8fe:	4602      	mov	r2, r0
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	691b      	ldr	r3, [r3, #16]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d102      	bne.n	800f912 <f_open+0x226>
 800f90c:	2302      	movs	r3, #2
 800f90e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f912:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f916:	2b00      	cmp	r3, #0
 800f918:	f040 8095 	bne.w	800fa46 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f920:	4611      	mov	r1, r2
 800f922:	4618      	mov	r0, r3
 800f924:	f7fe fdd3 	bl	800e4ce <ld_clust>
 800f928:	4602      	mov	r2, r0
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f930:	331c      	adds	r3, #28
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd fed9 	bl	800d6ea <ld_dword>
 800f938:	4602      	mov	r2, r0
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	88da      	ldrh	r2, [r3, #6]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	79fa      	ldrb	r2, [r7, #7]
 800f956:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2200      	movs	r2, #0
 800f95c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2200      	movs	r2, #0
 800f968:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3330      	adds	r3, #48	@ 0x30
 800f96e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fd ff43 	bl	800d800 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f97a:	79fb      	ldrb	r3, [r7, #7]
 800f97c:	f003 0320 	and.w	r3, r3, #32
 800f980:	2b00      	cmp	r3, #0
 800f982:	d060      	beq.n	800fa46 <f_open+0x35a>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d05c      	beq.n	800fa46 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	895b      	ldrh	r3, [r3, #10]
 800f998:	025b      	lsls	r3, r3, #9
 800f99a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9a8:	e016      	b.n	800f9d8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe f944 	bl	800dc3c <get_fat>
 800f9b4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f9b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d802      	bhi.n	800f9c2 <f_open+0x2d6>
 800f9bc:	2302      	movs	r3, #2
 800f9be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c8:	d102      	bne.n	800f9d0 <f_open+0x2e4>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f9d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d103      	bne.n	800f9e8 <f_open+0x2fc>
 800f9e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d8e0      	bhi.n	800f9aa <f_open+0x2be>
				}
				fp->clust = clst;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f9ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f9ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d127      	bne.n	800fa46 <f_open+0x35a>
 800f9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d022      	beq.n	800fa46 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe f8fa 	bl	800dbfe <clust2sect>
 800fa0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800fa0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d103      	bne.n	800fa1a <f_open+0x32e>
						res = FR_INT_ERR;
 800fa12:	2302      	movs	r3, #2
 800fa14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa18:	e015      	b.n	800fa46 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa1c:	0a5a      	lsrs	r2, r3, #9
 800fa1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa20:	441a      	add	r2, r3
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	7858      	ldrb	r0, [r3, #1]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6a1a      	ldr	r2, [r3, #32]
 800fa34:	2301      	movs	r3, #1
 800fa36:	f7fd fdff 	bl	800d638 <disk_read>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <f_open+0x35a>
 800fa40:	2301      	movs	r3, #1
 800fa42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d002      	beq.n	800fa54 <f_open+0x368>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3768      	adds	r7, #104	@ 0x68
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08e      	sub	sp, #56	@ 0x38
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	2200      	movs	r2, #0
 800fa76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f107 0214 	add.w	r2, r7, #20
 800fa7e:	4611      	mov	r1, r2
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fdb7 	bl	800f5f4 <validate>
 800fa86:	4603      	mov	r3, r0
 800fa88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d107      	bne.n	800faa4 <f_read+0x44>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	7d5b      	ldrb	r3, [r3, #21]
 800fa98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fa9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d002      	beq.n	800faaa <f_read+0x4a>
 800faa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800faa8:	e115      	b.n	800fcd6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d101      	bne.n	800faba <f_read+0x5a>
 800fab6:	2307      	movs	r3, #7
 800fab8:	e10d      	b.n	800fcd6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68da      	ldr	r2, [r3, #12]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	6a3b      	ldr	r3, [r7, #32]
 800faca:	429a      	cmp	r2, r3
 800facc:	f240 80fe 	bls.w	800fccc <f_read+0x26c>
 800fad0:	6a3b      	ldr	r3, [r7, #32]
 800fad2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fad4:	e0fa      	b.n	800fccc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	699b      	ldr	r3, [r3, #24]
 800fada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f040 80c6 	bne.w	800fc70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	0a5b      	lsrs	r3, r3, #9
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	8952      	ldrh	r2, [r2, #10]
 800faee:	3a01      	subs	r2, #1
 800faf0:	4013      	ands	r3, r2
 800faf2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d12f      	bne.n	800fb5a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	699b      	ldr	r3, [r3, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d103      	bne.n	800fb0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb08:	e013      	b.n	800fb32 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	4619      	mov	r1, r3
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7fe fb1d 	bl	800e158 <clmt_clust>
 800fb1e:	6338      	str	r0, [r7, #48]	@ 0x30
 800fb20:	e007      	b.n	800fb32 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fb22:	68fa      	ldr	r2, [r7, #12]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	f7fe f886 	bl	800dc3c <get_fat>
 800fb30:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d804      	bhi.n	800fb42 <f_read+0xe2>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	755a      	strb	r2, [r3, #21]
 800fb3e:	2302      	movs	r3, #2
 800fb40:	e0c9      	b.n	800fcd6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb48:	d104      	bne.n	800fb54 <f_read+0xf4>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	755a      	strb	r2, [r3, #21]
 800fb50:	2301      	movs	r3, #1
 800fb52:	e0c0      	b.n	800fcd6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	69db      	ldr	r3, [r3, #28]
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f7fe f84b 	bl	800dbfe <clust2sect>
 800fb68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d104      	bne.n	800fb7a <f_read+0x11a>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2202      	movs	r2, #2
 800fb74:	755a      	strb	r2, [r3, #21]
 800fb76:	2302      	movs	r3, #2
 800fb78:	e0ad      	b.n	800fcd6 <f_read+0x276>
			sect += csect;
 800fb7a:	69ba      	ldr	r2, [r7, #24]
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	4413      	add	r3, r2
 800fb80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	0a5b      	lsrs	r3, r3, #9
 800fb86:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d039      	beq.n	800fc02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fb8e:	69fa      	ldr	r2, [r7, #28]
 800fb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb92:	4413      	add	r3, r2
 800fb94:	697a      	ldr	r2, [r7, #20]
 800fb96:	8952      	ldrh	r2, [r2, #10]
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d905      	bls.n	800fba8 <f_read+0x148>
					cc = fs->csize - csect;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	895b      	ldrh	r3, [r3, #10]
 800fba0:	461a      	mov	r2, r3
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	7858      	ldrb	r0, [r3, #1]
 800fbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbae:	69ba      	ldr	r2, [r7, #24]
 800fbb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fbb2:	f7fd fd41 	bl	800d638 <disk_read>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <f_read+0x166>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	755a      	strb	r2, [r3, #21]
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	e087      	b.n	800fcd6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	7d1b      	ldrb	r3, [r3, #20]
 800fbca:	b25b      	sxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	da14      	bge.n	800fbfa <f_read+0x19a>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6a1a      	ldr	r2, [r3, #32]
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d90d      	bls.n	800fbfa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6a1a      	ldr	r2, [r3, #32]
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	025b      	lsls	r3, r3, #9
 800fbe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbea:	18d0      	adds	r0, r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3330      	adds	r3, #48	@ 0x30
 800fbf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	f7fd fde2 	bl	800d7be <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfc:	025b      	lsls	r3, r3, #9
 800fbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fc00:	e050      	b.n	800fca4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d02e      	beq.n	800fc6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	7d1b      	ldrb	r3, [r3, #20]
 800fc10:	b25b      	sxtb	r3, r3
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	da18      	bge.n	800fc48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	7858      	ldrb	r0, [r3, #1]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	6a1a      	ldr	r2, [r3, #32]
 800fc24:	2301      	movs	r3, #1
 800fc26:	f7fd fd27 	bl	800d678 <disk_write>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d004      	beq.n	800fc3a <f_read+0x1da>
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2201      	movs	r2, #1
 800fc34:	755a      	strb	r2, [r3, #21]
 800fc36:	2301      	movs	r3, #1
 800fc38:	e04d      	b.n	800fcd6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	7d1b      	ldrb	r3, [r3, #20]
 800fc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	7858      	ldrb	r0, [r3, #1]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc52:	2301      	movs	r3, #1
 800fc54:	69ba      	ldr	r2, [r7, #24]
 800fc56:	f7fd fcef 	bl	800d638 <disk_read>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d004      	beq.n	800fc6a <f_read+0x20a>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2201      	movs	r2, #1
 800fc64:	755a      	strb	r2, [r3, #21]
 800fc66:	2301      	movs	r3, #1
 800fc68:	e035      	b.n	800fcd6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc78:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fc7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d901      	bls.n	800fc8a <f_read+0x22a>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc98:	4413      	add	r3, r2
 800fc9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fca0:	f7fd fd8d 	bl	800d7be <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca8:	4413      	add	r3, r2
 800fcaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	699a      	ldr	r2, [r3, #24]
 800fcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb2:	441a      	add	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	619a      	str	r2, [r3, #24]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	441a      	add	r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f47f af01 	bne.w	800fad6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3738      	adds	r7, #56	@ 0x38
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b090      	sub	sp, #64	@ 0x40
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f107 0208 	add.w	r2, r7, #8
 800fcee:	4611      	mov	r1, r2
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff fc7f 	bl	800f5f4 <validate>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fcfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <f_lseek+0x2e>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7d5b      	ldrb	r3, [r3, #21]
 800fd08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fd0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d002      	beq.n	800fd1a <f_lseek+0x3c>
 800fd14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fd18:	e1e6      	b.n	80100e8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 80d1 	beq.w	800fec6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2a:	d15a      	bne.n	800fde2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd30:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd34:	1d1a      	adds	r2, r3, #4
 800fd36:	627a      	str	r2, [r7, #36]	@ 0x24
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	617b      	str	r3, [r7, #20]
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800fd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d03a      	beq.n	800fdc2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4e:	613b      	str	r3, [r7, #16]
 800fd50:	2300      	movs	r3, #0
 800fd52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd56:	3302      	adds	r3, #2
 800fd58:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5c:	60fb      	str	r3, [r7, #12]
 800fd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd60:	3301      	adds	r3, #1
 800fd62:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fd ff67 	bl	800dc3c <get_fat>
 800fd6e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d804      	bhi.n	800fd80 <f_lseek+0xa2>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	755a      	strb	r2, [r3, #21]
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	e1b3      	b.n	80100e8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd86:	d104      	bne.n	800fd92 <f_lseek+0xb4>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	755a      	strb	r2, [r3, #21]
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e1aa      	b.n	80100e8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3301      	adds	r3, #1
 800fd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d0de      	beq.n	800fd5a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fd9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d809      	bhi.n	800fdb8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda6:	1d1a      	adds	r2, r3, #4
 800fda8:	627a      	str	r2, [r7, #36]	@ 0x24
 800fdaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb0:	1d1a      	adds	r2, r3, #4
 800fdb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800fdb4:	693a      	ldr	r2, [r7, #16]
 800fdb6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	699b      	ldr	r3, [r3, #24]
 800fdbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d3c4      	bcc.n	800fd4c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdc8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fdca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d803      	bhi.n	800fdda <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	601a      	str	r2, [r3, #0]
 800fdd8:	e184      	b.n	80100e4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fdda:	2311      	movs	r3, #17
 800fddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800fde0:	e180      	b.n	80100e4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d902      	bls.n	800fdf2 <f_lseek+0x114>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f000 8172 	beq.w	80100e4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7fe f9a6 	bl	800e158 <clmt_clust>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	f7fd feef 	bl	800dbfe <clust2sect>
 800fe20:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d104      	bne.n	800fe32 <f_lseek+0x154>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	755a      	strb	r2, [r3, #21]
 800fe2e:	2302      	movs	r3, #2
 800fe30:	e15a      	b.n	80100e8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	0a5b      	lsrs	r3, r3, #9
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	8952      	ldrh	r2, [r2, #10]
 800fe3c:	3a01      	subs	r2, #1
 800fe3e:	4013      	ands	r3, r2
 800fe40:	69ba      	ldr	r2, [r7, #24]
 800fe42:	4413      	add	r3, r2
 800fe44:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f000 8148 	beq.w	80100e4 <f_lseek+0x406>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6a1b      	ldr	r3, [r3, #32]
 800fe58:	69ba      	ldr	r2, [r7, #24]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	f000 8142 	beq.w	80100e4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7d1b      	ldrb	r3, [r3, #20]
 800fe64:	b25b      	sxtb	r3, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	da18      	bge.n	800fe9c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	7858      	ldrb	r0, [r3, #1]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6a1a      	ldr	r2, [r3, #32]
 800fe78:	2301      	movs	r3, #1
 800fe7a:	f7fd fbfd 	bl	800d678 <disk_write>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d004      	beq.n	800fe8e <f_lseek+0x1b0>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	755a      	strb	r2, [r3, #21]
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e12c      	b.n	80100e8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	7858      	ldrb	r0, [r3, #1]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fea6:	2301      	movs	r3, #1
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	f7fd fbc5 	bl	800d638 <disk_read>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d004      	beq.n	800febe <f_lseek+0x1e0>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	755a      	strb	r2, [r3, #21]
 800feba:	2301      	movs	r3, #1
 800febc:	e114      	b.n	80100e8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	621a      	str	r2, [r3, #32]
 800fec4:	e10e      	b.n	80100e4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	683a      	ldr	r2, [r7, #0]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d908      	bls.n	800fee2 <f_lseek+0x204>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	7d1b      	ldrb	r3, [r3, #20]
 800fed4:	f003 0302 	and.w	r3, r3, #2
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d102      	bne.n	800fee2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	637b      	str	r3, [r7, #52]	@ 0x34
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fef0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 80a7 	beq.w	8010048 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	895b      	ldrh	r3, [r3, #10]
 800fefe:	025b      	lsls	r3, r3, #9
 800ff00:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ff02:	6a3b      	ldr	r3, [r7, #32]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01b      	beq.n	800ff40 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	1e5a      	subs	r2, r3, #1
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	1e59      	subs	r1, r3, #1
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d30f      	bcc.n	800ff40 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	1e5a      	subs	r2, r3, #1
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	425b      	negs	r3, r3
 800ff28:	401a      	ands	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	69db      	ldr	r3, [r3, #28]
 800ff3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ff3e:	e022      	b.n	800ff86 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ff46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d119      	bne.n	800ff80 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2100      	movs	r1, #0
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fe f869 	bl	800e028 <create_chain>
 800ff56:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ff58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d104      	bne.n	800ff68 <f_lseek+0x28a>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2202      	movs	r2, #2
 800ff62:	755a      	strb	r2, [r3, #21]
 800ff64:	2302      	movs	r3, #2
 800ff66:	e0bf      	b.n	80100e8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6e:	d104      	bne.n	800ff7a <f_lseek+0x29c>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	755a      	strb	r2, [r3, #21]
 800ff76:	2301      	movs	r3, #1
 800ff78:	e0b6      	b.n	80100e8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff7e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff84:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ff86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d05d      	beq.n	8010048 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ff8c:	e03a      	b.n	8010004 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	603b      	str	r3, [r7, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	699a      	ldr	r2, [r3, #24]
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	441a      	add	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	7d1b      	ldrb	r3, [r3, #20]
 800ffa6:	f003 0302 	and.w	r3, r3, #2
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00b      	beq.n	800ffc6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe f838 	bl	800e028 <create_chain>
 800ffb8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ffba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d108      	bne.n	800ffd2 <f_lseek+0x2f4>
							ofs = 0; break;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	603b      	str	r3, [r7, #0]
 800ffc4:	e022      	b.n	801000c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fe36 	bl	800dc3c <get_fat>
 800ffd0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd8:	d104      	bne.n	800ffe4 <f_lseek+0x306>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	755a      	strb	r2, [r3, #21]
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e081      	b.n	80100e8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d904      	bls.n	800fff4 <f_lseek+0x316>
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d304      	bcc.n	800fffe <f_lseek+0x320>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2202      	movs	r2, #2
 800fff8:	755a      	strb	r2, [r3, #21]
 800fffa:	2302      	movs	r3, #2
 800fffc:	e074      	b.n	80100e8 <f_lseek+0x40a>
					fp->clust = clst;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010002:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	429a      	cmp	r2, r3
 801000a:	d8c0      	bhi.n	800ff8e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	699a      	ldr	r2, [r3, #24]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	441a      	add	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801001e:	2b00      	cmp	r3, #0
 8010020:	d012      	beq.n	8010048 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fde9 	bl	800dbfe <clust2sect>
 801002c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801002e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010030:	2b00      	cmp	r3, #0
 8010032:	d104      	bne.n	801003e <f_lseek+0x360>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2202      	movs	r2, #2
 8010038:	755a      	strb	r2, [r3, #21]
 801003a:	2302      	movs	r3, #2
 801003c:	e054      	b.n	80100e8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	0a5b      	lsrs	r3, r3, #9
 8010042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010044:	4413      	add	r3, r2
 8010046:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	699a      	ldr	r2, [r3, #24]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	429a      	cmp	r2, r3
 8010052:	d90a      	bls.n	801006a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	699a      	ldr	r2, [r3, #24]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	7d1b      	ldrb	r3, [r3, #20]
 8010060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010064:	b2da      	uxtb	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010072:	2b00      	cmp	r3, #0
 8010074:	d036      	beq.n	80100e4 <f_lseek+0x406>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801007c:	429a      	cmp	r2, r3
 801007e:	d031      	beq.n	80100e4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	7d1b      	ldrb	r3, [r3, #20]
 8010084:	b25b      	sxtb	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	da18      	bge.n	80100bc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	7858      	ldrb	r0, [r3, #1]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a1a      	ldr	r2, [r3, #32]
 8010098:	2301      	movs	r3, #1
 801009a:	f7fd faed 	bl	800d678 <disk_write>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d004      	beq.n	80100ae <f_lseek+0x3d0>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2201      	movs	r2, #1
 80100a8:	755a      	strb	r2, [r3, #21]
 80100aa:	2301      	movs	r3, #1
 80100ac:	e01c      	b.n	80100e8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	7d1b      	ldrb	r3, [r3, #20]
 80100b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100b6:	b2da      	uxtb	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	7858      	ldrb	r0, [r3, #1]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80100c6:	2301      	movs	r3, #1
 80100c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100ca:	f7fd fab5 	bl	800d638 <disk_read>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d004      	beq.n	80100de <f_lseek+0x400>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	755a      	strb	r2, [r3, #21]
 80100da:	2301      	movs	r3, #1
 80100dc:	e004      	b.n	80100e8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80100e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3740      	adds	r7, #64	@ 0x40
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b087      	sub	sp, #28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	4613      	mov	r3, r2
 80100fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80100fe:	2301      	movs	r3, #1
 8010100:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010106:	4b1f      	ldr	r3, [pc, #124]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010108:	7a5b      	ldrb	r3, [r3, #9]
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b00      	cmp	r3, #0
 801010e:	d131      	bne.n	8010174 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010110:	4b1c      	ldr	r3, [pc, #112]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010112:	7a5b      	ldrb	r3, [r3, #9]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	461a      	mov	r2, r3
 8010118:	4b1a      	ldr	r3, [pc, #104]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 801011a:	2100      	movs	r1, #0
 801011c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801011e:	4b19      	ldr	r3, [pc, #100]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010120:	7a5b      	ldrb	r3, [r3, #9]
 8010122:	b2db      	uxtb	r3, r3
 8010124:	4a17      	ldr	r2, [pc, #92]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	4413      	add	r3, r2
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801012e:	4b15      	ldr	r3, [pc, #84]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010130:	7a5b      	ldrb	r3, [r3, #9]
 8010132:	b2db      	uxtb	r3, r3
 8010134:	461a      	mov	r2, r3
 8010136:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010138:	4413      	add	r3, r2
 801013a:	79fa      	ldrb	r2, [r7, #7]
 801013c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801013e:	4b11      	ldr	r3, [pc, #68]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 8010140:	7a5b      	ldrb	r3, [r3, #9]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	b2d1      	uxtb	r1, r2
 8010148:	4a0e      	ldr	r2, [pc, #56]	@ (8010184 <FATFS_LinkDriverEx+0x94>)
 801014a:	7251      	strb	r1, [r2, #9]
 801014c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801014e:	7dbb      	ldrb	r3, [r7, #22]
 8010150:	3330      	adds	r3, #48	@ 0x30
 8010152:	b2da      	uxtb	r2, r3
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	3301      	adds	r3, #1
 801015c:	223a      	movs	r2, #58	@ 0x3a
 801015e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	3302      	adds	r3, #2
 8010164:	222f      	movs	r2, #47	@ 0x2f
 8010166:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	3303      	adds	r3, #3
 801016c:	2200      	movs	r2, #0
 801016e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010174:	7dfb      	ldrb	r3, [r7, #23]
}
 8010176:	4618      	mov	r0, r3
 8010178:	371c      	adds	r7, #28
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	24075cac 	.word	0x24075cac

08010188 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010192:	2200      	movs	r2, #0
 8010194:	6839      	ldr	r1, [r7, #0]
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7ff ffaa 	bl	80100f0 <FATFS_LinkDriverEx>
 801019c:	4603      	mov	r3, r0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
	...

080101a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	6039      	str	r1, [r7, #0]
 80101b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80101b4:	88fb      	ldrh	r3, [r7, #6]
 80101b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80101b8:	d802      	bhi.n	80101c0 <ff_convert+0x18>
		c = chr;
 80101ba:	88fb      	ldrh	r3, [r7, #6]
 80101bc:	81fb      	strh	r3, [r7, #14]
 80101be:	e025      	b.n	801020c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00b      	beq.n	80101de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80101c6:	88fb      	ldrh	r3, [r7, #6]
 80101c8:	2bff      	cmp	r3, #255	@ 0xff
 80101ca:	d805      	bhi.n	80101d8 <ff_convert+0x30>
 80101cc:	88fb      	ldrh	r3, [r7, #6]
 80101ce:	3b80      	subs	r3, #128	@ 0x80
 80101d0:	4a12      	ldr	r2, [pc, #72]	@ (801021c <ff_convert+0x74>)
 80101d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101d6:	e000      	b.n	80101da <ff_convert+0x32>
 80101d8:	2300      	movs	r3, #0
 80101da:	81fb      	strh	r3, [r7, #14]
 80101dc:	e016      	b.n	801020c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80101de:	2300      	movs	r3, #0
 80101e0:	81fb      	strh	r3, [r7, #14]
 80101e2:	e009      	b.n	80101f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80101e4:	89fb      	ldrh	r3, [r7, #14]
 80101e6:	4a0d      	ldr	r2, [pc, #52]	@ (801021c <ff_convert+0x74>)
 80101e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ec:	88fa      	ldrh	r2, [r7, #6]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d006      	beq.n	8010200 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80101f2:	89fb      	ldrh	r3, [r7, #14]
 80101f4:	3301      	adds	r3, #1
 80101f6:	81fb      	strh	r3, [r7, #14]
 80101f8:	89fb      	ldrh	r3, [r7, #14]
 80101fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80101fc:	d9f2      	bls.n	80101e4 <ff_convert+0x3c>
 80101fe:	e000      	b.n	8010202 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010200:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010202:	89fb      	ldrh	r3, [r7, #14]
 8010204:	3380      	adds	r3, #128	@ 0x80
 8010206:	b29b      	uxth	r3, r3
 8010208:	b2db      	uxtb	r3, r3
 801020a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801020c:	89fb      	ldrh	r3, [r7, #14]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	08011440 	.word	0x08011440

08010220 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801022a:	88fb      	ldrh	r3, [r7, #6]
 801022c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010230:	d201      	bcs.n	8010236 <ff_wtoupper+0x16>
 8010232:	4b3e      	ldr	r3, [pc, #248]	@ (801032c <ff_wtoupper+0x10c>)
 8010234:	e000      	b.n	8010238 <ff_wtoupper+0x18>
 8010236:	4b3e      	ldr	r3, [pc, #248]	@ (8010330 <ff_wtoupper+0x110>)
 8010238:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	1c9a      	adds	r2, r3, #2
 801023e:	617a      	str	r2, [r7, #20]
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010244:	8a7b      	ldrh	r3, [r7, #18]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d068      	beq.n	801031c <ff_wtoupper+0xfc>
 801024a:	88fa      	ldrh	r2, [r7, #6]
 801024c:	8a7b      	ldrh	r3, [r7, #18]
 801024e:	429a      	cmp	r2, r3
 8010250:	d364      	bcc.n	801031c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	1c9a      	adds	r2, r3, #2
 8010256:	617a      	str	r2, [r7, #20]
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	823b      	strh	r3, [r7, #16]
 801025c:	8a3b      	ldrh	r3, [r7, #16]
 801025e:	0a1b      	lsrs	r3, r3, #8
 8010260:	81fb      	strh	r3, [r7, #14]
 8010262:	8a3b      	ldrh	r3, [r7, #16]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010268:	88fa      	ldrh	r2, [r7, #6]
 801026a:	8a79      	ldrh	r1, [r7, #18]
 801026c:	8a3b      	ldrh	r3, [r7, #16]
 801026e:	440b      	add	r3, r1
 8010270:	429a      	cmp	r2, r3
 8010272:	da49      	bge.n	8010308 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010274:	89fb      	ldrh	r3, [r7, #14]
 8010276:	2b08      	cmp	r3, #8
 8010278:	d84f      	bhi.n	801031a <ff_wtoupper+0xfa>
 801027a:	a201      	add	r2, pc, #4	@ (adr r2, 8010280 <ff_wtoupper+0x60>)
 801027c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010280:	080102a5 	.word	0x080102a5
 8010284:	080102b7 	.word	0x080102b7
 8010288:	080102cd 	.word	0x080102cd
 801028c:	080102d5 	.word	0x080102d5
 8010290:	080102dd 	.word	0x080102dd
 8010294:	080102e5 	.word	0x080102e5
 8010298:	080102ed 	.word	0x080102ed
 801029c:	080102f5 	.word	0x080102f5
 80102a0:	080102fd 	.word	0x080102fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80102a4:	88fa      	ldrh	r2, [r7, #6]
 80102a6:	8a7b      	ldrh	r3, [r7, #18]
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	697a      	ldr	r2, [r7, #20]
 80102ae:	4413      	add	r3, r2
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	80fb      	strh	r3, [r7, #6]
 80102b4:	e027      	b.n	8010306 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80102b6:	88fa      	ldrh	r2, [r7, #6]
 80102b8:	8a7b      	ldrh	r3, [r7, #18]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	b29b      	uxth	r3, r3
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	88fa      	ldrh	r2, [r7, #6]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	80fb      	strh	r3, [r7, #6]
 80102ca:	e01c      	b.n	8010306 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80102cc:	88fb      	ldrh	r3, [r7, #6]
 80102ce:	3b10      	subs	r3, #16
 80102d0:	80fb      	strh	r3, [r7, #6]
 80102d2:	e018      	b.n	8010306 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80102d4:	88fb      	ldrh	r3, [r7, #6]
 80102d6:	3b20      	subs	r3, #32
 80102d8:	80fb      	strh	r3, [r7, #6]
 80102da:	e014      	b.n	8010306 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80102dc:	88fb      	ldrh	r3, [r7, #6]
 80102de:	3b30      	subs	r3, #48	@ 0x30
 80102e0:	80fb      	strh	r3, [r7, #6]
 80102e2:	e010      	b.n	8010306 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80102e4:	88fb      	ldrh	r3, [r7, #6]
 80102e6:	3b1a      	subs	r3, #26
 80102e8:	80fb      	strh	r3, [r7, #6]
 80102ea:	e00c      	b.n	8010306 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80102ec:	88fb      	ldrh	r3, [r7, #6]
 80102ee:	3308      	adds	r3, #8
 80102f0:	80fb      	strh	r3, [r7, #6]
 80102f2:	e008      	b.n	8010306 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80102f4:	88fb      	ldrh	r3, [r7, #6]
 80102f6:	3b50      	subs	r3, #80	@ 0x50
 80102f8:	80fb      	strh	r3, [r7, #6]
 80102fa:	e004      	b.n	8010306 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80102fc:	88fb      	ldrh	r3, [r7, #6]
 80102fe:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010302:	80fb      	strh	r3, [r7, #6]
 8010304:	bf00      	nop
			}
			break;
 8010306:	e008      	b.n	801031a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010308:	89fb      	ldrh	r3, [r7, #14]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d195      	bne.n	801023a <ff_wtoupper+0x1a>
 801030e:	8a3b      	ldrh	r3, [r7, #16]
 8010310:	005b      	lsls	r3, r3, #1
 8010312:	697a      	ldr	r2, [r7, #20]
 8010314:	4413      	add	r3, r2
 8010316:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010318:	e78f      	b.n	801023a <ff_wtoupper+0x1a>
			break;
 801031a:	bf00      	nop
	}

	return chr;
 801031c:	88fb      	ldrh	r3, [r7, #6]
}
 801031e:	4618      	mov	r0, r3
 8010320:	371c      	adds	r7, #28
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	08011540 	.word	0x08011540
 8010330:	08011734 	.word	0x08011734

08010334 <std>:
 8010334:	2300      	movs	r3, #0
 8010336:	b510      	push	{r4, lr}
 8010338:	4604      	mov	r4, r0
 801033a:	e9c0 3300 	strd	r3, r3, [r0]
 801033e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010342:	6083      	str	r3, [r0, #8]
 8010344:	8181      	strh	r1, [r0, #12]
 8010346:	6643      	str	r3, [r0, #100]	@ 0x64
 8010348:	81c2      	strh	r2, [r0, #14]
 801034a:	6183      	str	r3, [r0, #24]
 801034c:	4619      	mov	r1, r3
 801034e:	2208      	movs	r2, #8
 8010350:	305c      	adds	r0, #92	@ 0x5c
 8010352:	f000 f9f9 	bl	8010748 <memset>
 8010356:	4b0d      	ldr	r3, [pc, #52]	@ (801038c <std+0x58>)
 8010358:	6263      	str	r3, [r4, #36]	@ 0x24
 801035a:	4b0d      	ldr	r3, [pc, #52]	@ (8010390 <std+0x5c>)
 801035c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801035e:	4b0d      	ldr	r3, [pc, #52]	@ (8010394 <std+0x60>)
 8010360:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010362:	4b0d      	ldr	r3, [pc, #52]	@ (8010398 <std+0x64>)
 8010364:	6323      	str	r3, [r4, #48]	@ 0x30
 8010366:	4b0d      	ldr	r3, [pc, #52]	@ (801039c <std+0x68>)
 8010368:	6224      	str	r4, [r4, #32]
 801036a:	429c      	cmp	r4, r3
 801036c:	d006      	beq.n	801037c <std+0x48>
 801036e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010372:	4294      	cmp	r4, r2
 8010374:	d002      	beq.n	801037c <std+0x48>
 8010376:	33d0      	adds	r3, #208	@ 0xd0
 8010378:	429c      	cmp	r4, r3
 801037a:	d105      	bne.n	8010388 <std+0x54>
 801037c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010384:	f000 ba58 	b.w	8010838 <__retarget_lock_init_recursive>
 8010388:	bd10      	pop	{r4, pc}
 801038a:	bf00      	nop
 801038c:	08010599 	.word	0x08010599
 8010390:	080105bb 	.word	0x080105bb
 8010394:	080105f3 	.word	0x080105f3
 8010398:	08010617 	.word	0x08010617
 801039c:	24075cb8 	.word	0x24075cb8

080103a0 <stdio_exit_handler>:
 80103a0:	4a02      	ldr	r2, [pc, #8]	@ (80103ac <stdio_exit_handler+0xc>)
 80103a2:	4903      	ldr	r1, [pc, #12]	@ (80103b0 <stdio_exit_handler+0x10>)
 80103a4:	4803      	ldr	r0, [pc, #12]	@ (80103b4 <stdio_exit_handler+0x14>)
 80103a6:	f000 b869 	b.w	801047c <_fwalk_sglue>
 80103aa:	bf00      	nop
 80103ac:	24000010 	.word	0x24000010
 80103b0:	080110d5 	.word	0x080110d5
 80103b4:	24000020 	.word	0x24000020

080103b8 <cleanup_stdio>:
 80103b8:	6841      	ldr	r1, [r0, #4]
 80103ba:	4b0c      	ldr	r3, [pc, #48]	@ (80103ec <cleanup_stdio+0x34>)
 80103bc:	4299      	cmp	r1, r3
 80103be:	b510      	push	{r4, lr}
 80103c0:	4604      	mov	r4, r0
 80103c2:	d001      	beq.n	80103c8 <cleanup_stdio+0x10>
 80103c4:	f000 fe86 	bl	80110d4 <_fflush_r>
 80103c8:	68a1      	ldr	r1, [r4, #8]
 80103ca:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <cleanup_stdio+0x38>)
 80103cc:	4299      	cmp	r1, r3
 80103ce:	d002      	beq.n	80103d6 <cleanup_stdio+0x1e>
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 fe7f 	bl	80110d4 <_fflush_r>
 80103d6:	68e1      	ldr	r1, [r4, #12]
 80103d8:	4b06      	ldr	r3, [pc, #24]	@ (80103f4 <cleanup_stdio+0x3c>)
 80103da:	4299      	cmp	r1, r3
 80103dc:	d004      	beq.n	80103e8 <cleanup_stdio+0x30>
 80103de:	4620      	mov	r0, r4
 80103e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e4:	f000 be76 	b.w	80110d4 <_fflush_r>
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	bf00      	nop
 80103ec:	24075cb8 	.word	0x24075cb8
 80103f0:	24075d20 	.word	0x24075d20
 80103f4:	24075d88 	.word	0x24075d88

080103f8 <global_stdio_init.part.0>:
 80103f8:	b510      	push	{r4, lr}
 80103fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010428 <global_stdio_init.part.0+0x30>)
 80103fc:	4c0b      	ldr	r4, [pc, #44]	@ (801042c <global_stdio_init.part.0+0x34>)
 80103fe:	4a0c      	ldr	r2, [pc, #48]	@ (8010430 <global_stdio_init.part.0+0x38>)
 8010400:	601a      	str	r2, [r3, #0]
 8010402:	4620      	mov	r0, r4
 8010404:	2200      	movs	r2, #0
 8010406:	2104      	movs	r1, #4
 8010408:	f7ff ff94 	bl	8010334 <std>
 801040c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010410:	2201      	movs	r2, #1
 8010412:	2109      	movs	r1, #9
 8010414:	f7ff ff8e 	bl	8010334 <std>
 8010418:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801041c:	2202      	movs	r2, #2
 801041e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010422:	2112      	movs	r1, #18
 8010424:	f7ff bf86 	b.w	8010334 <std>
 8010428:	24075df0 	.word	0x24075df0
 801042c:	24075cb8 	.word	0x24075cb8
 8010430:	080103a1 	.word	0x080103a1

08010434 <__sfp_lock_acquire>:
 8010434:	4801      	ldr	r0, [pc, #4]	@ (801043c <__sfp_lock_acquire+0x8>)
 8010436:	f000 ba00 	b.w	801083a <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	24075df9 	.word	0x24075df9

08010440 <__sfp_lock_release>:
 8010440:	4801      	ldr	r0, [pc, #4]	@ (8010448 <__sfp_lock_release+0x8>)
 8010442:	f000 b9fb 	b.w	801083c <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	24075df9 	.word	0x24075df9

0801044c <__sinit>:
 801044c:	b510      	push	{r4, lr}
 801044e:	4604      	mov	r4, r0
 8010450:	f7ff fff0 	bl	8010434 <__sfp_lock_acquire>
 8010454:	6a23      	ldr	r3, [r4, #32]
 8010456:	b11b      	cbz	r3, 8010460 <__sinit+0x14>
 8010458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801045c:	f7ff bff0 	b.w	8010440 <__sfp_lock_release>
 8010460:	4b04      	ldr	r3, [pc, #16]	@ (8010474 <__sinit+0x28>)
 8010462:	6223      	str	r3, [r4, #32]
 8010464:	4b04      	ldr	r3, [pc, #16]	@ (8010478 <__sinit+0x2c>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1f5      	bne.n	8010458 <__sinit+0xc>
 801046c:	f7ff ffc4 	bl	80103f8 <global_stdio_init.part.0>
 8010470:	e7f2      	b.n	8010458 <__sinit+0xc>
 8010472:	bf00      	nop
 8010474:	080103b9 	.word	0x080103b9
 8010478:	24075df0 	.word	0x24075df0

0801047c <_fwalk_sglue>:
 801047c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010480:	4607      	mov	r7, r0
 8010482:	4688      	mov	r8, r1
 8010484:	4614      	mov	r4, r2
 8010486:	2600      	movs	r6, #0
 8010488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801048c:	f1b9 0901 	subs.w	r9, r9, #1
 8010490:	d505      	bpl.n	801049e <_fwalk_sglue+0x22>
 8010492:	6824      	ldr	r4, [r4, #0]
 8010494:	2c00      	cmp	r4, #0
 8010496:	d1f7      	bne.n	8010488 <_fwalk_sglue+0xc>
 8010498:	4630      	mov	r0, r6
 801049a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049e:	89ab      	ldrh	r3, [r5, #12]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d907      	bls.n	80104b4 <_fwalk_sglue+0x38>
 80104a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104a8:	3301      	adds	r3, #1
 80104aa:	d003      	beq.n	80104b4 <_fwalk_sglue+0x38>
 80104ac:	4629      	mov	r1, r5
 80104ae:	4638      	mov	r0, r7
 80104b0:	47c0      	blx	r8
 80104b2:	4306      	orrs	r6, r0
 80104b4:	3568      	adds	r5, #104	@ 0x68
 80104b6:	e7e9      	b.n	801048c <_fwalk_sglue+0x10>

080104b8 <iprintf>:
 80104b8:	b40f      	push	{r0, r1, r2, r3}
 80104ba:	b507      	push	{r0, r1, r2, lr}
 80104bc:	4906      	ldr	r1, [pc, #24]	@ (80104d8 <iprintf+0x20>)
 80104be:	ab04      	add	r3, sp, #16
 80104c0:	6808      	ldr	r0, [r1, #0]
 80104c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c6:	6881      	ldr	r1, [r0, #8]
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	f000 fadb 	bl	8010a84 <_vfiprintf_r>
 80104ce:	b003      	add	sp, #12
 80104d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104d4:	b004      	add	sp, #16
 80104d6:	4770      	bx	lr
 80104d8:	2400001c 	.word	0x2400001c

080104dc <_puts_r>:
 80104dc:	6a03      	ldr	r3, [r0, #32]
 80104de:	b570      	push	{r4, r5, r6, lr}
 80104e0:	6884      	ldr	r4, [r0, #8]
 80104e2:	4605      	mov	r5, r0
 80104e4:	460e      	mov	r6, r1
 80104e6:	b90b      	cbnz	r3, 80104ec <_puts_r+0x10>
 80104e8:	f7ff ffb0 	bl	801044c <__sinit>
 80104ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104ee:	07db      	lsls	r3, r3, #31
 80104f0:	d405      	bmi.n	80104fe <_puts_r+0x22>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	0598      	lsls	r0, r3, #22
 80104f6:	d402      	bmi.n	80104fe <_puts_r+0x22>
 80104f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104fa:	f000 f99e 	bl	801083a <__retarget_lock_acquire_recursive>
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	0719      	lsls	r1, r3, #28
 8010502:	d502      	bpl.n	801050a <_puts_r+0x2e>
 8010504:	6923      	ldr	r3, [r4, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d135      	bne.n	8010576 <_puts_r+0x9a>
 801050a:	4621      	mov	r1, r4
 801050c:	4628      	mov	r0, r5
 801050e:	f000 f8c5 	bl	801069c <__swsetup_r>
 8010512:	b380      	cbz	r0, 8010576 <_puts_r+0x9a>
 8010514:	f04f 35ff 	mov.w	r5, #4294967295
 8010518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801051a:	07da      	lsls	r2, r3, #31
 801051c:	d405      	bmi.n	801052a <_puts_r+0x4e>
 801051e:	89a3      	ldrh	r3, [r4, #12]
 8010520:	059b      	lsls	r3, r3, #22
 8010522:	d402      	bmi.n	801052a <_puts_r+0x4e>
 8010524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010526:	f000 f989 	bl	801083c <__retarget_lock_release_recursive>
 801052a:	4628      	mov	r0, r5
 801052c:	bd70      	pop	{r4, r5, r6, pc}
 801052e:	2b00      	cmp	r3, #0
 8010530:	da04      	bge.n	801053c <_puts_r+0x60>
 8010532:	69a2      	ldr	r2, [r4, #24]
 8010534:	429a      	cmp	r2, r3
 8010536:	dc17      	bgt.n	8010568 <_puts_r+0x8c>
 8010538:	290a      	cmp	r1, #10
 801053a:	d015      	beq.n	8010568 <_puts_r+0x8c>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	1c5a      	adds	r2, r3, #1
 8010540:	6022      	str	r2, [r4, #0]
 8010542:	7019      	strb	r1, [r3, #0]
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801054a:	3b01      	subs	r3, #1
 801054c:	60a3      	str	r3, [r4, #8]
 801054e:	2900      	cmp	r1, #0
 8010550:	d1ed      	bne.n	801052e <_puts_r+0x52>
 8010552:	2b00      	cmp	r3, #0
 8010554:	da11      	bge.n	801057a <_puts_r+0x9e>
 8010556:	4622      	mov	r2, r4
 8010558:	210a      	movs	r1, #10
 801055a:	4628      	mov	r0, r5
 801055c:	f000 f85f 	bl	801061e <__swbuf_r>
 8010560:	3001      	adds	r0, #1
 8010562:	d0d7      	beq.n	8010514 <_puts_r+0x38>
 8010564:	250a      	movs	r5, #10
 8010566:	e7d7      	b.n	8010518 <_puts_r+0x3c>
 8010568:	4622      	mov	r2, r4
 801056a:	4628      	mov	r0, r5
 801056c:	f000 f857 	bl	801061e <__swbuf_r>
 8010570:	3001      	adds	r0, #1
 8010572:	d1e7      	bne.n	8010544 <_puts_r+0x68>
 8010574:	e7ce      	b.n	8010514 <_puts_r+0x38>
 8010576:	3e01      	subs	r6, #1
 8010578:	e7e4      	b.n	8010544 <_puts_r+0x68>
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	1c5a      	adds	r2, r3, #1
 801057e:	6022      	str	r2, [r4, #0]
 8010580:	220a      	movs	r2, #10
 8010582:	701a      	strb	r2, [r3, #0]
 8010584:	e7ee      	b.n	8010564 <_puts_r+0x88>
	...

08010588 <puts>:
 8010588:	4b02      	ldr	r3, [pc, #8]	@ (8010594 <puts+0xc>)
 801058a:	4601      	mov	r1, r0
 801058c:	6818      	ldr	r0, [r3, #0]
 801058e:	f7ff bfa5 	b.w	80104dc <_puts_r>
 8010592:	bf00      	nop
 8010594:	2400001c 	.word	0x2400001c

08010598 <__sread>:
 8010598:	b510      	push	{r4, lr}
 801059a:	460c      	mov	r4, r1
 801059c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a0:	f000 f8fc 	bl	801079c <_read_r>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	bfab      	itete	ge
 80105a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80105aa:	89a3      	ldrhlt	r3, [r4, #12]
 80105ac:	181b      	addge	r3, r3, r0
 80105ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80105b2:	bfac      	ite	ge
 80105b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80105b6:	81a3      	strhlt	r3, [r4, #12]
 80105b8:	bd10      	pop	{r4, pc}

080105ba <__swrite>:
 80105ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105be:	461f      	mov	r7, r3
 80105c0:	898b      	ldrh	r3, [r1, #12]
 80105c2:	05db      	lsls	r3, r3, #23
 80105c4:	4605      	mov	r5, r0
 80105c6:	460c      	mov	r4, r1
 80105c8:	4616      	mov	r6, r2
 80105ca:	d505      	bpl.n	80105d8 <__swrite+0x1e>
 80105cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d0:	2302      	movs	r3, #2
 80105d2:	2200      	movs	r2, #0
 80105d4:	f000 f8d0 	bl	8010778 <_lseek_r>
 80105d8:	89a3      	ldrh	r3, [r4, #12]
 80105da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80105e2:	81a3      	strh	r3, [r4, #12]
 80105e4:	4632      	mov	r2, r6
 80105e6:	463b      	mov	r3, r7
 80105e8:	4628      	mov	r0, r5
 80105ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105ee:	f000 b8e7 	b.w	80107c0 <_write_r>

080105f2 <__sseek>:
 80105f2:	b510      	push	{r4, lr}
 80105f4:	460c      	mov	r4, r1
 80105f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105fa:	f000 f8bd 	bl	8010778 <_lseek_r>
 80105fe:	1c43      	adds	r3, r0, #1
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	bf15      	itete	ne
 8010604:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801060a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801060e:	81a3      	strheq	r3, [r4, #12]
 8010610:	bf18      	it	ne
 8010612:	81a3      	strhne	r3, [r4, #12]
 8010614:	bd10      	pop	{r4, pc}

08010616 <__sclose>:
 8010616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801061a:	f000 b89d 	b.w	8010758 <_close_r>

0801061e <__swbuf_r>:
 801061e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010620:	460e      	mov	r6, r1
 8010622:	4614      	mov	r4, r2
 8010624:	4605      	mov	r5, r0
 8010626:	b118      	cbz	r0, 8010630 <__swbuf_r+0x12>
 8010628:	6a03      	ldr	r3, [r0, #32]
 801062a:	b90b      	cbnz	r3, 8010630 <__swbuf_r+0x12>
 801062c:	f7ff ff0e 	bl	801044c <__sinit>
 8010630:	69a3      	ldr	r3, [r4, #24]
 8010632:	60a3      	str	r3, [r4, #8]
 8010634:	89a3      	ldrh	r3, [r4, #12]
 8010636:	071a      	lsls	r2, r3, #28
 8010638:	d501      	bpl.n	801063e <__swbuf_r+0x20>
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	b943      	cbnz	r3, 8010650 <__swbuf_r+0x32>
 801063e:	4621      	mov	r1, r4
 8010640:	4628      	mov	r0, r5
 8010642:	f000 f82b 	bl	801069c <__swsetup_r>
 8010646:	b118      	cbz	r0, 8010650 <__swbuf_r+0x32>
 8010648:	f04f 37ff 	mov.w	r7, #4294967295
 801064c:	4638      	mov	r0, r7
 801064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	6922      	ldr	r2, [r4, #16]
 8010654:	1a98      	subs	r0, r3, r2
 8010656:	6963      	ldr	r3, [r4, #20]
 8010658:	b2f6      	uxtb	r6, r6
 801065a:	4283      	cmp	r3, r0
 801065c:	4637      	mov	r7, r6
 801065e:	dc05      	bgt.n	801066c <__swbuf_r+0x4e>
 8010660:	4621      	mov	r1, r4
 8010662:	4628      	mov	r0, r5
 8010664:	f000 fd36 	bl	80110d4 <_fflush_r>
 8010668:	2800      	cmp	r0, #0
 801066a:	d1ed      	bne.n	8010648 <__swbuf_r+0x2a>
 801066c:	68a3      	ldr	r3, [r4, #8]
 801066e:	3b01      	subs	r3, #1
 8010670:	60a3      	str	r3, [r4, #8]
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	6022      	str	r2, [r4, #0]
 8010678:	701e      	strb	r6, [r3, #0]
 801067a:	6962      	ldr	r2, [r4, #20]
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	429a      	cmp	r2, r3
 8010680:	d004      	beq.n	801068c <__swbuf_r+0x6e>
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	07db      	lsls	r3, r3, #31
 8010686:	d5e1      	bpl.n	801064c <__swbuf_r+0x2e>
 8010688:	2e0a      	cmp	r6, #10
 801068a:	d1df      	bne.n	801064c <__swbuf_r+0x2e>
 801068c:	4621      	mov	r1, r4
 801068e:	4628      	mov	r0, r5
 8010690:	f000 fd20 	bl	80110d4 <_fflush_r>
 8010694:	2800      	cmp	r0, #0
 8010696:	d0d9      	beq.n	801064c <__swbuf_r+0x2e>
 8010698:	e7d6      	b.n	8010648 <__swbuf_r+0x2a>
	...

0801069c <__swsetup_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4b29      	ldr	r3, [pc, #164]	@ (8010744 <__swsetup_r+0xa8>)
 80106a0:	4605      	mov	r5, r0
 80106a2:	6818      	ldr	r0, [r3, #0]
 80106a4:	460c      	mov	r4, r1
 80106a6:	b118      	cbz	r0, 80106b0 <__swsetup_r+0x14>
 80106a8:	6a03      	ldr	r3, [r0, #32]
 80106aa:	b90b      	cbnz	r3, 80106b0 <__swsetup_r+0x14>
 80106ac:	f7ff fece 	bl	801044c <__sinit>
 80106b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106b4:	0719      	lsls	r1, r3, #28
 80106b6:	d422      	bmi.n	80106fe <__swsetup_r+0x62>
 80106b8:	06da      	lsls	r2, r3, #27
 80106ba:	d407      	bmi.n	80106cc <__swsetup_r+0x30>
 80106bc:	2209      	movs	r2, #9
 80106be:	602a      	str	r2, [r5, #0]
 80106c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106c4:	81a3      	strh	r3, [r4, #12]
 80106c6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ca:	e033      	b.n	8010734 <__swsetup_r+0x98>
 80106cc:	0758      	lsls	r0, r3, #29
 80106ce:	d512      	bpl.n	80106f6 <__swsetup_r+0x5a>
 80106d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80106d2:	b141      	cbz	r1, 80106e6 <__swsetup_r+0x4a>
 80106d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106d8:	4299      	cmp	r1, r3
 80106da:	d002      	beq.n	80106e2 <__swsetup_r+0x46>
 80106dc:	4628      	mov	r0, r5
 80106de:	f000 f8af 	bl	8010840 <_free_r>
 80106e2:	2300      	movs	r3, #0
 80106e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80106ec:	81a3      	strh	r3, [r4, #12]
 80106ee:	2300      	movs	r3, #0
 80106f0:	6063      	str	r3, [r4, #4]
 80106f2:	6923      	ldr	r3, [r4, #16]
 80106f4:	6023      	str	r3, [r4, #0]
 80106f6:	89a3      	ldrh	r3, [r4, #12]
 80106f8:	f043 0308 	orr.w	r3, r3, #8
 80106fc:	81a3      	strh	r3, [r4, #12]
 80106fe:	6923      	ldr	r3, [r4, #16]
 8010700:	b94b      	cbnz	r3, 8010716 <__swsetup_r+0x7a>
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801070c:	d003      	beq.n	8010716 <__swsetup_r+0x7a>
 801070e:	4621      	mov	r1, r4
 8010710:	4628      	mov	r0, r5
 8010712:	f000 fd2d 	bl	8011170 <__smakebuf_r>
 8010716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071a:	f013 0201 	ands.w	r2, r3, #1
 801071e:	d00a      	beq.n	8010736 <__swsetup_r+0x9a>
 8010720:	2200      	movs	r2, #0
 8010722:	60a2      	str	r2, [r4, #8]
 8010724:	6962      	ldr	r2, [r4, #20]
 8010726:	4252      	negs	r2, r2
 8010728:	61a2      	str	r2, [r4, #24]
 801072a:	6922      	ldr	r2, [r4, #16]
 801072c:	b942      	cbnz	r2, 8010740 <__swsetup_r+0xa4>
 801072e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010732:	d1c5      	bne.n	80106c0 <__swsetup_r+0x24>
 8010734:	bd38      	pop	{r3, r4, r5, pc}
 8010736:	0799      	lsls	r1, r3, #30
 8010738:	bf58      	it	pl
 801073a:	6962      	ldrpl	r2, [r4, #20]
 801073c:	60a2      	str	r2, [r4, #8]
 801073e:	e7f4      	b.n	801072a <__swsetup_r+0x8e>
 8010740:	2000      	movs	r0, #0
 8010742:	e7f7      	b.n	8010734 <__swsetup_r+0x98>
 8010744:	2400001c 	.word	0x2400001c

08010748 <memset>:
 8010748:	4402      	add	r2, r0
 801074a:	4603      	mov	r3, r0
 801074c:	4293      	cmp	r3, r2
 801074e:	d100      	bne.n	8010752 <memset+0xa>
 8010750:	4770      	bx	lr
 8010752:	f803 1b01 	strb.w	r1, [r3], #1
 8010756:	e7f9      	b.n	801074c <memset+0x4>

08010758 <_close_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4d06      	ldr	r5, [pc, #24]	@ (8010774 <_close_r+0x1c>)
 801075c:	2300      	movs	r3, #0
 801075e:	4604      	mov	r4, r0
 8010760:	4608      	mov	r0, r1
 8010762:	602b      	str	r3, [r5, #0]
 8010764:	f7f0 fee7 	bl	8001536 <_close>
 8010768:	1c43      	adds	r3, r0, #1
 801076a:	d102      	bne.n	8010772 <_close_r+0x1a>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	b103      	cbz	r3, 8010772 <_close_r+0x1a>
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	bd38      	pop	{r3, r4, r5, pc}
 8010774:	24075df4 	.word	0x24075df4

08010778 <_lseek_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d07      	ldr	r5, [pc, #28]	@ (8010798 <_lseek_r+0x20>)
 801077c:	4604      	mov	r4, r0
 801077e:	4608      	mov	r0, r1
 8010780:	4611      	mov	r1, r2
 8010782:	2200      	movs	r2, #0
 8010784:	602a      	str	r2, [r5, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	f7f0 fefc 	bl	8001584 <_lseek>
 801078c:	1c43      	adds	r3, r0, #1
 801078e:	d102      	bne.n	8010796 <_lseek_r+0x1e>
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	b103      	cbz	r3, 8010796 <_lseek_r+0x1e>
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	bd38      	pop	{r3, r4, r5, pc}
 8010798:	24075df4 	.word	0x24075df4

0801079c <_read_r>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4d07      	ldr	r5, [pc, #28]	@ (80107bc <_read_r+0x20>)
 80107a0:	4604      	mov	r4, r0
 80107a2:	4608      	mov	r0, r1
 80107a4:	4611      	mov	r1, r2
 80107a6:	2200      	movs	r2, #0
 80107a8:	602a      	str	r2, [r5, #0]
 80107aa:	461a      	mov	r2, r3
 80107ac:	f7f0 fe8a 	bl	80014c4 <_read>
 80107b0:	1c43      	adds	r3, r0, #1
 80107b2:	d102      	bne.n	80107ba <_read_r+0x1e>
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	b103      	cbz	r3, 80107ba <_read_r+0x1e>
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	bd38      	pop	{r3, r4, r5, pc}
 80107bc:	24075df4 	.word	0x24075df4

080107c0 <_write_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4d07      	ldr	r5, [pc, #28]	@ (80107e0 <_write_r+0x20>)
 80107c4:	4604      	mov	r4, r0
 80107c6:	4608      	mov	r0, r1
 80107c8:	4611      	mov	r1, r2
 80107ca:	2200      	movs	r2, #0
 80107cc:	602a      	str	r2, [r5, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	f7f0 fe95 	bl	80014fe <_write>
 80107d4:	1c43      	adds	r3, r0, #1
 80107d6:	d102      	bne.n	80107de <_write_r+0x1e>
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	b103      	cbz	r3, 80107de <_write_r+0x1e>
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	bd38      	pop	{r3, r4, r5, pc}
 80107e0:	24075df4 	.word	0x24075df4

080107e4 <__errno>:
 80107e4:	4b01      	ldr	r3, [pc, #4]	@ (80107ec <__errno+0x8>)
 80107e6:	6818      	ldr	r0, [r3, #0]
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	2400001c 	.word	0x2400001c

080107f0 <__libc_init_array>:
 80107f0:	b570      	push	{r4, r5, r6, lr}
 80107f2:	4d0d      	ldr	r5, [pc, #52]	@ (8010828 <__libc_init_array+0x38>)
 80107f4:	4c0d      	ldr	r4, [pc, #52]	@ (801082c <__libc_init_array+0x3c>)
 80107f6:	1b64      	subs	r4, r4, r5
 80107f8:	10a4      	asrs	r4, r4, #2
 80107fa:	2600      	movs	r6, #0
 80107fc:	42a6      	cmp	r6, r4
 80107fe:	d109      	bne.n	8010814 <__libc_init_array+0x24>
 8010800:	4d0b      	ldr	r5, [pc, #44]	@ (8010830 <__libc_init_array+0x40>)
 8010802:	4c0c      	ldr	r4, [pc, #48]	@ (8010834 <__libc_init_array+0x44>)
 8010804:	f000 fd22 	bl	801124c <_init>
 8010808:	1b64      	subs	r4, r4, r5
 801080a:	10a4      	asrs	r4, r4, #2
 801080c:	2600      	movs	r6, #0
 801080e:	42a6      	cmp	r6, r4
 8010810:	d105      	bne.n	801081e <__libc_init_array+0x2e>
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	f855 3b04 	ldr.w	r3, [r5], #4
 8010818:	4798      	blx	r3
 801081a:	3601      	adds	r6, #1
 801081c:	e7ee      	b.n	80107fc <__libc_init_array+0xc>
 801081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010822:	4798      	blx	r3
 8010824:	3601      	adds	r6, #1
 8010826:	e7f2      	b.n	801080e <__libc_init_array+0x1e>
 8010828:	0801182c 	.word	0x0801182c
 801082c:	0801182c 	.word	0x0801182c
 8010830:	0801182c 	.word	0x0801182c
 8010834:	08011830 	.word	0x08011830

08010838 <__retarget_lock_init_recursive>:
 8010838:	4770      	bx	lr

0801083a <__retarget_lock_acquire_recursive>:
 801083a:	4770      	bx	lr

0801083c <__retarget_lock_release_recursive>:
 801083c:	4770      	bx	lr
	...

08010840 <_free_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4605      	mov	r5, r0
 8010844:	2900      	cmp	r1, #0
 8010846:	d041      	beq.n	80108cc <_free_r+0x8c>
 8010848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801084c:	1f0c      	subs	r4, r1, #4
 801084e:	2b00      	cmp	r3, #0
 8010850:	bfb8      	it	lt
 8010852:	18e4      	addlt	r4, r4, r3
 8010854:	f000 f8e0 	bl	8010a18 <__malloc_lock>
 8010858:	4a1d      	ldr	r2, [pc, #116]	@ (80108d0 <_free_r+0x90>)
 801085a:	6813      	ldr	r3, [r2, #0]
 801085c:	b933      	cbnz	r3, 801086c <_free_r+0x2c>
 801085e:	6063      	str	r3, [r4, #4]
 8010860:	6014      	str	r4, [r2, #0]
 8010862:	4628      	mov	r0, r5
 8010864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010868:	f000 b8dc 	b.w	8010a24 <__malloc_unlock>
 801086c:	42a3      	cmp	r3, r4
 801086e:	d908      	bls.n	8010882 <_free_r+0x42>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	1821      	adds	r1, r4, r0
 8010874:	428b      	cmp	r3, r1
 8010876:	bf01      	itttt	eq
 8010878:	6819      	ldreq	r1, [r3, #0]
 801087a:	685b      	ldreq	r3, [r3, #4]
 801087c:	1809      	addeq	r1, r1, r0
 801087e:	6021      	streq	r1, [r4, #0]
 8010880:	e7ed      	b.n	801085e <_free_r+0x1e>
 8010882:	461a      	mov	r2, r3
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	b10b      	cbz	r3, 801088c <_free_r+0x4c>
 8010888:	42a3      	cmp	r3, r4
 801088a:	d9fa      	bls.n	8010882 <_free_r+0x42>
 801088c:	6811      	ldr	r1, [r2, #0]
 801088e:	1850      	adds	r0, r2, r1
 8010890:	42a0      	cmp	r0, r4
 8010892:	d10b      	bne.n	80108ac <_free_r+0x6c>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	4401      	add	r1, r0
 8010898:	1850      	adds	r0, r2, r1
 801089a:	4283      	cmp	r3, r0
 801089c:	6011      	str	r1, [r2, #0]
 801089e:	d1e0      	bne.n	8010862 <_free_r+0x22>
 80108a0:	6818      	ldr	r0, [r3, #0]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	6053      	str	r3, [r2, #4]
 80108a6:	4408      	add	r0, r1
 80108a8:	6010      	str	r0, [r2, #0]
 80108aa:	e7da      	b.n	8010862 <_free_r+0x22>
 80108ac:	d902      	bls.n	80108b4 <_free_r+0x74>
 80108ae:	230c      	movs	r3, #12
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	e7d6      	b.n	8010862 <_free_r+0x22>
 80108b4:	6820      	ldr	r0, [r4, #0]
 80108b6:	1821      	adds	r1, r4, r0
 80108b8:	428b      	cmp	r3, r1
 80108ba:	bf04      	itt	eq
 80108bc:	6819      	ldreq	r1, [r3, #0]
 80108be:	685b      	ldreq	r3, [r3, #4]
 80108c0:	6063      	str	r3, [r4, #4]
 80108c2:	bf04      	itt	eq
 80108c4:	1809      	addeq	r1, r1, r0
 80108c6:	6021      	streq	r1, [r4, #0]
 80108c8:	6054      	str	r4, [r2, #4]
 80108ca:	e7ca      	b.n	8010862 <_free_r+0x22>
 80108cc:	bd38      	pop	{r3, r4, r5, pc}
 80108ce:	bf00      	nop
 80108d0:	24075e00 	.word	0x24075e00

080108d4 <sbrk_aligned>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	4e0f      	ldr	r6, [pc, #60]	@ (8010914 <sbrk_aligned+0x40>)
 80108d8:	460c      	mov	r4, r1
 80108da:	6831      	ldr	r1, [r6, #0]
 80108dc:	4605      	mov	r5, r0
 80108de:	b911      	cbnz	r1, 80108e6 <sbrk_aligned+0x12>
 80108e0:	f000 fca4 	bl	801122c <_sbrk_r>
 80108e4:	6030      	str	r0, [r6, #0]
 80108e6:	4621      	mov	r1, r4
 80108e8:	4628      	mov	r0, r5
 80108ea:	f000 fc9f 	bl	801122c <_sbrk_r>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	d103      	bne.n	80108fa <sbrk_aligned+0x26>
 80108f2:	f04f 34ff 	mov.w	r4, #4294967295
 80108f6:	4620      	mov	r0, r4
 80108f8:	bd70      	pop	{r4, r5, r6, pc}
 80108fa:	1cc4      	adds	r4, r0, #3
 80108fc:	f024 0403 	bic.w	r4, r4, #3
 8010900:	42a0      	cmp	r0, r4
 8010902:	d0f8      	beq.n	80108f6 <sbrk_aligned+0x22>
 8010904:	1a21      	subs	r1, r4, r0
 8010906:	4628      	mov	r0, r5
 8010908:	f000 fc90 	bl	801122c <_sbrk_r>
 801090c:	3001      	adds	r0, #1
 801090e:	d1f2      	bne.n	80108f6 <sbrk_aligned+0x22>
 8010910:	e7ef      	b.n	80108f2 <sbrk_aligned+0x1e>
 8010912:	bf00      	nop
 8010914:	24075dfc 	.word	0x24075dfc

08010918 <_malloc_r>:
 8010918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801091c:	1ccd      	adds	r5, r1, #3
 801091e:	f025 0503 	bic.w	r5, r5, #3
 8010922:	3508      	adds	r5, #8
 8010924:	2d0c      	cmp	r5, #12
 8010926:	bf38      	it	cc
 8010928:	250c      	movcc	r5, #12
 801092a:	2d00      	cmp	r5, #0
 801092c:	4606      	mov	r6, r0
 801092e:	db01      	blt.n	8010934 <_malloc_r+0x1c>
 8010930:	42a9      	cmp	r1, r5
 8010932:	d904      	bls.n	801093e <_malloc_r+0x26>
 8010934:	230c      	movs	r3, #12
 8010936:	6033      	str	r3, [r6, #0]
 8010938:	2000      	movs	r0, #0
 801093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a14 <_malloc_r+0xfc>
 8010942:	f000 f869 	bl	8010a18 <__malloc_lock>
 8010946:	f8d8 3000 	ldr.w	r3, [r8]
 801094a:	461c      	mov	r4, r3
 801094c:	bb44      	cbnz	r4, 80109a0 <_malloc_r+0x88>
 801094e:	4629      	mov	r1, r5
 8010950:	4630      	mov	r0, r6
 8010952:	f7ff ffbf 	bl	80108d4 <sbrk_aligned>
 8010956:	1c43      	adds	r3, r0, #1
 8010958:	4604      	mov	r4, r0
 801095a:	d158      	bne.n	8010a0e <_malloc_r+0xf6>
 801095c:	f8d8 4000 	ldr.w	r4, [r8]
 8010960:	4627      	mov	r7, r4
 8010962:	2f00      	cmp	r7, #0
 8010964:	d143      	bne.n	80109ee <_malloc_r+0xd6>
 8010966:	2c00      	cmp	r4, #0
 8010968:	d04b      	beq.n	8010a02 <_malloc_r+0xea>
 801096a:	6823      	ldr	r3, [r4, #0]
 801096c:	4639      	mov	r1, r7
 801096e:	4630      	mov	r0, r6
 8010970:	eb04 0903 	add.w	r9, r4, r3
 8010974:	f000 fc5a 	bl	801122c <_sbrk_r>
 8010978:	4581      	cmp	r9, r0
 801097a:	d142      	bne.n	8010a02 <_malloc_r+0xea>
 801097c:	6821      	ldr	r1, [r4, #0]
 801097e:	1a6d      	subs	r5, r5, r1
 8010980:	4629      	mov	r1, r5
 8010982:	4630      	mov	r0, r6
 8010984:	f7ff ffa6 	bl	80108d4 <sbrk_aligned>
 8010988:	3001      	adds	r0, #1
 801098a:	d03a      	beq.n	8010a02 <_malloc_r+0xea>
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	442b      	add	r3, r5
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	f8d8 3000 	ldr.w	r3, [r8]
 8010996:	685a      	ldr	r2, [r3, #4]
 8010998:	bb62      	cbnz	r2, 80109f4 <_malloc_r+0xdc>
 801099a:	f8c8 7000 	str.w	r7, [r8]
 801099e:	e00f      	b.n	80109c0 <_malloc_r+0xa8>
 80109a0:	6822      	ldr	r2, [r4, #0]
 80109a2:	1b52      	subs	r2, r2, r5
 80109a4:	d420      	bmi.n	80109e8 <_malloc_r+0xd0>
 80109a6:	2a0b      	cmp	r2, #11
 80109a8:	d917      	bls.n	80109da <_malloc_r+0xc2>
 80109aa:	1961      	adds	r1, r4, r5
 80109ac:	42a3      	cmp	r3, r4
 80109ae:	6025      	str	r5, [r4, #0]
 80109b0:	bf18      	it	ne
 80109b2:	6059      	strne	r1, [r3, #4]
 80109b4:	6863      	ldr	r3, [r4, #4]
 80109b6:	bf08      	it	eq
 80109b8:	f8c8 1000 	streq.w	r1, [r8]
 80109bc:	5162      	str	r2, [r4, r5]
 80109be:	604b      	str	r3, [r1, #4]
 80109c0:	4630      	mov	r0, r6
 80109c2:	f000 f82f 	bl	8010a24 <__malloc_unlock>
 80109c6:	f104 000b 	add.w	r0, r4, #11
 80109ca:	1d23      	adds	r3, r4, #4
 80109cc:	f020 0007 	bic.w	r0, r0, #7
 80109d0:	1ac2      	subs	r2, r0, r3
 80109d2:	bf1c      	itt	ne
 80109d4:	1a1b      	subne	r3, r3, r0
 80109d6:	50a3      	strne	r3, [r4, r2]
 80109d8:	e7af      	b.n	801093a <_malloc_r+0x22>
 80109da:	6862      	ldr	r2, [r4, #4]
 80109dc:	42a3      	cmp	r3, r4
 80109de:	bf0c      	ite	eq
 80109e0:	f8c8 2000 	streq.w	r2, [r8]
 80109e4:	605a      	strne	r2, [r3, #4]
 80109e6:	e7eb      	b.n	80109c0 <_malloc_r+0xa8>
 80109e8:	4623      	mov	r3, r4
 80109ea:	6864      	ldr	r4, [r4, #4]
 80109ec:	e7ae      	b.n	801094c <_malloc_r+0x34>
 80109ee:	463c      	mov	r4, r7
 80109f0:	687f      	ldr	r7, [r7, #4]
 80109f2:	e7b6      	b.n	8010962 <_malloc_r+0x4a>
 80109f4:	461a      	mov	r2, r3
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	42a3      	cmp	r3, r4
 80109fa:	d1fb      	bne.n	80109f4 <_malloc_r+0xdc>
 80109fc:	2300      	movs	r3, #0
 80109fe:	6053      	str	r3, [r2, #4]
 8010a00:	e7de      	b.n	80109c0 <_malloc_r+0xa8>
 8010a02:	230c      	movs	r3, #12
 8010a04:	6033      	str	r3, [r6, #0]
 8010a06:	4630      	mov	r0, r6
 8010a08:	f000 f80c 	bl	8010a24 <__malloc_unlock>
 8010a0c:	e794      	b.n	8010938 <_malloc_r+0x20>
 8010a0e:	6005      	str	r5, [r0, #0]
 8010a10:	e7d6      	b.n	80109c0 <_malloc_r+0xa8>
 8010a12:	bf00      	nop
 8010a14:	24075e00 	.word	0x24075e00

08010a18 <__malloc_lock>:
 8010a18:	4801      	ldr	r0, [pc, #4]	@ (8010a20 <__malloc_lock+0x8>)
 8010a1a:	f7ff bf0e 	b.w	801083a <__retarget_lock_acquire_recursive>
 8010a1e:	bf00      	nop
 8010a20:	24075df8 	.word	0x24075df8

08010a24 <__malloc_unlock>:
 8010a24:	4801      	ldr	r0, [pc, #4]	@ (8010a2c <__malloc_unlock+0x8>)
 8010a26:	f7ff bf09 	b.w	801083c <__retarget_lock_release_recursive>
 8010a2a:	bf00      	nop
 8010a2c:	24075df8 	.word	0x24075df8

08010a30 <__sfputc_r>:
 8010a30:	6893      	ldr	r3, [r2, #8]
 8010a32:	3b01      	subs	r3, #1
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	b410      	push	{r4}
 8010a38:	6093      	str	r3, [r2, #8]
 8010a3a:	da08      	bge.n	8010a4e <__sfputc_r+0x1e>
 8010a3c:	6994      	ldr	r4, [r2, #24]
 8010a3e:	42a3      	cmp	r3, r4
 8010a40:	db01      	blt.n	8010a46 <__sfputc_r+0x16>
 8010a42:	290a      	cmp	r1, #10
 8010a44:	d103      	bne.n	8010a4e <__sfputc_r+0x1e>
 8010a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a4a:	f7ff bde8 	b.w	801061e <__swbuf_r>
 8010a4e:	6813      	ldr	r3, [r2, #0]
 8010a50:	1c58      	adds	r0, r3, #1
 8010a52:	6010      	str	r0, [r2, #0]
 8010a54:	7019      	strb	r1, [r3, #0]
 8010a56:	4608      	mov	r0, r1
 8010a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <__sfputs_r>:
 8010a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a60:	4606      	mov	r6, r0
 8010a62:	460f      	mov	r7, r1
 8010a64:	4614      	mov	r4, r2
 8010a66:	18d5      	adds	r5, r2, r3
 8010a68:	42ac      	cmp	r4, r5
 8010a6a:	d101      	bne.n	8010a70 <__sfputs_r+0x12>
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	e007      	b.n	8010a80 <__sfputs_r+0x22>
 8010a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a74:	463a      	mov	r2, r7
 8010a76:	4630      	mov	r0, r6
 8010a78:	f7ff ffda 	bl	8010a30 <__sfputc_r>
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	d1f3      	bne.n	8010a68 <__sfputs_r+0xa>
 8010a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a84 <_vfiprintf_r>:
 8010a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a88:	460d      	mov	r5, r1
 8010a8a:	b09d      	sub	sp, #116	@ 0x74
 8010a8c:	4614      	mov	r4, r2
 8010a8e:	4698      	mov	r8, r3
 8010a90:	4606      	mov	r6, r0
 8010a92:	b118      	cbz	r0, 8010a9c <_vfiprintf_r+0x18>
 8010a94:	6a03      	ldr	r3, [r0, #32]
 8010a96:	b90b      	cbnz	r3, 8010a9c <_vfiprintf_r+0x18>
 8010a98:	f7ff fcd8 	bl	801044c <__sinit>
 8010a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a9e:	07d9      	lsls	r1, r3, #31
 8010aa0:	d405      	bmi.n	8010aae <_vfiprintf_r+0x2a>
 8010aa2:	89ab      	ldrh	r3, [r5, #12]
 8010aa4:	059a      	lsls	r2, r3, #22
 8010aa6:	d402      	bmi.n	8010aae <_vfiprintf_r+0x2a>
 8010aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aaa:	f7ff fec6 	bl	801083a <__retarget_lock_acquire_recursive>
 8010aae:	89ab      	ldrh	r3, [r5, #12]
 8010ab0:	071b      	lsls	r3, r3, #28
 8010ab2:	d501      	bpl.n	8010ab8 <_vfiprintf_r+0x34>
 8010ab4:	692b      	ldr	r3, [r5, #16]
 8010ab6:	b99b      	cbnz	r3, 8010ae0 <_vfiprintf_r+0x5c>
 8010ab8:	4629      	mov	r1, r5
 8010aba:	4630      	mov	r0, r6
 8010abc:	f7ff fdee 	bl	801069c <__swsetup_r>
 8010ac0:	b170      	cbz	r0, 8010ae0 <_vfiprintf_r+0x5c>
 8010ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ac4:	07dc      	lsls	r4, r3, #31
 8010ac6:	d504      	bpl.n	8010ad2 <_vfiprintf_r+0x4e>
 8010ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8010acc:	b01d      	add	sp, #116	@ 0x74
 8010ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad2:	89ab      	ldrh	r3, [r5, #12]
 8010ad4:	0598      	lsls	r0, r3, #22
 8010ad6:	d4f7      	bmi.n	8010ac8 <_vfiprintf_r+0x44>
 8010ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ada:	f7ff feaf 	bl	801083c <__retarget_lock_release_recursive>
 8010ade:	e7f3      	b.n	8010ac8 <_vfiprintf_r+0x44>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ae4:	2320      	movs	r3, #32
 8010ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aee:	2330      	movs	r3, #48	@ 0x30
 8010af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ca0 <_vfiprintf_r+0x21c>
 8010af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010af8:	f04f 0901 	mov.w	r9, #1
 8010afc:	4623      	mov	r3, r4
 8010afe:	469a      	mov	sl, r3
 8010b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b04:	b10a      	cbz	r2, 8010b0a <_vfiprintf_r+0x86>
 8010b06:	2a25      	cmp	r2, #37	@ 0x25
 8010b08:	d1f9      	bne.n	8010afe <_vfiprintf_r+0x7a>
 8010b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8010b0e:	d00b      	beq.n	8010b28 <_vfiprintf_r+0xa4>
 8010b10:	465b      	mov	r3, fp
 8010b12:	4622      	mov	r2, r4
 8010b14:	4629      	mov	r1, r5
 8010b16:	4630      	mov	r0, r6
 8010b18:	f7ff ffa1 	bl	8010a5e <__sfputs_r>
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	f000 80a7 	beq.w	8010c70 <_vfiprintf_r+0x1ec>
 8010b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b24:	445a      	add	r2, fp
 8010b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b28:	f89a 3000 	ldrb.w	r3, [sl]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 809f 	beq.w	8010c70 <_vfiprintf_r+0x1ec>
 8010b32:	2300      	movs	r3, #0
 8010b34:	f04f 32ff 	mov.w	r2, #4294967295
 8010b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b3c:	f10a 0a01 	add.w	sl, sl, #1
 8010b40:	9304      	str	r3, [sp, #16]
 8010b42:	9307      	str	r3, [sp, #28]
 8010b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b4a:	4654      	mov	r4, sl
 8010b4c:	2205      	movs	r2, #5
 8010b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b52:	4853      	ldr	r0, [pc, #332]	@ (8010ca0 <_vfiprintf_r+0x21c>)
 8010b54:	f7ef fbc4 	bl	80002e0 <memchr>
 8010b58:	9a04      	ldr	r2, [sp, #16]
 8010b5a:	b9d8      	cbnz	r0, 8010b94 <_vfiprintf_r+0x110>
 8010b5c:	06d1      	lsls	r1, r2, #27
 8010b5e:	bf44      	itt	mi
 8010b60:	2320      	movmi	r3, #32
 8010b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b66:	0713      	lsls	r3, r2, #28
 8010b68:	bf44      	itt	mi
 8010b6a:	232b      	movmi	r3, #43	@ 0x2b
 8010b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b70:	f89a 3000 	ldrb.w	r3, [sl]
 8010b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b76:	d015      	beq.n	8010ba4 <_vfiprintf_r+0x120>
 8010b78:	9a07      	ldr	r2, [sp, #28]
 8010b7a:	4654      	mov	r4, sl
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	f04f 0c0a 	mov.w	ip, #10
 8010b82:	4621      	mov	r1, r4
 8010b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b88:	3b30      	subs	r3, #48	@ 0x30
 8010b8a:	2b09      	cmp	r3, #9
 8010b8c:	d94b      	bls.n	8010c26 <_vfiprintf_r+0x1a2>
 8010b8e:	b1b0      	cbz	r0, 8010bbe <_vfiprintf_r+0x13a>
 8010b90:	9207      	str	r2, [sp, #28]
 8010b92:	e014      	b.n	8010bbe <_vfiprintf_r+0x13a>
 8010b94:	eba0 0308 	sub.w	r3, r0, r8
 8010b98:	fa09 f303 	lsl.w	r3, r9, r3
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	9304      	str	r3, [sp, #16]
 8010ba0:	46a2      	mov	sl, r4
 8010ba2:	e7d2      	b.n	8010b4a <_vfiprintf_r+0xc6>
 8010ba4:	9b03      	ldr	r3, [sp, #12]
 8010ba6:	1d19      	adds	r1, r3, #4
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	9103      	str	r1, [sp, #12]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	bfbb      	ittet	lt
 8010bb0:	425b      	neglt	r3, r3
 8010bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8010bb6:	9307      	strge	r3, [sp, #28]
 8010bb8:	9307      	strlt	r3, [sp, #28]
 8010bba:	bfb8      	it	lt
 8010bbc:	9204      	strlt	r2, [sp, #16]
 8010bbe:	7823      	ldrb	r3, [r4, #0]
 8010bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bc2:	d10a      	bne.n	8010bda <_vfiprintf_r+0x156>
 8010bc4:	7863      	ldrb	r3, [r4, #1]
 8010bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bc8:	d132      	bne.n	8010c30 <_vfiprintf_r+0x1ac>
 8010bca:	9b03      	ldr	r3, [sp, #12]
 8010bcc:	1d1a      	adds	r2, r3, #4
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	9203      	str	r2, [sp, #12]
 8010bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bd6:	3402      	adds	r4, #2
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010cb0 <_vfiprintf_r+0x22c>
 8010bde:	7821      	ldrb	r1, [r4, #0]
 8010be0:	2203      	movs	r2, #3
 8010be2:	4650      	mov	r0, sl
 8010be4:	f7ef fb7c 	bl	80002e0 <memchr>
 8010be8:	b138      	cbz	r0, 8010bfa <_vfiprintf_r+0x176>
 8010bea:	9b04      	ldr	r3, [sp, #16]
 8010bec:	eba0 000a 	sub.w	r0, r0, sl
 8010bf0:	2240      	movs	r2, #64	@ 0x40
 8010bf2:	4082      	lsls	r2, r0
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	3401      	adds	r4, #1
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bfe:	4829      	ldr	r0, [pc, #164]	@ (8010ca4 <_vfiprintf_r+0x220>)
 8010c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c04:	2206      	movs	r2, #6
 8010c06:	f7ef fb6b 	bl	80002e0 <memchr>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d03f      	beq.n	8010c8e <_vfiprintf_r+0x20a>
 8010c0e:	4b26      	ldr	r3, [pc, #152]	@ (8010ca8 <_vfiprintf_r+0x224>)
 8010c10:	bb1b      	cbnz	r3, 8010c5a <_vfiprintf_r+0x1d6>
 8010c12:	9b03      	ldr	r3, [sp, #12]
 8010c14:	3307      	adds	r3, #7
 8010c16:	f023 0307 	bic.w	r3, r3, #7
 8010c1a:	3308      	adds	r3, #8
 8010c1c:	9303      	str	r3, [sp, #12]
 8010c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c20:	443b      	add	r3, r7
 8010c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c24:	e76a      	b.n	8010afc <_vfiprintf_r+0x78>
 8010c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	e7a8      	b.n	8010b82 <_vfiprintf_r+0xfe>
 8010c30:	2300      	movs	r3, #0
 8010c32:	3401      	adds	r4, #1
 8010c34:	9305      	str	r3, [sp, #20]
 8010c36:	4619      	mov	r1, r3
 8010c38:	f04f 0c0a 	mov.w	ip, #10
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c42:	3a30      	subs	r2, #48	@ 0x30
 8010c44:	2a09      	cmp	r2, #9
 8010c46:	d903      	bls.n	8010c50 <_vfiprintf_r+0x1cc>
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d0c6      	beq.n	8010bda <_vfiprintf_r+0x156>
 8010c4c:	9105      	str	r1, [sp, #20]
 8010c4e:	e7c4      	b.n	8010bda <_vfiprintf_r+0x156>
 8010c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c54:	4604      	mov	r4, r0
 8010c56:	2301      	movs	r3, #1
 8010c58:	e7f0      	b.n	8010c3c <_vfiprintf_r+0x1b8>
 8010c5a:	ab03      	add	r3, sp, #12
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	462a      	mov	r2, r5
 8010c60:	4b12      	ldr	r3, [pc, #72]	@ (8010cac <_vfiprintf_r+0x228>)
 8010c62:	a904      	add	r1, sp, #16
 8010c64:	4630      	mov	r0, r6
 8010c66:	f3af 8000 	nop.w
 8010c6a:	4607      	mov	r7, r0
 8010c6c:	1c78      	adds	r0, r7, #1
 8010c6e:	d1d6      	bne.n	8010c1e <_vfiprintf_r+0x19a>
 8010c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c72:	07d9      	lsls	r1, r3, #31
 8010c74:	d405      	bmi.n	8010c82 <_vfiprintf_r+0x1fe>
 8010c76:	89ab      	ldrh	r3, [r5, #12]
 8010c78:	059a      	lsls	r2, r3, #22
 8010c7a:	d402      	bmi.n	8010c82 <_vfiprintf_r+0x1fe>
 8010c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c7e:	f7ff fddd 	bl	801083c <__retarget_lock_release_recursive>
 8010c82:	89ab      	ldrh	r3, [r5, #12]
 8010c84:	065b      	lsls	r3, r3, #25
 8010c86:	f53f af1f 	bmi.w	8010ac8 <_vfiprintf_r+0x44>
 8010c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c8c:	e71e      	b.n	8010acc <_vfiprintf_r+0x48>
 8010c8e:	ab03      	add	r3, sp, #12
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	462a      	mov	r2, r5
 8010c94:	4b05      	ldr	r3, [pc, #20]	@ (8010cac <_vfiprintf_r+0x228>)
 8010c96:	a904      	add	r1, sp, #16
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 f879 	bl	8010d90 <_printf_i>
 8010c9e:	e7e4      	b.n	8010c6a <_vfiprintf_r+0x1e6>
 8010ca0:	080117f0 	.word	0x080117f0
 8010ca4:	080117fa 	.word	0x080117fa
 8010ca8:	00000000 	.word	0x00000000
 8010cac:	08010a5f 	.word	0x08010a5f
 8010cb0:	080117f6 	.word	0x080117f6

08010cb4 <_printf_common>:
 8010cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb8:	4616      	mov	r6, r2
 8010cba:	4698      	mov	r8, r3
 8010cbc:	688a      	ldr	r2, [r1, #8]
 8010cbe:	690b      	ldr	r3, [r1, #16]
 8010cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	bfb8      	it	lt
 8010cc8:	4613      	movlt	r3, r2
 8010cca:	6033      	str	r3, [r6, #0]
 8010ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010cd0:	4607      	mov	r7, r0
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	b10a      	cbz	r2, 8010cda <_printf_common+0x26>
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	6033      	str	r3, [r6, #0]
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	0699      	lsls	r1, r3, #26
 8010cde:	bf42      	ittt	mi
 8010ce0:	6833      	ldrmi	r3, [r6, #0]
 8010ce2:	3302      	addmi	r3, #2
 8010ce4:	6033      	strmi	r3, [r6, #0]
 8010ce6:	6825      	ldr	r5, [r4, #0]
 8010ce8:	f015 0506 	ands.w	r5, r5, #6
 8010cec:	d106      	bne.n	8010cfc <_printf_common+0x48>
 8010cee:	f104 0a19 	add.w	sl, r4, #25
 8010cf2:	68e3      	ldr	r3, [r4, #12]
 8010cf4:	6832      	ldr	r2, [r6, #0]
 8010cf6:	1a9b      	subs	r3, r3, r2
 8010cf8:	42ab      	cmp	r3, r5
 8010cfa:	dc26      	bgt.n	8010d4a <_printf_common+0x96>
 8010cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d00:	6822      	ldr	r2, [r4, #0]
 8010d02:	3b00      	subs	r3, #0
 8010d04:	bf18      	it	ne
 8010d06:	2301      	movne	r3, #1
 8010d08:	0692      	lsls	r2, r2, #26
 8010d0a:	d42b      	bmi.n	8010d64 <_printf_common+0xb0>
 8010d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d10:	4641      	mov	r1, r8
 8010d12:	4638      	mov	r0, r7
 8010d14:	47c8      	blx	r9
 8010d16:	3001      	adds	r0, #1
 8010d18:	d01e      	beq.n	8010d58 <_printf_common+0xa4>
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	6922      	ldr	r2, [r4, #16]
 8010d1e:	f003 0306 	and.w	r3, r3, #6
 8010d22:	2b04      	cmp	r3, #4
 8010d24:	bf02      	ittt	eq
 8010d26:	68e5      	ldreq	r5, [r4, #12]
 8010d28:	6833      	ldreq	r3, [r6, #0]
 8010d2a:	1aed      	subeq	r5, r5, r3
 8010d2c:	68a3      	ldr	r3, [r4, #8]
 8010d2e:	bf0c      	ite	eq
 8010d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d34:	2500      	movne	r5, #0
 8010d36:	4293      	cmp	r3, r2
 8010d38:	bfc4      	itt	gt
 8010d3a:	1a9b      	subgt	r3, r3, r2
 8010d3c:	18ed      	addgt	r5, r5, r3
 8010d3e:	2600      	movs	r6, #0
 8010d40:	341a      	adds	r4, #26
 8010d42:	42b5      	cmp	r5, r6
 8010d44:	d11a      	bne.n	8010d7c <_printf_common+0xc8>
 8010d46:	2000      	movs	r0, #0
 8010d48:	e008      	b.n	8010d5c <_printf_common+0xa8>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	4652      	mov	r2, sl
 8010d4e:	4641      	mov	r1, r8
 8010d50:	4638      	mov	r0, r7
 8010d52:	47c8      	blx	r9
 8010d54:	3001      	adds	r0, #1
 8010d56:	d103      	bne.n	8010d60 <_printf_common+0xac>
 8010d58:	f04f 30ff 	mov.w	r0, #4294967295
 8010d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d60:	3501      	adds	r5, #1
 8010d62:	e7c6      	b.n	8010cf2 <_printf_common+0x3e>
 8010d64:	18e1      	adds	r1, r4, r3
 8010d66:	1c5a      	adds	r2, r3, #1
 8010d68:	2030      	movs	r0, #48	@ 0x30
 8010d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d6e:	4422      	add	r2, r4
 8010d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d78:	3302      	adds	r3, #2
 8010d7a:	e7c7      	b.n	8010d0c <_printf_common+0x58>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	4622      	mov	r2, r4
 8010d80:	4641      	mov	r1, r8
 8010d82:	4638      	mov	r0, r7
 8010d84:	47c8      	blx	r9
 8010d86:	3001      	adds	r0, #1
 8010d88:	d0e6      	beq.n	8010d58 <_printf_common+0xa4>
 8010d8a:	3601      	adds	r6, #1
 8010d8c:	e7d9      	b.n	8010d42 <_printf_common+0x8e>
	...

08010d90 <_printf_i>:
 8010d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d94:	7e0f      	ldrb	r7, [r1, #24]
 8010d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d98:	2f78      	cmp	r7, #120	@ 0x78
 8010d9a:	4691      	mov	r9, r2
 8010d9c:	4680      	mov	r8, r0
 8010d9e:	460c      	mov	r4, r1
 8010da0:	469a      	mov	sl, r3
 8010da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010da6:	d807      	bhi.n	8010db8 <_printf_i+0x28>
 8010da8:	2f62      	cmp	r7, #98	@ 0x62
 8010daa:	d80a      	bhi.n	8010dc2 <_printf_i+0x32>
 8010dac:	2f00      	cmp	r7, #0
 8010dae:	f000 80d1 	beq.w	8010f54 <_printf_i+0x1c4>
 8010db2:	2f58      	cmp	r7, #88	@ 0x58
 8010db4:	f000 80b8 	beq.w	8010f28 <_printf_i+0x198>
 8010db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010dc0:	e03a      	b.n	8010e38 <_printf_i+0xa8>
 8010dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010dc6:	2b15      	cmp	r3, #21
 8010dc8:	d8f6      	bhi.n	8010db8 <_printf_i+0x28>
 8010dca:	a101      	add	r1, pc, #4	@ (adr r1, 8010dd0 <_printf_i+0x40>)
 8010dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010dd0:	08010e29 	.word	0x08010e29
 8010dd4:	08010e3d 	.word	0x08010e3d
 8010dd8:	08010db9 	.word	0x08010db9
 8010ddc:	08010db9 	.word	0x08010db9
 8010de0:	08010db9 	.word	0x08010db9
 8010de4:	08010db9 	.word	0x08010db9
 8010de8:	08010e3d 	.word	0x08010e3d
 8010dec:	08010db9 	.word	0x08010db9
 8010df0:	08010db9 	.word	0x08010db9
 8010df4:	08010db9 	.word	0x08010db9
 8010df8:	08010db9 	.word	0x08010db9
 8010dfc:	08010f3b 	.word	0x08010f3b
 8010e00:	08010e67 	.word	0x08010e67
 8010e04:	08010ef5 	.word	0x08010ef5
 8010e08:	08010db9 	.word	0x08010db9
 8010e0c:	08010db9 	.word	0x08010db9
 8010e10:	08010f5d 	.word	0x08010f5d
 8010e14:	08010db9 	.word	0x08010db9
 8010e18:	08010e67 	.word	0x08010e67
 8010e1c:	08010db9 	.word	0x08010db9
 8010e20:	08010db9 	.word	0x08010db9
 8010e24:	08010efd 	.word	0x08010efd
 8010e28:	6833      	ldr	r3, [r6, #0]
 8010e2a:	1d1a      	adds	r2, r3, #4
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6032      	str	r2, [r6, #0]
 8010e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e09c      	b.n	8010f76 <_printf_i+0x1e6>
 8010e3c:	6833      	ldr	r3, [r6, #0]
 8010e3e:	6820      	ldr	r0, [r4, #0]
 8010e40:	1d19      	adds	r1, r3, #4
 8010e42:	6031      	str	r1, [r6, #0]
 8010e44:	0606      	lsls	r6, r0, #24
 8010e46:	d501      	bpl.n	8010e4c <_printf_i+0xbc>
 8010e48:	681d      	ldr	r5, [r3, #0]
 8010e4a:	e003      	b.n	8010e54 <_printf_i+0xc4>
 8010e4c:	0645      	lsls	r5, r0, #25
 8010e4e:	d5fb      	bpl.n	8010e48 <_printf_i+0xb8>
 8010e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e54:	2d00      	cmp	r5, #0
 8010e56:	da03      	bge.n	8010e60 <_printf_i+0xd0>
 8010e58:	232d      	movs	r3, #45	@ 0x2d
 8010e5a:	426d      	negs	r5, r5
 8010e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e60:	4858      	ldr	r0, [pc, #352]	@ (8010fc4 <_printf_i+0x234>)
 8010e62:	230a      	movs	r3, #10
 8010e64:	e011      	b.n	8010e8a <_printf_i+0xfa>
 8010e66:	6821      	ldr	r1, [r4, #0]
 8010e68:	6833      	ldr	r3, [r6, #0]
 8010e6a:	0608      	lsls	r0, r1, #24
 8010e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e70:	d402      	bmi.n	8010e78 <_printf_i+0xe8>
 8010e72:	0649      	lsls	r1, r1, #25
 8010e74:	bf48      	it	mi
 8010e76:	b2ad      	uxthmi	r5, r5
 8010e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e7a:	4852      	ldr	r0, [pc, #328]	@ (8010fc4 <_printf_i+0x234>)
 8010e7c:	6033      	str	r3, [r6, #0]
 8010e7e:	bf14      	ite	ne
 8010e80:	230a      	movne	r3, #10
 8010e82:	2308      	moveq	r3, #8
 8010e84:	2100      	movs	r1, #0
 8010e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e8a:	6866      	ldr	r6, [r4, #4]
 8010e8c:	60a6      	str	r6, [r4, #8]
 8010e8e:	2e00      	cmp	r6, #0
 8010e90:	db05      	blt.n	8010e9e <_printf_i+0x10e>
 8010e92:	6821      	ldr	r1, [r4, #0]
 8010e94:	432e      	orrs	r6, r5
 8010e96:	f021 0104 	bic.w	r1, r1, #4
 8010e9a:	6021      	str	r1, [r4, #0]
 8010e9c:	d04b      	beq.n	8010f36 <_printf_i+0x1a6>
 8010e9e:	4616      	mov	r6, r2
 8010ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8010ea8:	5dc7      	ldrb	r7, [r0, r7]
 8010eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010eae:	462f      	mov	r7, r5
 8010eb0:	42bb      	cmp	r3, r7
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	d9f4      	bls.n	8010ea0 <_printf_i+0x110>
 8010eb6:	2b08      	cmp	r3, #8
 8010eb8:	d10b      	bne.n	8010ed2 <_printf_i+0x142>
 8010eba:	6823      	ldr	r3, [r4, #0]
 8010ebc:	07df      	lsls	r7, r3, #31
 8010ebe:	d508      	bpl.n	8010ed2 <_printf_i+0x142>
 8010ec0:	6923      	ldr	r3, [r4, #16]
 8010ec2:	6861      	ldr	r1, [r4, #4]
 8010ec4:	4299      	cmp	r1, r3
 8010ec6:	bfde      	ittt	le
 8010ec8:	2330      	movle	r3, #48	@ 0x30
 8010eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ece:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ed2:	1b92      	subs	r2, r2, r6
 8010ed4:	6122      	str	r2, [r4, #16]
 8010ed6:	f8cd a000 	str.w	sl, [sp]
 8010eda:	464b      	mov	r3, r9
 8010edc:	aa03      	add	r2, sp, #12
 8010ede:	4621      	mov	r1, r4
 8010ee0:	4640      	mov	r0, r8
 8010ee2:	f7ff fee7 	bl	8010cb4 <_printf_common>
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	d14a      	bne.n	8010f80 <_printf_i+0x1f0>
 8010eea:	f04f 30ff 	mov.w	r0, #4294967295
 8010eee:	b004      	add	sp, #16
 8010ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef4:	6823      	ldr	r3, [r4, #0]
 8010ef6:	f043 0320 	orr.w	r3, r3, #32
 8010efa:	6023      	str	r3, [r4, #0]
 8010efc:	4832      	ldr	r0, [pc, #200]	@ (8010fc8 <_printf_i+0x238>)
 8010efe:	2778      	movs	r7, #120	@ 0x78
 8010f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	6831      	ldr	r1, [r6, #0]
 8010f08:	061f      	lsls	r7, r3, #24
 8010f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f0e:	d402      	bmi.n	8010f16 <_printf_i+0x186>
 8010f10:	065f      	lsls	r7, r3, #25
 8010f12:	bf48      	it	mi
 8010f14:	b2ad      	uxthmi	r5, r5
 8010f16:	6031      	str	r1, [r6, #0]
 8010f18:	07d9      	lsls	r1, r3, #31
 8010f1a:	bf44      	itt	mi
 8010f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8010f20:	6023      	strmi	r3, [r4, #0]
 8010f22:	b11d      	cbz	r5, 8010f2c <_printf_i+0x19c>
 8010f24:	2310      	movs	r3, #16
 8010f26:	e7ad      	b.n	8010e84 <_printf_i+0xf4>
 8010f28:	4826      	ldr	r0, [pc, #152]	@ (8010fc4 <_printf_i+0x234>)
 8010f2a:	e7e9      	b.n	8010f00 <_printf_i+0x170>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	f023 0320 	bic.w	r3, r3, #32
 8010f32:	6023      	str	r3, [r4, #0]
 8010f34:	e7f6      	b.n	8010f24 <_printf_i+0x194>
 8010f36:	4616      	mov	r6, r2
 8010f38:	e7bd      	b.n	8010eb6 <_printf_i+0x126>
 8010f3a:	6833      	ldr	r3, [r6, #0]
 8010f3c:	6825      	ldr	r5, [r4, #0]
 8010f3e:	6961      	ldr	r1, [r4, #20]
 8010f40:	1d18      	adds	r0, r3, #4
 8010f42:	6030      	str	r0, [r6, #0]
 8010f44:	062e      	lsls	r6, r5, #24
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	d501      	bpl.n	8010f4e <_printf_i+0x1be>
 8010f4a:	6019      	str	r1, [r3, #0]
 8010f4c:	e002      	b.n	8010f54 <_printf_i+0x1c4>
 8010f4e:	0668      	lsls	r0, r5, #25
 8010f50:	d5fb      	bpl.n	8010f4a <_printf_i+0x1ba>
 8010f52:	8019      	strh	r1, [r3, #0]
 8010f54:	2300      	movs	r3, #0
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	4616      	mov	r6, r2
 8010f5a:	e7bc      	b.n	8010ed6 <_printf_i+0x146>
 8010f5c:	6833      	ldr	r3, [r6, #0]
 8010f5e:	1d1a      	adds	r2, r3, #4
 8010f60:	6032      	str	r2, [r6, #0]
 8010f62:	681e      	ldr	r6, [r3, #0]
 8010f64:	6862      	ldr	r2, [r4, #4]
 8010f66:	2100      	movs	r1, #0
 8010f68:	4630      	mov	r0, r6
 8010f6a:	f7ef f9b9 	bl	80002e0 <memchr>
 8010f6e:	b108      	cbz	r0, 8010f74 <_printf_i+0x1e4>
 8010f70:	1b80      	subs	r0, r0, r6
 8010f72:	6060      	str	r0, [r4, #4]
 8010f74:	6863      	ldr	r3, [r4, #4]
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	2300      	movs	r3, #0
 8010f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f7e:	e7aa      	b.n	8010ed6 <_printf_i+0x146>
 8010f80:	6923      	ldr	r3, [r4, #16]
 8010f82:	4632      	mov	r2, r6
 8010f84:	4649      	mov	r1, r9
 8010f86:	4640      	mov	r0, r8
 8010f88:	47d0      	blx	sl
 8010f8a:	3001      	adds	r0, #1
 8010f8c:	d0ad      	beq.n	8010eea <_printf_i+0x15a>
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	079b      	lsls	r3, r3, #30
 8010f92:	d413      	bmi.n	8010fbc <_printf_i+0x22c>
 8010f94:	68e0      	ldr	r0, [r4, #12]
 8010f96:	9b03      	ldr	r3, [sp, #12]
 8010f98:	4298      	cmp	r0, r3
 8010f9a:	bfb8      	it	lt
 8010f9c:	4618      	movlt	r0, r3
 8010f9e:	e7a6      	b.n	8010eee <_printf_i+0x15e>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	4632      	mov	r2, r6
 8010fa4:	4649      	mov	r1, r9
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	47d0      	blx	sl
 8010faa:	3001      	adds	r0, #1
 8010fac:	d09d      	beq.n	8010eea <_printf_i+0x15a>
 8010fae:	3501      	adds	r5, #1
 8010fb0:	68e3      	ldr	r3, [r4, #12]
 8010fb2:	9903      	ldr	r1, [sp, #12]
 8010fb4:	1a5b      	subs	r3, r3, r1
 8010fb6:	42ab      	cmp	r3, r5
 8010fb8:	dcf2      	bgt.n	8010fa0 <_printf_i+0x210>
 8010fba:	e7eb      	b.n	8010f94 <_printf_i+0x204>
 8010fbc:	2500      	movs	r5, #0
 8010fbe:	f104 0619 	add.w	r6, r4, #25
 8010fc2:	e7f5      	b.n	8010fb0 <_printf_i+0x220>
 8010fc4:	08011801 	.word	0x08011801
 8010fc8:	08011812 	.word	0x08011812

08010fcc <__sflush_r>:
 8010fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd4:	0716      	lsls	r6, r2, #28
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	460c      	mov	r4, r1
 8010fda:	d454      	bmi.n	8011086 <__sflush_r+0xba>
 8010fdc:	684b      	ldr	r3, [r1, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	dc02      	bgt.n	8010fe8 <__sflush_r+0x1c>
 8010fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	dd48      	ble.n	801107a <__sflush_r+0xae>
 8010fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fea:	2e00      	cmp	r6, #0
 8010fec:	d045      	beq.n	801107a <__sflush_r+0xae>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ff4:	682f      	ldr	r7, [r5, #0]
 8010ff6:	6a21      	ldr	r1, [r4, #32]
 8010ff8:	602b      	str	r3, [r5, #0]
 8010ffa:	d030      	beq.n	801105e <__sflush_r+0x92>
 8010ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010ffe:	89a3      	ldrh	r3, [r4, #12]
 8011000:	0759      	lsls	r1, r3, #29
 8011002:	d505      	bpl.n	8011010 <__sflush_r+0x44>
 8011004:	6863      	ldr	r3, [r4, #4]
 8011006:	1ad2      	subs	r2, r2, r3
 8011008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801100a:	b10b      	cbz	r3, 8011010 <__sflush_r+0x44>
 801100c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	2300      	movs	r3, #0
 8011012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011014:	6a21      	ldr	r1, [r4, #32]
 8011016:	4628      	mov	r0, r5
 8011018:	47b0      	blx	r6
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	d106      	bne.n	801102e <__sflush_r+0x62>
 8011020:	6829      	ldr	r1, [r5, #0]
 8011022:	291d      	cmp	r1, #29
 8011024:	d82b      	bhi.n	801107e <__sflush_r+0xb2>
 8011026:	4a2a      	ldr	r2, [pc, #168]	@ (80110d0 <__sflush_r+0x104>)
 8011028:	40ca      	lsrs	r2, r1
 801102a:	07d6      	lsls	r6, r2, #31
 801102c:	d527      	bpl.n	801107e <__sflush_r+0xb2>
 801102e:	2200      	movs	r2, #0
 8011030:	6062      	str	r2, [r4, #4]
 8011032:	04d9      	lsls	r1, r3, #19
 8011034:	6922      	ldr	r2, [r4, #16]
 8011036:	6022      	str	r2, [r4, #0]
 8011038:	d504      	bpl.n	8011044 <__sflush_r+0x78>
 801103a:	1c42      	adds	r2, r0, #1
 801103c:	d101      	bne.n	8011042 <__sflush_r+0x76>
 801103e:	682b      	ldr	r3, [r5, #0]
 8011040:	b903      	cbnz	r3, 8011044 <__sflush_r+0x78>
 8011042:	6560      	str	r0, [r4, #84]	@ 0x54
 8011044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011046:	602f      	str	r7, [r5, #0]
 8011048:	b1b9      	cbz	r1, 801107a <__sflush_r+0xae>
 801104a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801104e:	4299      	cmp	r1, r3
 8011050:	d002      	beq.n	8011058 <__sflush_r+0x8c>
 8011052:	4628      	mov	r0, r5
 8011054:	f7ff fbf4 	bl	8010840 <_free_r>
 8011058:	2300      	movs	r3, #0
 801105a:	6363      	str	r3, [r4, #52]	@ 0x34
 801105c:	e00d      	b.n	801107a <__sflush_r+0xae>
 801105e:	2301      	movs	r3, #1
 8011060:	4628      	mov	r0, r5
 8011062:	47b0      	blx	r6
 8011064:	4602      	mov	r2, r0
 8011066:	1c50      	adds	r0, r2, #1
 8011068:	d1c9      	bne.n	8010ffe <__sflush_r+0x32>
 801106a:	682b      	ldr	r3, [r5, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d0c6      	beq.n	8010ffe <__sflush_r+0x32>
 8011070:	2b1d      	cmp	r3, #29
 8011072:	d001      	beq.n	8011078 <__sflush_r+0xac>
 8011074:	2b16      	cmp	r3, #22
 8011076:	d11e      	bne.n	80110b6 <__sflush_r+0xea>
 8011078:	602f      	str	r7, [r5, #0]
 801107a:	2000      	movs	r0, #0
 801107c:	e022      	b.n	80110c4 <__sflush_r+0xf8>
 801107e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011082:	b21b      	sxth	r3, r3
 8011084:	e01b      	b.n	80110be <__sflush_r+0xf2>
 8011086:	690f      	ldr	r7, [r1, #16]
 8011088:	2f00      	cmp	r7, #0
 801108a:	d0f6      	beq.n	801107a <__sflush_r+0xae>
 801108c:	0793      	lsls	r3, r2, #30
 801108e:	680e      	ldr	r6, [r1, #0]
 8011090:	bf08      	it	eq
 8011092:	694b      	ldreq	r3, [r1, #20]
 8011094:	600f      	str	r7, [r1, #0]
 8011096:	bf18      	it	ne
 8011098:	2300      	movne	r3, #0
 801109a:	eba6 0807 	sub.w	r8, r6, r7
 801109e:	608b      	str	r3, [r1, #8]
 80110a0:	f1b8 0f00 	cmp.w	r8, #0
 80110a4:	dde9      	ble.n	801107a <__sflush_r+0xae>
 80110a6:	6a21      	ldr	r1, [r4, #32]
 80110a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80110aa:	4643      	mov	r3, r8
 80110ac:	463a      	mov	r2, r7
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b0      	blx	r6
 80110b2:	2800      	cmp	r0, #0
 80110b4:	dc08      	bgt.n	80110c8 <__sflush_r+0xfc>
 80110b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110be:	81a3      	strh	r3, [r4, #12]
 80110c0:	f04f 30ff 	mov.w	r0, #4294967295
 80110c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c8:	4407      	add	r7, r0
 80110ca:	eba8 0800 	sub.w	r8, r8, r0
 80110ce:	e7e7      	b.n	80110a0 <__sflush_r+0xd4>
 80110d0:	20400001 	.word	0x20400001

080110d4 <_fflush_r>:
 80110d4:	b538      	push	{r3, r4, r5, lr}
 80110d6:	690b      	ldr	r3, [r1, #16]
 80110d8:	4605      	mov	r5, r0
 80110da:	460c      	mov	r4, r1
 80110dc:	b913      	cbnz	r3, 80110e4 <_fflush_r+0x10>
 80110de:	2500      	movs	r5, #0
 80110e0:	4628      	mov	r0, r5
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	b118      	cbz	r0, 80110ee <_fflush_r+0x1a>
 80110e6:	6a03      	ldr	r3, [r0, #32]
 80110e8:	b90b      	cbnz	r3, 80110ee <_fflush_r+0x1a>
 80110ea:	f7ff f9af 	bl	801044c <__sinit>
 80110ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d0f3      	beq.n	80110de <_fflush_r+0xa>
 80110f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80110f8:	07d0      	lsls	r0, r2, #31
 80110fa:	d404      	bmi.n	8011106 <_fflush_r+0x32>
 80110fc:	0599      	lsls	r1, r3, #22
 80110fe:	d402      	bmi.n	8011106 <_fflush_r+0x32>
 8011100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011102:	f7ff fb9a 	bl	801083a <__retarget_lock_acquire_recursive>
 8011106:	4628      	mov	r0, r5
 8011108:	4621      	mov	r1, r4
 801110a:	f7ff ff5f 	bl	8010fcc <__sflush_r>
 801110e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011110:	07da      	lsls	r2, r3, #31
 8011112:	4605      	mov	r5, r0
 8011114:	d4e4      	bmi.n	80110e0 <_fflush_r+0xc>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	059b      	lsls	r3, r3, #22
 801111a:	d4e1      	bmi.n	80110e0 <_fflush_r+0xc>
 801111c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801111e:	f7ff fb8d 	bl	801083c <__retarget_lock_release_recursive>
 8011122:	e7dd      	b.n	80110e0 <_fflush_r+0xc>

08011124 <__swhatbuf_r>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	460c      	mov	r4, r1
 8011128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801112c:	2900      	cmp	r1, #0
 801112e:	b096      	sub	sp, #88	@ 0x58
 8011130:	4615      	mov	r5, r2
 8011132:	461e      	mov	r6, r3
 8011134:	da0d      	bge.n	8011152 <__swhatbuf_r+0x2e>
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801113c:	f04f 0100 	mov.w	r1, #0
 8011140:	bf14      	ite	ne
 8011142:	2340      	movne	r3, #64	@ 0x40
 8011144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011148:	2000      	movs	r0, #0
 801114a:	6031      	str	r1, [r6, #0]
 801114c:	602b      	str	r3, [r5, #0]
 801114e:	b016      	add	sp, #88	@ 0x58
 8011150:	bd70      	pop	{r4, r5, r6, pc}
 8011152:	466a      	mov	r2, sp
 8011154:	f000 f848 	bl	80111e8 <_fstat_r>
 8011158:	2800      	cmp	r0, #0
 801115a:	dbec      	blt.n	8011136 <__swhatbuf_r+0x12>
 801115c:	9901      	ldr	r1, [sp, #4]
 801115e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011166:	4259      	negs	r1, r3
 8011168:	4159      	adcs	r1, r3
 801116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801116e:	e7eb      	b.n	8011148 <__swhatbuf_r+0x24>

08011170 <__smakebuf_r>:
 8011170:	898b      	ldrh	r3, [r1, #12]
 8011172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011174:	079d      	lsls	r5, r3, #30
 8011176:	4606      	mov	r6, r0
 8011178:	460c      	mov	r4, r1
 801117a:	d507      	bpl.n	801118c <__smakebuf_r+0x1c>
 801117c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011180:	6023      	str	r3, [r4, #0]
 8011182:	6123      	str	r3, [r4, #16]
 8011184:	2301      	movs	r3, #1
 8011186:	6163      	str	r3, [r4, #20]
 8011188:	b003      	add	sp, #12
 801118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801118c:	ab01      	add	r3, sp, #4
 801118e:	466a      	mov	r2, sp
 8011190:	f7ff ffc8 	bl	8011124 <__swhatbuf_r>
 8011194:	9f00      	ldr	r7, [sp, #0]
 8011196:	4605      	mov	r5, r0
 8011198:	4639      	mov	r1, r7
 801119a:	4630      	mov	r0, r6
 801119c:	f7ff fbbc 	bl	8010918 <_malloc_r>
 80111a0:	b948      	cbnz	r0, 80111b6 <__smakebuf_r+0x46>
 80111a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a6:	059a      	lsls	r2, r3, #22
 80111a8:	d4ee      	bmi.n	8011188 <__smakebuf_r+0x18>
 80111aa:	f023 0303 	bic.w	r3, r3, #3
 80111ae:	f043 0302 	orr.w	r3, r3, #2
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	e7e2      	b.n	801117c <__smakebuf_r+0xc>
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	6020      	str	r0, [r4, #0]
 80111ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111be:	81a3      	strh	r3, [r4, #12]
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80111c6:	b15b      	cbz	r3, 80111e0 <__smakebuf_r+0x70>
 80111c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111cc:	4630      	mov	r0, r6
 80111ce:	f000 f81d 	bl	801120c <_isatty_r>
 80111d2:	b128      	cbz	r0, 80111e0 <__smakebuf_r+0x70>
 80111d4:	89a3      	ldrh	r3, [r4, #12]
 80111d6:	f023 0303 	bic.w	r3, r3, #3
 80111da:	f043 0301 	orr.w	r3, r3, #1
 80111de:	81a3      	strh	r3, [r4, #12]
 80111e0:	89a3      	ldrh	r3, [r4, #12]
 80111e2:	431d      	orrs	r5, r3
 80111e4:	81a5      	strh	r5, [r4, #12]
 80111e6:	e7cf      	b.n	8011188 <__smakebuf_r+0x18>

080111e8 <_fstat_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d07      	ldr	r5, [pc, #28]	@ (8011208 <_fstat_r+0x20>)
 80111ec:	2300      	movs	r3, #0
 80111ee:	4604      	mov	r4, r0
 80111f0:	4608      	mov	r0, r1
 80111f2:	4611      	mov	r1, r2
 80111f4:	602b      	str	r3, [r5, #0]
 80111f6:	f7f0 f9aa 	bl	800154e <_fstat>
 80111fa:	1c43      	adds	r3, r0, #1
 80111fc:	d102      	bne.n	8011204 <_fstat_r+0x1c>
 80111fe:	682b      	ldr	r3, [r5, #0]
 8011200:	b103      	cbz	r3, 8011204 <_fstat_r+0x1c>
 8011202:	6023      	str	r3, [r4, #0]
 8011204:	bd38      	pop	{r3, r4, r5, pc}
 8011206:	bf00      	nop
 8011208:	24075df4 	.word	0x24075df4

0801120c <_isatty_r>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4d06      	ldr	r5, [pc, #24]	@ (8011228 <_isatty_r+0x1c>)
 8011210:	2300      	movs	r3, #0
 8011212:	4604      	mov	r4, r0
 8011214:	4608      	mov	r0, r1
 8011216:	602b      	str	r3, [r5, #0]
 8011218:	f7f0 f9a9 	bl	800156e <_isatty>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d102      	bne.n	8011226 <_isatty_r+0x1a>
 8011220:	682b      	ldr	r3, [r5, #0]
 8011222:	b103      	cbz	r3, 8011226 <_isatty_r+0x1a>
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	24075df4 	.word	0x24075df4

0801122c <_sbrk_r>:
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	4d06      	ldr	r5, [pc, #24]	@ (8011248 <_sbrk_r+0x1c>)
 8011230:	2300      	movs	r3, #0
 8011232:	4604      	mov	r4, r0
 8011234:	4608      	mov	r0, r1
 8011236:	602b      	str	r3, [r5, #0]
 8011238:	f7f0 f9b2 	bl	80015a0 <_sbrk>
 801123c:	1c43      	adds	r3, r0, #1
 801123e:	d102      	bne.n	8011246 <_sbrk_r+0x1a>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	b103      	cbz	r3, 8011246 <_sbrk_r+0x1a>
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	24075df4 	.word	0x24075df4

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	bf00      	nop
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
